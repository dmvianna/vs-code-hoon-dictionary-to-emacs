[
    {
        "doc": "<h2><code>|$</code> \"barbuc\"</h2>\n\n<p>Declares a mold builder wet gate with one or more molds as its sample.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;$  sample<p>  body<p>  </pre> |\n| Wide | <pre>  &verbar;$(sample body)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brbc sample=(lest term) body=spec]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n|$  [a b]\nbody\n</code></p>\n\n<p>becomes</p>\n\n<p><code>hoon\n|*  [a=$~(* $-(* *)) b=$~(* $-(* *))]\n^:\nbody\n</code></p>\n\n<h4>Semantics</h4>\n\n<p><code>|$</code> is used to declare a wet gate mold builder that is polymorphic in its input\nmolds. <code>a</code> is a <code>lest</code> of <code>term</code> used as identifiers for the input molds. <code>b</code> is\na structure built from elements of <code>a</code>. The output of <code>|$</code> is a mold builder\nobtained by substituting the input molds parameterized by <code>a</code> into <code>b</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>A mold builder is a wet gate from one or more molds to a mold. A mold is a\nfunction from nouns to nouns with types that may be partial, is always\nidempotent, and usually the identity function on the noun itself.</p>\n\n<p><code>|$</code> is a restricted form of <code>|*</code>. The use of <code>|$</code> over <code>|*</code> is one of style, as\neither could be used to make wet gates that are mold builders. The buc in <code>|$</code>\nis a hint that <code>|$</code> is closely related to buc runes, and thus <code>|$</code> should be\nused to make mold builders, while <code>|*</code> should be used for any other sort of wet\ngate. Unlike <code>|*</code>, the body of <code>|$</code> is parsed in pattern mode to a <code>$spec</code>.\nThus, the second argument of <code>|$</code> is frequently a buc rune. For further\ndiscussion of wet gates, see the entry for <a href=\"#-bartar\"><code>|*</code></a>.</p>\n\n<p>Like other single-arm cores, the arm for <code>|$</code> is named <code>$</code> and this can be used to\ndefine recursive structures. Note however that Hoon is evaluated eagerly, and so\ninfinite structures are not permitted.</p>\n\n<p>Proper style for <code>|$</code> is to enclose the first argument with brackets, even if it\nis only a single term. The interpeter will accept a single term without brackets\njust fine, but this style is for consistency with the fact that the first\nargument is a <code>lest</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |$([a b] [b a])</p>\n</blockquote>\n\n<blockquote>\n  <p>=bar (foo [@ @tas])</p>\n</blockquote>\n\n<blockquote>\n  <p>(bar %cat 3)\n  [%cat 3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|$"
        ]
    },
    {
        "doc": "<h2><code>|_</code> \"barcab\"</h2>\n\n<p>Produce a <strong>door</strong> (a core with a sample).</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of <code>+</code>-family expressions.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;_  a=spec<p>  ++  b=term  c=hoon<p>  ++  d=term  e=hoon<p>       ...<p>  ++  f=term  g=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<p>Note: The <code>++</code> rune may be replaced with any other rune in the <code>+</code> family.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brcb p=spec q=alas r=(map term tome)]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p>```hoon\n=|  a=spec\n|%\n++  b=term  c=hoon\n++  d=term  e=hoon\n       ...</p>\n\n<h2>++  f=term  g=hoon</h2>\n\n<p>```</p>\n\n<h4>Semantics</h4>\n\n<p>The product of a <code>|_</code> expression is a <strong>door</strong>, a core with one or more arms\nwhose payload includes a sample. That is, a door is a cell of <code>[battery [sample context]]</code>, where the <code>battery</code> contains one or more arms.</p>\n\n<p><code>a</code> defines the door sample type and usually includes a name assignment (e.g.,\n<code>n=@</code>). <code>a</code> is followed by a series of arm definitions, each of which begins\nwith a rune in the <code>+</code> family (most of <code>++</code>). There must be at least one arm,\nbut there may be arbitrarily many. Each arm must include a name (<code>b</code>, <code>d</code>, and\n<code>f</code> above), which is followed by the expression (<code>c</code>, <code>e</code>, and <code>g</code> above) that\ndefines the arm product.</p>\n\n<p>The context of the door is the subject of the <code>|_</code> expression.</p>\n\n<h4>Discussion</h4>\n\n<p>A door is the general case of a gate (function). A gate is a door with only one\narm, which has the name <code>$</code>.</p>\n\n<p>Calling a door is like calling a gate except the caller also needs to specify\nthe arm to be computed. So, for example, if you have some door <code>door</code> which\ncontains some arm <code>arm</code>, and you want to pass some argument (i.e., input value\n<code>arg</code>), you would call it with <code>~(arm door arg)</code>.</p>\n\n<p>Because gates are also doors, you can call them the same way. To call the gate\n<code>foo</code> as a door, instead of <code>(foo baz)</code> we would write <code>~($ foo baz)</code>. This is\nan irregular form for <code>%~($ foo baz)</code>,\n<a href=\"/reference/hoon/rune/cen#-censig\">%~</a>.</p>\n\n<h4>Examples</h4>\n\n<p>A trivial door:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=mol |_  a=@ud\n         ++  succ  +(a)\n         ++  prev  (dec a)\n         --</p>\n</blockquote>\n\n<blockquote>\n  <p>~(succ mol 1)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>~(succ mol ~(succ mol ~(prev mol 5)))\n  6\n  ```</p>\n</blockquote>\n\n<p>A more interesting door, from the kernel library:</p>\n\n<p><code>hoon\n++  ne\n  |_  tig=@\n  ++  d  (add tig '0')\n  ++  x  ?:((gte tig 10) (add tig 87) d)\n  ++  v  ?:((gte tig 10) (add tig 87) d)\n  ++  w  ?:(=(tig 63) '~' ?:(=(tig 62) '-' ?:((gte tig 36) (add tig 29) x)))\n  --\n</code></p>\n\n<p>The <code>ne</code> door prints a digit in base 10, 16, 32 or 64:</p>\n\n<p><code>\n~zod:dojo&gt; `@t`~(x ne 12)\n'c'\n</code></p>\n\n<hr />\n",
        "keys": [
            "|_"
        ]
    },
    {
        "doc": "<h2><code>|:</code> \"barcol\"</h2>\n\n<p>Produce a gate with a custom sample.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;:  a<p>  b<p>  </pre> |\n| Wide | <pre>  &verbar;:(a b)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brcl p=hoon q=hoon]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p><code>a</code> is a Hoon expression whose product type defines which values the gate accepts, and it usually includes a name (e.g., <code>n=1</code>). The product of <code>a</code> also serves as the default value of the sample. <code>b</code> is a Hoon expression that determines the product value of the gate.</p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=+  a\n|.  b\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>Pick your own default value for the sample. Note that <code>a</code> is an ordinary\nexpression, not a type; <code>|:</code> doesn't bunt a sample as <a href=\"#-bartis\"><code>|=</code></a> does.</p>\n\n<p>This is useful if you want a gate to have a sample of a particular type, but you don't want the default value of the gate to be the default value of that type.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=add-ten |:(n=<code>@</code>2 (add n 10))</p>\n</blockquote>\n\n<blockquote>\n  <p>(add-ten 10)\n  20</p>\n</blockquote>\n\n<blockquote>\n  <p>(add-ten)\n  12\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|:"
        ]
    },
    {
        "doc": "<h2><code>|%</code> \"barcen\"</h2>\n\n<p>Produce a core, <code>[battery payload]</code>.</p>\n\n<h4>Syntax</h4>\n\n<p>Argument: a variable number of <code>+</code>-family expressions.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;%<p>  ++  a=term  b=hoon<p>  ++  c=term  d=hoon<p>       ...<p>  ++  e=term  f=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<p>Note: The <code>++</code> rune may be replaced with any other rune in the <code>+</code> family.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brcn p=(unit term) q=(map term tome)]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>The product of a <code>|%</code> expression is a dry core with one or more arms in the\nbattery.</p>\n\n<p>The <code>|%</code> rune is followed by a series of arm definitions, each of which begins\nwith a rune in the <code>+</code> family (most of <code>++</code>). There must be at least one arm,\nbut there may be arbitrarily many. Each arm must include a name (<code>a</code>, <code>c</code>, and\n<code>e</code> above), which is followed by the expression (<code>b</code>, <code>d</code>, and <code>f</code> above) that\ndefines the arm product.</p>\n\n<p>The core payload is the subject of the <code>|%</code> expression.</p>\n\n<h4>Discussion</h4>\n\n<p>A core is a cell of <code>[battery payload]</code>, where the <code>battery</code> is code and the\n<code>payload</code> is data. The <code>battery</code> is one or more arms. An arm is a computation\nthat takes the core itself as its subject.</p>\n\n<p>The <code>|%</code> rune is used to construct a core from a series of arm definitions. Each\narm definition in the expression begins with an arm rune (<code>++</code>, <code>+$</code>, or <code>+*</code>).\nThese arms make up the <code>battery</code>. The subject of the <code>|%</code> expression is used to\nmake the core's <code>payload</code>.</p>\n\n<p>A core is like an \"object\" in a conventional language, but its attributes\n(<em>arms</em>) are functions on the core, not the core and an argument. A \"method\" on\na core is an arm that produces a gate.</p>\n\n<h4>Examples</h4>\n\n<p>A trivial core:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo =+  x=58\n         |%\n         ++  n  (add 42 x)\n         ++  g  |=  b=@\n                (add b n)\n         --</p>\n</blockquote>\n\n<blockquote>\n  <p>n.foo\n  100</p>\n</blockquote>\n\n<blockquote>\n  <p>(g.foo 1)\n  101\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|%"
        ]
    },
    {
        "doc": "<h2><code>|.</code> \"bardot\"</h2>\n\n<p>Produce a trap (a core with one arm <code>$</code>).</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;.  a<p>  </pre> |\n| Wide | <pre>  &verbar;.(a)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brdt p=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p>```hoon</p>\n\n<h2>|%  ++  $  a=hoon</h2>\n\n<p>```</p>\n\n<h4>Semantics</h4>\n\n<p>A <code>|.</code> expression produces a core with a single arm, <code>$</code>. The core isn't\nexplicitly given a sample. <code>a</code> is a Hoon expression that defines the computation\nof the <code>$</code> arm.</p>\n\n<p>The payload of the core is the subject of the <code>|.</code> expression.</p>\n\n<h4>Discussion</h4>\n\n<p>A trap is generally used to defer a computation.</p>\n\n<h4>Examples</h4>\n\n<p>A trivial trap:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |.(42)</p>\n</blockquote>\n\n<blockquote>\n  <p>$:foo\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo)\n  42\n  ```</p>\n</blockquote>\n\n<p>A more interesting trap:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo =/  reps  10\n         =/  step  0\n         =/  outp  0\n         |.\n         ?:  =(step reps)\n           outp\n         $(outp (add outp 2), step +(step))</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo)\n  20\n  ```</p>\n</blockquote>\n\n<p>Note that we can use <code>$()</code> to recurse back into the\ntrap, since it's a core with an <code>$</code> arm.</p>\n\n<blockquote>\n  <p><code>$(...)</code> expands to <code>%=($ ...)</code> (<a href=\"/reference/hoon/rune/cen#-centis\">\"centis\"</a>).</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|."
        ]
    },
    {
        "doc": "<h2><code>|^</code> \"barket\"</h2>\n\n<p>Produce a core whose battery includes a <code>$</code> arm and compute the latter.</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of <code>+</code>-family expressions.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;^  a=hoon<p>  ++  b=term  c=hoon<p>  ++  d=term  e=hoon<p>       ...<p>  ++  f=term  g=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brkt p=hoon q=(map term tome)]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=&gt;  |%\n    ++  $  a=hoon\n    ++  b=term  c=hoon\n    ++  d=term  e=hoon\n           ...\n    ++  f=term  g=hoon\n    --\n$\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>|^</code> expression produces a multi-arm core whose battery includes a <code>$</code> arm,\nwhich is evaluated immediately. <code>a</code> is a Hoon expression that defines the\nproduct of the <code>$</code> arm. <code>a</code> is followed by a series of arm definitions for the\nrest of the core battery arms. There must be at least one arm other than the <code>$</code>\narm.</p>\n\n<h4>Discussion</h4>\n\n<p>The <code>|^</code> rune is useful when you define a multi-arm core in your code and a\nparticular arm in it is to be evaluated immediately.</p>\n\n<h4>Examples</h4>\n\n<p>A trivial example:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>|^\n    (add n g)\n    ++  n  42\n    ++  g  58\n    --\n  100\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|^"
        ]
    },
    {
        "doc": "<h2><code>|-</code> \"barhep\"</h2>\n\n<p>Produce a trap (a core with one arm <code>$</code>) and evaluate it.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;-  a<p>  </pre> |\n| Wide | <pre>  &verbar;-(a)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brhp p=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=&lt;($ |.(a=hoon))\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>|-</code> expression produces a core with one arm named <code>$</code> and immediately\nevaluates <code>$</code>. <code>a</code> is a Hoon expression that determines what <code>$</code> evaluates to.</p>\n\n<h4>Discussion</h4>\n\n<p>The <code>|-</code> rune can be thought of as a 'recursion point' or a 'loop starting\npoint'. Since <code>|-</code> makes a <code>|.</code> (<a href=\"#-bardot\">\"bardot\"</a>, a core with one arm named\n<code>$</code>, we can recurse back into it with <code>$()</code>.</p>\n\n<blockquote>\n  <p><code>$(...)</code> expands to <code>%=($ ...)</code> (<a href=\"/reference/hoon/rune/cen#-centis\">\"centis\"</a>).</p>\n</blockquote>\n\n<h4>Examples</h4>\n\n<p>A trivial computation doesn't recurse:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>|-(42)\n  42\n  ```</p>\n</blockquote>\n\n<p>The classic loop is a decrement:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo =/  a  42\n         =/  b  0\n         |-\n         ?:  =(a +(b))\n           b\n         $(b +(b))</p>\n</blockquote>\n\n<blockquote>\n  <p>foo\n  41\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|-"
        ]
    },
    {
        "doc": "<h2><code>|~</code> \"barsig\"</h2>\n\n<p>Produce an iron gate.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;~  a<p>  b<p>  </pre> |\n| Wide | <pre>  &verbar;~(a b)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brsg p=spec q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n^|  |=(a b)\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>|~</code> expression produces an iron gate. <code>a</code> defines the sample, and <code>b</code> defines\nthe output value of the gate.</p>\n\n<h4>Discussion</h4>\n\n<p>See <a href=\"/reference/hoon/advanced\">this discussion of core variance models</a></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=&gt;  ~  ^+(|~(a=@ <em>@) |=(a=</em> *@))\n  &lt;1|usl {a/@ $~}&gt;\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|~"
        ]
    },
    {
        "doc": "<h2><code>|*</code> \"bartar\"</h2>\n\n<p>Produce a wet gate (one-armed core with sample).</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;*  a  b<p>  </pre> |\n| Wide | <pre>  &verbar;*(a b)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brtr p=spec q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p>```hoon\n=|  a\n|@\n++  $</p>\n\n<h2>  b</h2>\n\n<p>```</p>\n\n<h4>Semantics</h4>\n\n<p>A <code>|*</code> expression produces a wet gate. <code>a</code> defines the gate's sample, and <code>b</code> is\na Hoon expression that determines the output value of the gate.</p>\n\n<h4>Discussion</h4>\n\n<p>In a normal (dry) gate, your argument is converted into the\nsample type. In a generic (wet) gate, your argument type\npasses through the function, rather as if it were a macro (there\nis still only one copy of the code, however).</p>\n\n<p>Genericity is a powerful and dangerous tool. Use wet gates only if\nyou know what you're doing.</p>\n\n<p>Just as with a <a href=\"#-bartis\">gate</a>, we can recurse back into a wet gate\nwith <code>$()</code>.</p>\n\n<blockquote>\n  <p><code>$(...)</code> expands to <code>%=($ ...)</code> (<a href=\"/reference/hoon/rune/cen#-centis\">\"centis\"</a>).</p>\n</blockquote>\n\n<p><code>|*</code> can be used to make wet gates that produce structures, but this usage is\ndiscouraged in favor of <code>|$</code>.</p>\n\n<h4>Examples</h4>\n\n<p>Wet and dry gates in a nutshell:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |=([a=* b=*] [b a])</p>\n</blockquote>\n\n<blockquote>\n  <p>=bar |<em>([a=</em> b=*] [b a])</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo %cat %dog)\n  [6.778.724 7.627.107]</p>\n</blockquote>\n\n<blockquote>\n  <p>(bar %cat %dog)\n  [%dog %cat]\n  ```</p>\n</blockquote>\n\n<p>The dry gate does not preserve the type of <code>a</code> and <code>b</code>; the wet\ngate does.</p>\n\n<hr />\n",
        "keys": [
            "|*"
        ]
    },
    {
        "doc": "<h2><code>|=</code> \"bartis\"</h2>\n\n<p>Produce a gate (a one-armed core with a sample).</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;=  a<p>  b<p>  </pre> |\n| Wide | <pre>  &verbar;=(a b)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brts p=spec q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p>```hoon\n=+  ^~(*a=spec)</p>\n\n<h2>|%  ++  $  b=hoon</h2>\n\n<p>```</p>\n\n<h4>Definition</h4>\n\n<p>The product of a <code>|=</code> expression is a dry <strong>gate</strong>, i.e., a Hoon function.</p>\n\n<p><code>p</code> defines the gate sample type -- i.e., the input value type -- and usually\nincludes a sample name assignment (e.g., <code>a=@</code>). <code>q</code> is an expression that\ndetermines the output value of the gate.</p>\n\n<h4>Discussion</h4>\n\n<p>Dry gates are used for the vast majority of ordinary functions in Hoon.</p>\n\n<p>A gate is a core with one arm named <code>$</code>, so we can recurse back into it with <code>$()</code>.</p>\n\n<blockquote>\n  <p><code>$(...)</code> expands to <code>%=($ ...)</code> (<a href=\"/reference/hoon/rune/cen#-centis\">\"centis\"</a>).</p>\n</blockquote>\n\n<h4>Examples</h4>\n\n<p>A trivial gate:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |=(a=@ +(a))</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo 20)\n  21\n  ```</p>\n</blockquote>\n\n<p>A slightly less trivial gate:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |=  [a=@ b=@]\n         (add a b)</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo 30 400)\n  430\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|="
        ]
    },
    {
        "doc": "<h2><code>|@</code> \"barpat\"</h2>\n\n<p>Produce a 'wet' core <code>[battery payload]</code>.</p>\n\n<h4>Syntax</h4>\n\n<p>Arguments: a variable number of <code>+</code>-family expressions.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;@<p>  ++  a=term  b=hoon<p>  ++  c=term  d=hoon<p>       ...<p>  ++  e=term  f=hoon<p>  --<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<p>Note: The <code>++</code> rune may be replaced with any other rune in the <code>+</code> family.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brpt p=(unit term) q=(map term tome)]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>|@</code> expression produces a 'wet' core whose payload is the expression's\nsubject. The various arms in the battery are each named (<code>a</code>, <code>c</code>, and <code>e</code>\nabove) and defined explicitly with a Hoon expression (with <code>b</code>, <code>d</code>, and <code>f</code>\nabove).</p>\n\n<h4>Discussion</h4>\n\n<p>The <code>|@</code> rune is just like the <code>|%</code> rune except that instead of producing a\n'dry' core, it produces a 'wet' one. This allows for type polymorphism of its\narms, using 'genericity'. See <a href=\"/reference/hoon/advanced\">Advanced types</a>.</p>\n\n<hr />\n",
        "keys": [
            "|@"
        ]
    },
    {
        "doc": "<h2><code>|?</code> \"barwut\"</h2>\n\n<p>Produce a lead trap.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  &verbar;?  a<p>  </pre> |\n| Wide | <pre>  &verbar;?(a)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%brwt p=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n^?  |.  a\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>|?</code> expression produces a lead trap (i.e., a lead core with one arm named\n<code>$</code>). <code>a</code> is a Hoon expression that defines what the <code>$</code> arm does.</p>\n\n<h4>Discussion</h4>\n\n<p>See this <a href=\"/reference/hoon/advanced\">discussion of the core variance model</a>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=&gt;  ~  ^+  |?(%a)  |.(%a)\n  &lt;1?pqz $~&gt;</p>\n</blockquote>\n\n<blockquote>\n  <p>=&gt;  ~  ^+  |?(%a)  |.(%b)\n  nest-fail\n  ```</p>\n</blockquote>\n",
        "keys": [
            "|?"
        ]
    },
    {
        "doc": "<h2><code>$|</code> \"bucbar\"</h2>\n\n<p>Structure that satisfies a validator.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $&verbar;  p<p>  q<p>  </pre> |\n| Wide | <pre>  $&verbar;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcbr p=spec q=hoon]\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>$|</code> is used for validation of values at a finer level than that of types.\nRecall that a given value of <code>type</code> can be equivalently defined by more than one\n<code>spec</code>. For performance reasons, it may be beneficial to restrict oneself to\nvalues of a given type that adhere to an abstract syntax tree specified by some\nsubset of those <code>spec</code>s that may be used to define a given type.</p>\n\n<p><code>$|</code> takes two arguments: a structure <code>a</code> and a gate <code>b</code> that produces a <code>flag</code>\nthat is used to validate values produced by the mold generated by <code>a</code> at\nruntime. <code>$|(a b)</code> is a gate that takes in a noun <code>x</code> and first pins the product\nof clamming <code>a</code> with <code>x</code>, call this <code>foo</code>. Then it calls <code>b</code> on <code>foo</code>. It\nasserts that the product of <code>(b foo)</code> is <code>&amp;</code>, and then produces <code>foo</code>. This is\nequivalent to the following (which is not how <code>$|</code> is actually defined but has\nthe same behavior):</p>\n\n<p><code>hoon\n|=  x=*\n=/  foo  ;;(a x)\n?&gt;  (b foo)\nfoo\n</code></p>\n\n<p>For example, the elements of a <code>set</code> are treated as being unordered, but the\nvalues will necessarily possess an order by where they are in the memory. Thus\nif every <code>set</code> is stored using the same order scheme then faster algorithms\ninvolving <code>set</code>s may be written. Furthermore, if you just place elements in the\n<code>set</code> randomly, it may be mistreated by algorithms already in place that are\nexpecting a certain order. This is not the same thing as casting - it is forcing\na type to have a more specific set of values than its mold would suggest. This\nrune should rarely be used, but it is extremely important when it is.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo $|  (list @)\n         |=(a=(list) (lth (lent a) 4))\n  ```</p>\n</blockquote>\n\n<p>This creates a structure <code>foo</code> whose values are <code>list</code>s with length less than 4.</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(foo ~[1 2 3])\n  ~[1 2 3]</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo ~[1 2 3 4])\n  ford: %ride failed to execute:\n  ```</p>\n</blockquote>\n\n<p>The definition of <code>+set</code> in <code>hoon.hoon</code> is the following:</p>\n\n<p><code>hoon\n++  set\n  |$  [item]\n  $|  (tree item)\n  |=(a=(tree) ?:(=(~ a) &amp; ~(apt in a)))\n</code></p>\n\n<p>Here <a href=\"/reference/hoon/rune/bar#-barbuc\"><code>|$</code></a> is used to define a mold\nbuilder that takes in a mold (given the face <code>item</code>) and creates a structure\nconsisting of a <code>tree</code> of <code>item</code>s with <code>$|</code> that is validated with the gate\n<code>|=(a=(tree) ?:(=(~ a) &amp; ~(apt in a)))</code>. <code>in</code> is a door in <code>hoon.hoon</code> with\nfunctions for handling <code>set</code>s, and <code>apt</code> is an arm in that door that checks that\nthe values in the <code>tree</code> are arranged in the particular way that <code>set</code>s are\narranged in Hoon, namely 'ascending <code>+mug</code> hash order'.</p>\n\n<hr />\n",
        "keys": [
            "$|"
        ]
    },
    {
        "doc": "<h2><code>$_</code> \"buccab\"</h2>\n\n<p>Structure that normalizes to an example.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $_  p<p>  </pre> |\n| Wide | <pre>  $_(p)<p>  </pre> |\n| Irregular | <pre><p>    _p<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bccb p=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n|=(* p)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>$_</code> discards the sample it's supposedly normalizing and produces its\n<strong>example</strong> instead.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo $_([%foobaz %moobaz])</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo %foo %baz)\n  [%foobaz %moobaz]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>foo</code>[%foobaz %moobaz]\n  [%foobaz %moobaz]</p>\n</blockquote>\n\n<blockquote>\n  <p>$:foo\n  [%foobaz %moobaz]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$_"
        ]
    },
    {
        "doc": "<h2><code>$%</code> \"buccen\"</h2>\n\n<p>Structure which recognizes a union tagged by head atom.</p>\n\n<h4>Syntax</h4>\n\n<p>A variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $%  [%p1 ...]<p>      [%p2 ...]<p>      [%p3 ...]<p>      [%pn ...]<p>  ==<p>  </pre> |\n| Wide | <pre>  $%([%p1 ...] [%p2 ...] [%p3 ...] [%pn ...])<p>  </pre> |\n| Irregular | None. |</p>\n\n<p>Each item may be an atom or (more commonly) a cell. The atom or head of the cell\n<em>must</em> be a constant (<code>%foo</code>, <code>%1</code>, <code>%.y</code>, etc).</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bccn p=(list spec)]\n</code></p>\n\n<h4>Defaults to</h4>\n\n<p>The default of the last item <code>i</code> in <code>p</code>. Crashes if <code>p</code> is empty.</p>\n\n<h4>Discussion</h4>\n\n<p>A <code>$%</code> is a tagged union, a common data model.</p>\n\n<p>Make sure the last item in your <code>$%</code> terminates, or the default will\nbe an infinite loop! Alteratively, you can use <code>$~</code> to define a custom\ntype default value.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo $%([%foo p=@ud q=@ud] [%baz p=@ud])</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo [%foo 4 2])\n  [%foo p=4 q=2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo [%baz 37])\n  [%baz p=37]</p>\n</blockquote>\n\n<blockquote>\n  <p>$:foo\n  [%baz p=0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$%"
        ]
    },
    {
        "doc": "<h2><code>$:</code> \"buccol\"</h2>\n\n<p>Form a cell type.</p>\n\n<h4>Syntax</h4>\n\n<p>A variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $:  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  $:(p1 p2 p3 pn)<p>  </pre> |\n| Irregular (noun mode) | <pre>  ,[p1 p2 p3 pn]<p>  </pre> |\n| Irregular (structure mode) | <pre>    [p1 p2 p3 pn]<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bccl p=(list spec)]\n</code></p>\n\n<h4>Normalizes to</h4>\n\n<p>The tuple the length of <code>p</code>, normalizing each item.</p>\n\n<h4>Defaults to</h4>\n\n<p>The tuple the length of <code>p</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo $:(p=@ud q=@tas)</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo 33 %foo)\n  [p=33 q=%foo]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>foo</code>[33 %foo]\n  [p=33 q=%foo]</p>\n</blockquote>\n\n<blockquote>\n  <p>$:foo\n  [p=0 q=%$]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$:"
        ]
    },
    {
        "doc": "<h2><code>$&lt;</code> \"bucgal\"</h2>\n\n<p>Filters a pre-existing mold to obtain a mold that excludes a particular\nstructure.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $&lt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  $&lt;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcgl p=spec q=spec]\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>This can be used to obtain type(s) from a list of types <code>q</code> that do not satisfy a\nrequirement given by <code>p</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo $%([%bar p=@ud q=@ud] [%baz p=@ud])</p>\n</blockquote>\n\n<blockquote>\n  <p>=m $&lt;(%bar foo)</p>\n</blockquote>\n\n<blockquote>\n  <p>(m [%bar 2 4])\n  ford: %ride failed to execute:</p>\n</blockquote>\n\n<blockquote>\n  <p>(m [%baz 2])\n  [%baz p=2]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;($&lt;(%foo [@tas *]) [%foo 1])\n  ford: %ride failed to execute:</p>\n</blockquote>\n\n<blockquote>\n  <p>;;($&lt;(%foo [@tas *]) [%bar 1])\n  [%bar 1]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$<"
        ]
    },
    {
        "doc": "<h2><code>$&gt;</code> \"bucgar\"</h2>\n\n<p>Filters a mold to obtain a new mold matching a particular structure.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $&gt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  $&gt;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcgr p=spec q=spec]\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>This can be used to obtain type(s) from a list of types <code>q</code> that satisfy a\nrequirement given by <code>p</code>.</p>\n\n<h4>Examples</h4>\n\n<p>Examples with <code>$%</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo $%([%bar p=@ud q=@ud] [%baz p=@ud])</p>\n</blockquote>\n\n<blockquote>\n  <p>=m $&gt;(%bar foo)</p>\n</blockquote>\n\n<blockquote>\n  <p>(m [%bar 2 4])\n  [%bar p=2 q=4]</p>\n</blockquote>\n\n<blockquote>\n  <p>(m [%baz 2])\n  ford: %ride failed to execute:\n  ```</p>\n</blockquote>\n\n<p>Examples with <code>;;</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>;;([@tas *] [%foo 1])\n  [%foo 1]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;([@tas *] [%bar 1])\n  [%bar 1]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;($&gt;(%foo [@tas *]) [%foo 1])\n  [%foo 1]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;($&gt;(%foo [@tas *]) [%bar 1])\n  ford: %ride failed to execute:\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$>"
        ]
    },
    {
        "doc": "<h2><code>$-</code> \"buchep\"</h2>\n\n<p>Structure that normalizes to an example gate.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bchp p=spec q=spec]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n$_  ^|\n|=(p $:q)\n</code></p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $-  p<p>  q<p>  </pre> |\n| Wide | <pre>  $-(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<p><code>p</code> is the type the gate takes and <code>q</code> is the type the gate produces.</p>\n\n<h4>Discussion</h4>\n\n<p>Since a <code>$-</code> reduces to a <a href=\"#_-buccab\"><code>$_</code></a>, it is not useful for normalizing, just for typechecking. In particular, the existence of <code>$-</code>s does <strong>not</strong> let us send gates or other cores over the network!</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo $-(%foo %baz)</p>\n</blockquote>\n\n<blockquote>\n  <p>($:foo %foo)\n  %baz\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$-"
        ]
    },
    {
        "doc": "<h2><code>$^</code> \"bucket\"</h2>\n\n<p>Structure which normalizes a union tagged by head depth (cell).</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $^  p<p>  q<p>  </pre> |\n| Wide | <pre>  $^(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bckt p=spec q=spec]\n</code></p>\n\n<h4>Normalizes to</h4>\n\n<p>Default, if the sample is an atom; <code>p</code>, if the head of the sample\nis an atom; <code>q</code> otherwise.</p>\n\n<h4>Defaults to</h4>\n\n<p>The default of <code>p</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a $%([%foo p=@ud q=@ud] [%baz p=@ud])</p>\n</blockquote>\n\n<blockquote>\n  <p>=b $^([a a] a)</p>\n</blockquote>\n\n<blockquote>\n  <p>(b [[%baz 33] [%foo 19 22]])\n  [[%baz p=33] [%foo p=19 q=22]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(b [%foo 19 22])\n  [%foo p=19 q=22]</p>\n</blockquote>\n\n<blockquote>\n  <p>$:b\n  [%baz p=0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$^"
        ]
    },
    {
        "doc": "<h2><code>$+</code> \"buclus\"</h2>\n\n<p>Specify a shorthand type name for use in prettyprinting.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $+  p<p>  q<p>  </pre> |\n| Wide | <pre>  $+(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcls p=stud q=spec]\n</code></p>\n\n<!--\n#### Normalizes to\n\nDefault, if the sample is an atom; `p`, if the head of the sample\nis an atom; `q` otherwise.\n\n#### Defaults to\n\nThe default of `p`.\n-->\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=/  my-type  $+(my-alias [@ @])</p>\n</blockquote>\n\n<blockquote>\n  <p>-:!>(*my-type)</p>\n  \n  <h1>t/#my-alias</h1>\n</blockquote>\n\n<p>```</p>\n\n<hr />\n",
        "keys": [
            "$+"
        ]
    },
    {
        "doc": "<h2><code>$&amp;</code> \"bucpam\"</h2>\n\n<p>Repair a value of a tagged union type.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $&amp;  p<p>  q<p>  </pre> |\n| Wide | <pre>  $&amp;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<p><code>hoon\n$&amp;(combined-mold=spec normalizing-gate=hoon)\n</code></p>\n\n<p>Here <code>combined-mold</code> is a tagged union type (typically made with <code>$%</code>) and\n<code>normalizing-gate</code> is a gate which accepts values of <code>combined-mold</code> and\nnormalizes them to be of one particular type in <code>combined-mold</code>.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcpm p=spec q=hoon]\n</code></p>\n\n<h4>Normalizes to</h4>\n\n<p>The product of the normalizing gate and sample.</p>\n\n<h4>Defaults to</h4>\n\n<p>The default of the last type listed in <code>p</code>, normalized with the normalizing gate.</p>\n\n<h4>Discussion</h4>\n\n<p>This rune is used to \"upgrade\" or \"repair\" values of a structure, typically from\nan old version to a new version. For example, this may happen when migrating\nstate after updating an app.</p>\n\n<h4>Examples</h4>\n\n<p><code>hoon\n+$  old  [%0 @]\n+$  new  [%1 ^]\n+$  combined  $%(old new)\n+$  adapting  $&amp;(combined |=(?-(-.a %0 [%1 1 +.a], %1 a)))\n</code></p>\n\n<p>Here <code>adapting</code> is a structure that bunts to <code>[%1 ^]</code> but also normalizes from\n<code>[%0 @]</code> if called on such a noun.</p>\n\n<hr />\n",
        "keys": [
            "$&"
        ]
    },
    {
        "doc": "<h2><code>$~</code> \"bucsig\"</h2>\n\n<p>Define a custom type default value.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $~  p<p>  q<p>  </pre> |\n| Wide | <pre>  $~(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<p><code>p</code> defines the default value, and <code>q</code> defines everything else about the\nstructure.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcsg p=hoon q=spec]\n</code></p>\n\n<h4>Product</h4>\n\n<p>Creates a structure (custom type) just like <code>q</code>, except its default value is <code>p</code>.</p>\n\n<h4>Defaults to</h4>\n\n<p>The product of <code>p</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>You should make sure that the product type of <code>p</code> nests under <code>q</code>. You can check\nthe default value of some structure (custom type) <code>r</code> with <code>*r</code>. (See the <a href=\"/reference/hoon/rune/ket#-kettar\"><code>^*</code>\nrune</a>.)</p>\n\n<p>Do not confuse the <code>$~</code> rune with the constant type for null, <code>$~</code>. (The latter\nuses older Hoon syntax that is still accepted. Preferably it would be <code>%~</code>.)</p>\n\n<h4>Examples</h4>\n\n<p>First, let's define a type without using <code>$~</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=b $@(@tas $%([%two *] [%three *]))</p>\n</blockquote>\n\n<blockquote>\n  <p><code>b</code>%hello\n  %hello</p>\n</blockquote>\n\n<blockquote>\n  <p><code>b</code>[%two %hello]\n  [%two 478.560.413.032]</p>\n</blockquote>\n\n<blockquote>\n  <p>*b</p>\n</blockquote>\n\n<p>%$</p>\n\n<blockquote>\n  <p>*@tas\n  %$\n  ```</p>\n</blockquote>\n\n<p>Using <code>$~</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=c $~(%default-value $@(@tas $%([%two *] [%three *])))</p>\n</blockquote>\n\n<blockquote>\n  <p><code>c</code>%hello\n  %hello</p>\n</blockquote>\n\n<blockquote>\n  <p><code>c</code>[%two %hello]\n  [%two 478.560.413.032]</p>\n</blockquote>\n\n<blockquote>\n  <p>*c\n  %default-value\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$~"
        ]
    },
    {
        "doc": "<h2><code>$@</code> \"bucpat\"</h2>\n\n<p>Structure which normalizes a union tagged by head depth (atom).</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $@  p<p>  q<p>  </pre> |\n| Wide | <pre>  $@(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcpt p=spec q=spec]\n</code></p>\n\n<h4>Normalizes to</h4>\n\n<p><code>p</code>, if the sample is an atom; <code>q</code>, if the sample is a cell.</p>\n\n<h4>Defaults to</h4>\n\n<p>The default of <code>p</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A structure which applies <code>p</code> if its sample is an atom, <code>q</code> if its sample is a\ncell.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a $@(%foo $:(p=%baz q=@ud))</p>\n</blockquote>\n\n<blockquote>\n  <p>(a %foo)\n  %foo</p>\n</blockquote>\n\n<blockquote>\n  <p><code>a</code>[%baz 99]\n  [p=%baz q=99]</p>\n</blockquote>\n\n<blockquote>\n  <p>$:a\n  %foo\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$@"
        ]
    },
    {
        "doc": "<h2><code>$=</code> \"buctis\"</h2>\n\n<p>Structure which wraps a face around another structure.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $=  p<p>  q<p>  </pre> |\n| Wide | <pre>  $=(p q)<p>  </pre> |\n| Irregular | <pre><p>    p=q<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcts p=skin q=spec]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n|=  *\n^=(p %-(q +6))\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>Note that the Hoon compiler is at least slightly clever about\ncompiling structures, and almost never has to actually put in a gate\nlayer (as seen in the expansion above) to apply a <code>$=</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a $=(p %foo)</p>\n</blockquote>\n\n<blockquote>\n  <p>(a %foo)\n  p=%foo</p>\n</blockquote>\n\n<blockquote>\n  <p>(a %baz)\n  ford: %ride failed to execute:\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$="
        ]
    },
    {
        "doc": "<h2><code>$?</code> \"bucwut\"</h2>\n\n<p>Form a type from a union of other types.</p>\n\n<h4>Syntax</h4>\n\n<p>Variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  $?  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  $?(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre>    ?(p1 p2 p3 pn)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%bcwt p=(list spec)]\n</code></p>\n\n<h4>Normalizes to</h4>\n\n<p>The last item in <code>p</code> which normalizes the sample to itself.</p>\n\n<p>Void, if <code>p</code> is empty.</p>\n\n<h4>Defaults to</h4>\n\n<p>The last item in <code>p</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>For a union of atoms, a <code>$?</code> is fine. For more complex nouns, always try to use\na <a href=\"#-buccen\"><code>$%</code></a>, <a href=\"#-bucpat\"><code>$@</code></a> or <a href=\"#-bucket\"><code>$^</code></a>, at least if you expect\nyour structure to be used as a normalizer.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ?(%foo %baz %baz)</p>\n</blockquote>\n\n<blockquote>\n  <p>(a %baz)\n  %baz</p>\n</blockquote>\n\n<blockquote>\n  <p>(a [37 45])\n  ford: %ride failed to execute:</p>\n</blockquote>\n\n<blockquote>\n  <p>$:a\n  %baz\n  ```</p>\n</blockquote>\n",
        "keys": [
            "$?"
        ]
    },
    {
        "doc": "<h2><code>%_</code> \"cencab\"</h2>\n\n<p>Resolve a wing with changes, preserving type.</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of pairs.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  %_  a=wing<p>    b=wing  c=hoon<p>    d=wing  e=hoon<p>    f=wing  g=hoon<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  %_    a=wing<p>      b=wing<p>    c=hoon<p>  ::<p>      d=wing<p>    e=hoon<p>  ::<p>      f=wing<p>    g=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %_(a=wing b=wing c=hoon, d=wing e=hoon, ...)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cncb p=wing q=(list (pair wing hoon))]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n^+(a %=(a b c, d e, ...))\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>%_</code> expression resolves to the value of the subject at wing <code>a</code>, but modified\naccording to a series of changes: <code>b</code> is replaced with the product of <code>c</code>, <code>d</code>\nwith the product of <code>e</code>, and so on. At compile time a type check is performed to\nensure that the resulting value is of the same type as <code>a</code>.</p>\n\n<h4>Discussion</h4>\n\n<p><code>%_</code> is different from <code>%=</code> because <code>%=</code> can change the type of a wing with\nmutations. <code>%_</code> preserves the wing type.</p>\n\n<p>See <a href=\"/reference/hoon/limbs/\">how wings are resolved</a>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo [p=42 q=6]</p>\n</blockquote>\n\n<blockquote>\n  <p>foo(p %baz)\n  [p=%baz q=6]</p>\n</blockquote>\n\n<blockquote>\n  <p>foo(p [55 99])\n  [p=[55 99] q=6]</p>\n</blockquote>\n\n<blockquote>\n  <p>%_(foo p %baz)\n  [p=7.496.034 99]</p>\n</blockquote>\n\n<blockquote>\n  <p>%_(foo p [55 99])\n  ! nest-fail\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%_"
        ]
    },
    {
        "doc": "<h2><code>%:</code> \"cencol\"</h2>\n\n<p>Call a gate with many arguments.</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %:  a=hoon<p>    b=hoon<p>    c=hoon<p>     ...<p>    d=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %:(a b c d)<p>  </pre> |\n| Irregular | <pre>    (a b c d)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cncl p=hoon q=(list hoon)]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>%:</code> expression calls a gate with many arguments. <code>a</code> is the gate to be\ncalled, and <code>b</code> through <code>d</code> are the arguments. If there is only one\nsubexpression after <code>a</code>, its product is the sample. Otherwise, a single argument\nis constructed by evaluating all of <code>b</code> through <code>d</code> -- however many\nsubexpressions there are -- and putting the result in a cell: <code>[b c ... d]</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>When <code>%:</code> is used in tall-form syntax, the series of expressions after <code>p</code> must be terminated with <code>==</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>%:  add  22  33  ==\n  55</p>\n</blockquote>\n\n<blockquote>\n  <p>=adder |=  a=*\n           =+  c=0\n           |-\n           ?@  a  (add a c)\n           ?^  -.a  !!\n           $(c (add -.a c), a +.a)</p>\n</blockquote>\n\n<blockquote>\n  <p>%:  adder  22  33  44  ==\n  99</p>\n</blockquote>\n\n<blockquote>\n  <p>%:  adder  22  33  44  55  ==\n  154</p>\n</blockquote>\n\n<blockquote>\n  <p>%:(adder 22 33 44)\n  99</p>\n</blockquote>\n\n<blockquote>\n  <p>(adder 22 33 44)\n  99\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%:"
        ]
    },
    {
        "doc": "<h2><code>%.</code> \"cendot\"</h2>\n\n<p>Call a gate (function), inverted.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %.  a  b<p>  </pre> |\n| Wide | <pre>  %.(a b)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cndt p=hoon q=hoon]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>The <code>%.</code> rune is for evaluating the <code>$</code> arm of a gate, i.e., calling a function.\n<code>a</code> is for the desired sample value (i.e., input value), and <code>b</code> is the gate.</p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n%-(b=hoon a=hoon)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>%.</code> is just like <code>%-</code>, but with its subexpressions reversed; the argument comes\nfirst, and then the gate.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=add-triple |=([a=@ b=@ c=@] :(add a b c))</p>\n</blockquote>\n\n<blockquote>\n  <p>%.([1 2 3] add-triple)\n  6\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%."
        ]
    },
    {
        "doc": "<h2><code>%-</code> \"cenhep\" {% #-cenhep %}</h2>\n\n<p>Call a gate (function).</p>\n\n<h4>Syntax</h4>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %-  a<p>  b<p>  </pre> |\n| Wide | <pre>  %-(a b)<p>  </pre> |\n| Irregular | <pre>    (a b)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cnhp p=hoon q=hoon]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>This rune is for evaluating the <code>$</code> arm of a gate, i.e., calling a gate as a\nfunction. <code>a</code> is the gate, and <code>b</code> is the desired sample value (i.e., input\nvalue) for the gate.</p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n%~($ a b)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>%-</code> is used to call a function; <code>a</code> is the function\n(<a href=\"/reference/hoon/rune/bar#-bartis\"><code>gate</code></a>, <code>q</code> the argument. <code>%-</code> is a\nspecial case of <a href=\"#-censig\"><code>%~</code> (\"censig\")</a>, and a gate is a special case of a\n<a href=\"/reference/hoon/rune/bar#_-barcab\">door</a>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=add-triple |=([a=@ b=@ c=@] :(add a b c))</p>\n</blockquote>\n\n<blockquote>\n  <p>(add-triple 1 2 3)\n  6</p>\n</blockquote>\n\n<blockquote>\n  <p>%-(add-triple [1 2 3])\n  6\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%-"
        ]
    },
    {
        "doc": "<h2><code>%^</code> \"cenket\"</h2>\n\n<p>Call gate with triple sample.</p>\n\n<h4>Syntax</h4>\n\n<p>Four arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %^    a<p>      b<p>    c<p>  d<p>  </pre> |\n| Wide | <pre>  %^(a b c d)<p>  </pre> |\n| Irregular | <pre>    (a b c d)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cnkt p=hoon q=hoon r=hoon s=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n%-(a=hoon [b=hoon c=hoon d=hoon])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=add-triple |=([a=@ b=@ c=@] :(add a b c))</p>\n</blockquote>\n\n<blockquote>\n  <p>%^(add-triple 1 2 3)\n  6\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%^"
        ]
    },
    {
        "doc": "<h2><code>%+</code> \"cenlus\"</h2>\n\n<p>Call gate with a cell sample.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %+  a<p>    b<p>  c<p>  </pre> |\n| Wide | <pre>  %+(a b c)<p>  </pre> |\n| Irregular | <pre>    (a b c)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cnls p=hoon q=hoon r=hoon]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>%+</code> expression is for calling a gate with a cell sample. <code>a</code> is the gate to\nbe called, <code>b</code> is for the head of the sample, and <code>c</code> is for the sample tail.</p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n%-(a=hoon [b=hoon c=hoon])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=add-triple |=([a=@ b=@ c=@] :(add a b c))</p>\n</blockquote>\n\n<blockquote>\n  <p>%+(add-triple 1 [2 3])\n  6\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%+"
        ]
    },
    {
        "doc": "<h2><code>%~</code> \"censig\"</h2>\n\n<p>Evaluate an arm in a door.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  %~  p=wing  q=hoon<p>  r=hoon<p>  </pre> |\n| Wide | <pre>  %~(p q r)<p>  </pre> |\n| Irregular | <pre><p>    ~(p q r1 r2 rn)<p>  </pre> |</p>\n\n<p>In the irregular form, <code>r</code> may be split into multiple parts. Multiple parts of\n<code>r</code> will be formed into a cell.</p>\n\n<h4>Semantics</h4>\n\n<p>A <code>%~</code> expression evaluates the arm of a door (i.e., a core with a sample). <code>p</code>\nis a wing that resolves to the arm from within the door in question. <code>q</code> is the\ndoor itself. <code>r</code> is the sample of the door.</p>\n\n<h4>Discussion</h4>\n\n<p><code>%~</code> is the general case of a function call, <code>%-</code>. In both, we replace the sample (<code>+6</code>) of a core. In <code>%-</code> the core is a gate and the <code>$</code> arm is evaluated. In <code>%~</code> the core is a door and any arm may be evaluated. You must identify the arm to be run: <code>%~(arm door arg)</code>.</p>\n\n<p>Note also that <code>p</code> is a wing and can therefore be <code>.</code>, as in <code>~(. door\nsample)</code>. This little idiom lets you load your sample into the door once\ninstead of over and over.</p>\n\n<p>See also <a href=\"/reference/hoon/rune/bar#_-barcab\"><code>|_</code></a>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=mycore |_  a=@\n            ++  plus-two  (add 2 a)\n            ++  double  (mul 2 a)\n            ++  mul-by\n              |=  b=@\n              (mul a b)\n            --</p>\n</blockquote>\n\n<blockquote>\n  <p>~(plus-two mycore 10)\n  12</p>\n</blockquote>\n\n<blockquote>\n  <p>~(double mycore 10)\n  20</p>\n</blockquote>\n\n<blockquote>\n  <p>=tencore ~(. mycore 10)\n   (mul-by:tencore 5)\n  50\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%~"
        ]
    },
    {
        "doc": "<h2><code>%*</code> \"centar\"</h2>\n\n<p>Evaluate an expression, then resolve a wing with changes.</p>\n\n<h4>Syntax</h4>\n\n<p>Two fixed arguments, then a variable number of pairs.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  %*  a=wing  b=hoon<p>    c=wing  d=hoon<p>    e=wing  f=hoon<p>         ...<p>    g=wing  h=hoon<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  %*    a=wing  b=hoon<p>      c=wing<p>    d=hoon<p>  ::<p>      e=wing<p>    f=hoon<p>  ::<p>      g=wing<p>    h=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %*(a b c d, e f, g h)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cntr p=wing q=hoon r=(list (pair wing hoon))]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>%*</code> expression evaluates some arbitrary Hoon expression, <code>b</code>, and then\nresolves a wing of that result, with changes. <code>a</code> is the wing to be resolved,\nand one or more changes is defined by the subexpressions after <code>b</code>.</p>\n\n<h4>Expands to</h4>\n\n<p>```hoon\n=+  b=hoon\n%=  a=wing\n  c=wing  d=hoon\n  e=wing  f=hoon\n       ...</p>\n\n<h1>  g=wing  h=hoon</h1>\n\n<p>```</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>%*($ add a 2, b 3)\n  5</p>\n</blockquote>\n\n<blockquote>\n  <p>%*(b [a=[12 14] b=[c=12 d=44]] c 11)\n  [c=11 d=44]</p>\n</blockquote>\n\n<blockquote>\n  <p>%*(b [a=[12 14] b=[c=12 d=44]] c 11, d 33)\n  [c=11 d=33]</p>\n</blockquote>\n\n<blockquote>\n  <p>=foo [a=1 b=2 c=3 d=4]</p>\n</blockquote>\n\n<blockquote>\n  <p>%*(+ foo c %hello, d %world)\n  [b=2 c=%hello d=%world]</p>\n</blockquote>\n\n<blockquote>\n  <p>=+(foo=[a=1 b=2 c=3] foo(b 7, c 10))\n  [a=1 b=7 c=10]</p>\n</blockquote>\n\n<blockquote>\n  <p>%*(foo [foo=[a=1 b=2 c=3]] b 7, c 10)\n  [a=1 b=7 c=10]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "%*"
        ]
    },
    {
        "doc": "<h2><code>%=</code> \"centis\"</h2>\n\n<p>Resolve a wing with changes.</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of pairs.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  %=  a=wing<p>    b=wing  c=hoon<p>    d=wing  e=hoon<p>         ...<p>    f=wing  g=hoon<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  %=    a=wing<p>      b=wing<p>    c=hoon<p>  ::<p>      d=wing<p>    e=hoon<p>  ::<p>      f=wing<p>    g=hoon<p>  ==<p>  </pre> |\n| Wide | <pre>  %=(a b c, d e, f g)<p>  </pre> |\n| Irregular | <pre><p>    a(b c, d e, f g)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cnts p=wing q=(list (pair wing hoon))]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>%=</code> expression resolves a wing of the subject, but with changes made.</p>\n\n<p>If <code>a</code> resolves to a leg, a series of changes are made to wings of that leg\n(<code>b</code>, <code>d</code>, and <code>f</code> above are replaced with the respective products of <code>c</code>, <code>e</code>,\nand <code>g</code> above). The modified leg is returned.</p>\n\n<p>If <code>a</code> resolves to an arm, a series of changes are made to wings of the parent\ncore of that arm. (Again, <code>b</code>, <code>d</code>, and <code>f</code> are replaced with the respective\nproducts of <code>c</code>, <code>e</code>, and <code>g</code>.) The arm is computed with the modified core as\nthe subject, and the product is returned.</p>\n\n<h4>Discussion</h4>\n\n<p>Note that <code>a</code> is a wing, not just any expression. Knowing that a function call\n<code>(foo baz)</code> involves evaluating <code>foo</code>, replacing its sample at slot <code>+6</code> with\n<code>baz</code>, and then resolving to the <code>$</code> limb, you might think <code>(foo baz)</code> would\nmean <code>%=(foo +6 baz)</code>.</p>\n\n<p>But it's actually <code>=+(foo =&gt;(%=(+2 +6 baz:+3) $))</code>. Even if <code>foo</code> is a wing, we\nwould just be mutating <code>+6</code> within the core that defines the <code>foo</code> arm. Instead\nwe want to modify the <strong>product</strong> of <code>foo</code>\u2014the gate\u2014so we have to pin it\ninto the subject.</p>\n\n<p>Here's that again in tall form:</p>\n\n<p><code>hoon\n=+  foo\n=&gt;  %=  +2\n      +6  baz:+3\n    ==\n  $\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo [p=5 q=6]</p>\n</blockquote>\n\n<blockquote>\n  <p>foo(p 42)\n  [p=42 q=6]</p>\n</blockquote>\n\n<blockquote>\n  <p>foo(+3 99)\n  [p=5 99]\n  ```</p>\n</blockquote>\n",
        "keys": [
            "%="
        ]
    },
    {
        "doc": "<h2><code>:-</code> \"colhep\"</h2>\n\n<p>Construct a cell (2-tuple).</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :-  p<p>  q<p>  </pre> |\n| Wide | <pre>  :-(p q)<p>  </pre> |\n| Irregular #1 | <pre>  [p q]<p>  </pre> |\n| Irregular #2 | <pre><p>    p^q<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%clhp p=hoon q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The cell of <code>p</code> and <code>q</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>Hoon expressions actually use the same \"autocons\" pattern as Nock\nformulas. If you're assembling expressions (which usually only the\ncompiler does), <code>[a b]</code> is the same as <code>:-(a b)</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>:-(1 2)\n  [1 2]</p>\n</blockquote>\n\n<p>~zod:dojo> 1^2\n[1 2]\n```</p>\n\n<hr />\n",
        "keys": [
            ":-"
        ]
    },
    {
        "doc": "<h2><code>:_</code> \"colcab\"</h2>\n\n<p>Construct a cell, inverted.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :_  p<p>  q<p>  </pre> |\n| Wide | <pre>  :_(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%clcb p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n:-(q p)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>:_(1 2)\n  [2 1]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ":_"
        ]
    },
    {
        "doc": "<h2><code>:+</code> \"collus\"</h2>\n\n<p>Construct a triple (3-tuple).</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :+  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  :+(p q r)<p>  </pre> |\n| Irregular | <pre>    [p q r]<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%clls p=hoon q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to:</h4>\n\n<p><code>hoon\n:-(p :-(q r))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>:+  1\n      2\n    3\n  [1 2 3]</p>\n</blockquote>\n\n<blockquote>\n  <p>:+(%a ~ 'b')\n  [%a ~ 'b']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ":+"
        ]
    },
    {
        "doc": "<h2><code>:^</code> \"colket\"</h2>\n\n<p>Construct a quadruple (4-tuple).</p>\n\n<h4>Syntax</h4>\n\n<p>Four arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :^    p<p>      q<p>    r<p>  s<p>  </pre> |\n| Wide | <pre>  :^(p q r s)<p>  </pre> |\n| Irregular | <pre>    [p q r s]<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%clkt p=hoon q=hoon r=hoon s=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n:-(p :-(q :-(r s)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>:^(1 2 3 4)\n  [1 2 3 4]</p>\n</blockquote>\n\n<blockquote>\n  <p>:^    5\n        6\n      7\n    8\n  [5 6 7 8]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ":^"
        ]
    },
    {
        "doc": "<h2><code>:*</code> \"coltar\"</h2>\n\n<p>Construct an n-tuple.</p>\n\n<h4>Syntax</h4>\n\n<p>Variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :*  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  :*(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre><p>    [p1 p2 p3 pn]<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%cltr p=(list hoon)]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><strong>Pseudocode</strong>: <code>a</code>, <code>b</code>, <code>c</code>, ... as elements of <code>p</code>:</p>\n\n<p><code>hoon\n:-(a :-(b :-(c :-(... z)))))\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n|-\n?~  p\n  !!\n?~  t.p\n  i.p\n:-  i.p\n$(p t.p)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>:*(5 3 4 1 4 9 0 ~ 'a')\n  [5 3 4 1 4 9 0 ~ 'a']</p>\n</blockquote>\n\n<blockquote>\n  <p>[5 3 4 1 4 9 0 ~ 'a']\n  [5 3 4 1 4 9 0 ~ 'a']</p>\n</blockquote>\n\n<blockquote>\n  <p>:*  5\n        3\n        4\n        1\n        4\n        9\n        0\n        ~\n        'a'\n    ==\n  [5 3 4 1 4 9 0 ~ 'a']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ":*"
        ]
    },
    {
        "doc": "<h2><code>:~</code> \"colsig\"</h2>\n\n<p>Construct a null-terminated list.</p>\n\n<h4>Syntax</h4>\n\n<p>Variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  :~  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  :~(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre><p>    ~[p1 p2 p3 pn]<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%clsg p=(list hoon)]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><strong>Pseudocode</strong>: <code>a</code>, <code>b</code>, <code>c</code>, ... as elements of <code>p</code>:</p>\n\n<p><code>hoon\n:-(a :-(b :-(c :-(... :-(z ~)))))\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n|-\n?~  p\n  ~\n:-  i.p\n$(p t.p)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>Note that this does not produce a <code>list</code> type, it just produces a\nnull-terminated n-tuple. To make it a proper <code>list</code> it must be cast or molded.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>:~(5 3 4 2 1)\n  [5 3 4 2 1 ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>~[5 3 4 2 1]\n  [5 3 4 2 1 ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>:~  5\n        3\n        4\n        2\n        1\n    ==\n  [5 3 4 2 1 ~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ":~"
        ]
    },
    {
        "doc": "<h2><code>::</code> \"colcol\"</h2>\n\n<p>Code comment.</p>\n\n<h4>Syntax</h4>\n\n<p><code>hoon\n::  any text you like!\n</code></p>\n\n<h4>Examples</h4>\n\n<p><code>hoon\n::\n::  this is commented code\n::\n|=  a=@         ::  a gate\n(add 2 a)       ::  that adds 2\n                ::  to the input\n</code></p>\n",
        "keys": [
            "::"
        ]
    },
    {
        "doc": "<h2><code>.^</code> \"dotket\"</h2>\n\n<p>Load from the Arvo namespace (scry) with a fake Nock instruction: Nock 12.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, with the second optionally split into an arbitrary number of\nelements.</p>\n\n<p>While this rune technically takes a fixed number of arguments, <code>q</code> is usually\nsplit into at least two parts, and the tall form of this rune must be terminated\nwith a <code>==</code>. Note also that the <code>==</code> does not make the arguments into a list as\nyou might expect, so <code>q</code> must be explicitly null-terminated if its elements are\nspecified separately.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .^  p<p>    q1<p>    q2<p>    q3<p>    qn<p>  ==<p>  </pre> |\n| Wide | <pre>  .^(p q1 q2)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%dtkt p=spec q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The noun <code>q</code>, cast to the type <code>p</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>Nock has no <code>12</code> instruction! But the virtual Nock\nused to run userspace code does. Nock <code>12</code> loads from a\ntyped immutable namespace defined by its virtual context.</p>\n\n<p>Ordinarily a Hoon expression has access to no information but whatever can be found in the subject. The one exception is with the <code>.^</code> rune. It essentially allows you to request information from one of the Arvo vanes (modules).</p>\n\n<p><code>.^</code> checks that the type of the value retrieved from Arvo nests under <code>p</code>. <code>q</code> is a <code>path</code> which includes information about which vane is being queried, and what sort of information is requested.</p>\n\n<p>In principle <code>.^</code> takes two subexpressions, but in practice <code>q</code> is often given in two parts: the first part includes the vane to be queried (e.g., <code>%a</code> for Ames, <code>%b</code> for Behn, <code>%c</code> for Clay, etc.) and the kind of request. The second part is a path that corresponds to the kind of request.</p>\n\n<h4>Examples</h4>\n\n<p>In the dojo we can ask Clay -- the Arvo filesystem -- for a listing of the files at our current path, <code>%</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>.^(arch %cy %)\n  [ fil=~\n      dir\n    { [p=~.app q=~]\n      [p=~.sur q=~]\n      [p=~.gen q=~]\n      [p=~.lib q=~]\n      [p=~.mar q=~]\n      [p=~.ted q=~]\n      [p=~.desk q=~]\n      [p=~.sys q=~]\n    }\n  ]\n  ```</p>\n</blockquote>\n\n<p>The <code>%c</code> is for Clay, and the <code>y</code> is for the request type. <code>arch</code> is the type of the listing. See <code>gen/cat.hoon</code> to see how this information is printed more prettily.</p>\n\n<p>The <code>%</code> is for the current path in the dojo:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>path</code>%\n  /~zod/base/~2018.9.20..23.05.35..0231\n  ```</p>\n</blockquote>\n\n<p>You can modify the time of the file listing quite simply and ask for a listing from 5 hours ago. (Remember that Clay is a revision-controlled file system.)</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>.^(arch %cy /(scot %p our)/base/(scot %da (sub now ~h5)))\n  [ fil=~\n      dir\n    { [p=~.app q=~]\n      [p=~.sur q=~]\n      [p=~.gen q=~]\n      [p=~.lib q=~]\n      [p=~.mar q=~]\n      [p=~.ted q=~]\n      [p=~.desk q=~]\n      [p=~.sys q=~]\n    }\n  ]\n  ```</p>\n</blockquote>\n\n<p><code>our</code> is the value for your ship's name.</p>\n\n<hr />\n",
        "keys": [
            ".^"
        ]
    },
    {
        "doc": "<h2><code>.+</code> \"dotlus\"</h2>\n\n<p>Increment an atom with Nock <code>4</code>.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .+  p<p>  </pre> |\n| Wide | <pre>  .+(p)<p>  </pre> |\n| Irregular | <pre>    +(p)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%dtls p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>p</code> plus <code>1</code> if <code>p</code> is an atom; otherwise, crashes. The product atom has no aura.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>.+(6)\n  7</p>\n</blockquote>\n\n<blockquote>\n  <p>+(6)\n  7</p>\n</blockquote>\n\n<blockquote>\n  <p>+(%foo)\n  7.303.015</p>\n</blockquote>\n\n<blockquote>\n  <p>+([1 2])\n  nest-fail\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ".+"
        ]
    },
    {
        "doc": "<h2><code>.*</code> \"dottar\"</h2>\n\n<p>Evaluate with Nock <code>2</code>.</p>\n\n<h4>Produces</h4>\n\n<p>Nock of formula <code>q</code> and subject <code>p</code>, with type <code>%noun</code>.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .*  p<p>  q<p>  </pre> |\n| Wide | <pre>  .*(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%dttr p=hoon q=hoon]\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>.*(p q)</code> is used to run Nock formula <code>q</code> on the subject <code>p</code> from within Hoon.</p>\n\n<p>Keep in mind that <code>p</code> and <code>q</code> can be arbitrary Hoon expressions, as long as they evaluate to the appropriate nouns for Nock evaluation.</p>\n\n<p>Note also that <code>.*</code> (\"dottar\") can be used to bypass the type system. It's\ntherefore possible to use Hoon as a typeless language.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>.*([20 30] [0 2])\n  20</p>\n</blockquote>\n\n<blockquote>\n  <p>.*(33 [4 0 1])\n  34</p>\n</blockquote>\n\n<blockquote>\n  <p>.*(|.(50) [9 2 0 1])\n  50</p>\n</blockquote>\n\n<blockquote>\n  <p>.*(12 [7 [<code>1 [4</code>1]] [<code>2</code>3 `2]])\n  [12 13 12]</p>\n</blockquote>\n\n<blockquote>\n  <p>.*(~ [5 1^4 [4 1^3]])\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>.*(~ [5 1^5 [4 1^3]])\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ".*"
        ]
    },
    {
        "doc": "<h2><code>.=</code> \"dottis\"</h2>\n\n<p>Test for equality with Nock <code>5</code>.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .=  p<p>  q<p>  </pre> |\n| Wide | <pre>  .=(p q)<p>  </pre> |\n| Irregular | <pre>    =(p q)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%dtts p=hoon q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>%.y</code> if <code>p</code> equals <code>q</code>; otherwise <code>%.n</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>Like Nock equality, <code>.=</code> (\"dottis\") tests whether two nouns are the same,\nignoring invisible pointer structure. Because in a conventional noun\nimplementation each noun has a lazy short hash, comparisons are fast unless the\nhash needs to be computed, or we are comparing separate copies of identical\nnouns. (Comparing large duplicates is a common cause of performance bugs.)</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>.=(0 0)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>=(0 0)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>.=(1 2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>=(1 2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>=(12 [12 14])\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ".="
        ]
    },
    {
        "doc": "<h2><code>.?</code> \"dotwut\"</h2>\n\n<p>Test for cell or atom with Nock <code>3</code>.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  .?  p<p>  </pre> |\n| Wide | <pre>  .?(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%dtwt p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>%.y</code> if <code>p</code> is a cell; otherwise <code>%.n</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>.?(42)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>.?([42 43])\n  %.y\n  ```</p>\n</blockquote>\n",
        "keys": [
            ".?"
        ]
    },
    {
        "doc": "<h2><code>/-</code> \"fashep\"</h2>\n\n<p>Import structure libraries from <code>/sur</code>.</p>\n\n<h4>Syntax</h4>\n\n<p><code>hoon\n/-  foo, bar, baz\n</code></p>\n\n<p>Note there is only a single space between each item.</p>\n\n<h4>Semantics</h4>\n\n<p>Names correspond to files in the <code>/sur</code> directory of the same desk as this file, e.g.\n<code>/sur/foo.hoon</code> for <code>foo</code>. Names containing hyphens, e.g. <code>foo-abc</code>, will first\nresolve to <code>/sur/foo-abc.hoon</code>, and if that doesn't exist, it will try\n<code>/sur/foo/abc.hoon</code>.</p>\n\n<p>Imports may be given a different face by doing <code>xyz=foo</code>. Imports may have their\nface stripped (so you can directly reference their wings) with <code>*foo</code>.</p>\n\n<hr />\n",
        "keys": [
            "/-"
        ]
    },
    {
        "doc": "<h2><code>/+</code> \"faslus\"</h2>\n\n<p>Import libraries from <code>/lib</code>.</p>\n\n<h4>Syntax</h4>\n\n<p><code>hoon\n/+  foo, bar, baz\n</code></p>\n\n<p>Note there is only a single space between each item.</p>\n\n<h4>Semantics</h4>\n\n<p>Names correspond to files in the <code>/lib</code> directory of the same desk as this file,\ne.g. <code>/lib/foo.hoon</code> for <code>foo</code>. Names containing hyphens, e.g. <code>foo-abc</code>, will\nfirst resolve to <code>/lib/foo-abc.hoon</code>, and if that doesn't exist, it will try\n<code>/lib/foo/abc.hoon</code>.</p>\n\n<p>Imports may be given a different face by doing <code>xyz=foo</code>. Imports may have their\nface stripped (so you can directly reference their wings) with <code>*foo</code>.</p>\n\n<hr />\n",
        "keys": [
            "/+"
        ]
    },
    {
        "doc": "<h2><code>/=</code> \"fastis\"</h2>\n\n<p>Build and import a hoon file at the specified path.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments.</p>\n\n<p><code>hoon\n/=  some-face  /path/to/file\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>This lets you build and import a hoon file from anywhere in the desk.</p>\n\n<p>The first argument is the face to pin it as. The second argument is the path to\nthe file in the same desk as this file. The file must be a <code>%hoon</code> file, and the\ntrailing mark (<code>hoon</code>) must be omitted from the path.</p>\n\n<h4>Examples</h4>\n\n<p>To build and import <code>/foo/bar.hoon</code> you would do:</p>\n\n<p><code>hoon\n/=  foobar  /foo/bar\n</code></p>\n\n<hr />\n",
        "keys": [
            "/="
        ]
    },
    {
        "doc": "<h2><code>/*</code> \"fastar\"</h2>\n\n<p>Import the file at the specified path as the specified mark.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments.</p>\n\n<p><code>hoon\n/*  some-face  %as-mark  /path/to/file\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>The first argument is the face to pin it as. The second argument is the mark it\nshould be converted to. The third argument is the path to the file in the same\ndesk as this file, with the trailing mark included.</p>\n\n<p>The mark specified may be different to the mark of the file, as long as\nconversion is possible. Note that a <code>%hoon</code> file will not be built like with\n<code>/=</code>: the type of a <code>%hoon</code> file is a <code>@t</code> so that is what will be pinned.</p>\n\n<h4>Examples</h4>\n\n<p>To import <code>/foo/bar.hoon</code> you would do:</p>\n\n<p><code>hoon\n/*  foobar  %hoon  /foo/bar/hoon\n</code></p>\n\n<p><code>foobar</code> would then be an <code>@t</code> of the contents of that file.</p>\n\n<hr />\n",
        "keys": [
            "/*"
        ]
    },
    {
        "doc": "<h2><code>/$</code> \"fasbuc\"</h2>\n\n<p>Import mark conversion gate.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments.</p>\n\n<p><code>hoon\n/$  some-face   %from-mark   %to-mark\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>The first argument is the face to pin it as. The second argument is the mark to\nconvert <em>from</em>. The third argument is the mark to convert <em>to</em>.</p>\n\n<p>The result will be a gate of <code>$-(type-1 type-2)</code>, pinned with the specified\nface. The types are the data types of the <em>from</em> mark and <em>to</em> mark,\nrespectively.</p>\n\n<p>The mark conversion gate will be built from marks in <code>/mar</code> on the same desk as\nthis file.</p>\n\n<h4>Examples</h4>\n\n<p>To build a mark conversion gate from <code>%txt</code> to <code>%mime</code>, you would do:</p>\n\n<p><code>hoon\n/$  txt-to-mime  %txt  %mime\n</code></p>\n\n<p><code>txt-to-mime</code> would be a gate of <code>$-(wain mime)</code>. You could then call the gate\nlike:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(txt-to-mime ~['first line' 'second line'])\n  [p=/text/plain q=[p=22 q=37.949.953.370.267.411.298.483.129.707.945.775.026.849.432.323.909.990]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "/$"
        ]
    },
    {
        "doc": "<h2><code>/~</code> \"fassig\"</h2>\n\n<p>Import, build, evaluate and pin the results of many hoon files in a directory.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments.</p>\n\n<p><code>hoon\n/~  some-face  some-type  /some/directory\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>The first argument is the face to pin the results with. The second argument is\nthe type each hoon file produces when evaluated. The third argument is the path\nto a directory in the same desk as this file, containing <code>%hoon</code> files.</p>\n\n<p>Each hoon file in the specified directory will be built and evalutated. The\nresult of evaluating each file will be added to a\n<a href=\"/reference/hoon/stdlib/2o#map\"><code>++map</code></a> and pinned with the specified face\n(<code>some-face</code>). The keys of the map will be the name of each file, and the values\nof the map will be the result of evaluating each file and casting its result to\nthe type specified (<code>some-type</code>).</p>\n\n<p>All of the hoon files in the specified directory, when evaluated, must produce\ndata of a type that nests under the type specified (<code>some-type</code>). File with a\nmark other than <code>%hoon</code> will be ignored.</p>\n\n<p>The type of the map will be <code>(map knot some-type)</code>.</p>\n\n<h4>Examples</h4>\n\n<p>If the <code>/foo/bar</code> directory contains three files:</p>\n\n<ul>\n<li><code>x.hoon</code> containing <code>(silt ~[1 2 3 4 5])</code></li>\n<li><code>y.hoon</code> containing <code>(silt ~[99 100])</code></li>\n<li><code>z.hoon</code> containing <code>(silt ~[22 33 44])</code></li>\n</ul>\n\n<p>Then the following <code>/~</code> expression:</p>\n\n<p><code>hoon\n/~  foo  (set @ud)  /foo/bar\n</code></p>\n\n<p>...will pin a <code>(map knot (set @ud))</code> with a face of <code>foo</code> which contains:</p>\n\n<p><code>\n{[p=~.y q={100 99}] [p=~.z q={22 33 44}] [p=~.x q={5 1 2 3 4}]}\n</code></p>\n\n<hr />\n",
        "keys": [
            "/~"
        ]
    },
    {
        "doc": "<h2><code>/%</code> \"fascen\"</h2>\n\n<p>Build and import a mark core.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments.</p>\n\n<p><code>hoon\n/%  some-face  %some-mark\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>The first argument is a face to pin the mark core with. The second argument is a\nmark.</p>\n\n<p>The static mark core (a <code>nave:clay</code>) for the specified mark (which resides in\nthe same desk as the file) is built and pinned to the subject with the specified\nface.</p>\n\n<h4>Examples</h4>\n\n<p>To build the mark core for the <code>%txt</code> mark:</p>\n\n<p><code>hoon\n/%  foo  %txt\n</code></p>\n\n<p>Its arms can then be accessed like:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>form:foo\n  %txt-diff\n  ```</p>\n</blockquote>\n",
        "keys": [
            "/%"
        ]
    },
    {
        "doc": "<h2><code>^|</code> \"ketbar\"</h2>\n\n<p>Convert a gold core to an iron core (contravariant).</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^&verbar;  p<p>  </pre> |\n| Wide | <pre>  ^&verbar;(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktbr p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>p</code> as an iron core; crash if not a gold core.</p>\n\n<h4>Discussion</h4>\n\n<p>An iron core is an opaque function (gate or door).</p>\n\n<p>Theorem: if type <code>x</code> nests within type <code>a</code>, and type <code>y</code> nests\nwithin type <code>b</code>, a core accepting <code>b</code> and producing <code>x</code> nests\nwithin a iron core accepting <code>y</code> and producing <code>a</code>.</p>\n\n<p>Informally, a function fits an interface if the function has a\nmore specific result and/or a less specific argument than the\ninterface.</p>\n\n<h4>Examples</h4>\n\n<p>The prettyprinter shows the core metal (<code>.</code> gold, <code>|</code> iron):</p>\n\n<p>```\n~zod:dojo> |=(@ 1)\n&lt;1.gcq [@  @n &lt;250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]&gt;</p>\n\n<p>~zod:dojo> ^|(|=(@ 1))\n&lt;1|gcq [@  @n &lt;250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]&gt;\n```</p>\n\n<hr />\n",
        "keys": [
            "^|"
        ]
    },
    {
        "doc": "<h2><code>^:</code> \"ketcol\"</h2>\n\n<p>Switch parser into structure mode (mold definition) and produce a gate for type <code>p</code>.  (See <a href=\"\"><code>,</code> com</a> which toggles modes.)</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^:  p<p>  </pre> |\n| Wide | <pre>  ^:(p)<p>  </pre> |\n| Irregular | <pre>  ,p<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktcl p=spec]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>A gate that returns the sample value if it is of the correct type, but crashes\notherwise.</p>\n\n<h4>Discussion</h4>\n\n<p><code>^:</code> is used to produce a mold that crashes if its sample is of the wrong type.</p>\n\n<p>In structure mode, <code>[a=@ b=@]</code> is a mold for a cell, whereas in value mode it's\na pair of molds.  Sometimes you need a structure in value mode, in which you can\nuse <code>^:</code> or <code>,</code>.</p>\n\n<p>Molds used to produced their bunt value if they couldn't mold their sample. This\nis no longer the case: molds now crash if molding fails, so this rune is\nredundant in certain cases.</p>\n\n<p>One may expect that <code>^:(path /foo)</code> would result in a syntax error since <code>^:</code>\nonly takes one child, but instead it will parse as <code>=&lt; ^ %:(path /foo)</code>. Since\n<code>:</code> is the irregular syntax for <code>=&lt;</code> this is is parsed as \"get <code>^</code> (i.e. the\nmold for cells) from a subject of <code>(path /foo)</code>\", with <code>:</code> being the irregular\nsyntax for <code>=&lt;</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>^:  @\n  &lt; 1.goa\n    { *\n      {our/@p now/@da eny/@uvJ}\n      &lt;19.hqf 23.byz 5.mzd 36.apb 119.zmz 238.ipu 51.mcd 93.glm 74.dbd 1.qct $141>\n    }</p>\n</blockquote>\n\n<blockquote>\n  <p>(^:(@) 22)\n  22</p>\n</blockquote>\n\n<blockquote>\n  <p>(^:(@) [22 33])\n  ford: %ride failed to execute:</p>\n</blockquote>\n\n<blockquote>\n  <p>(,cord 55)\n  '7'</p>\n</blockquote>\n\n<blockquote>\n  <p>(ream ',@t')\n  [%ktcl p=[%base p=[%atom p=~.t]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(ream ',cord')\n  [%ktcl p=[%like p=~[%cord] q=~]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "^:"
        ]
    },
    {
        "doc": "<h2><code>^.</code> \"ketdot\"</h2>\n\n<p>Typecast on value produced by passing <code>q</code> to <code>p</code>.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^.  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^.(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktdt p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n^+(%:(p q) q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>p</code> produces a gate and q is any Hoon expression.</p>\n\n<p><code>^.</code> is particularly useful when <code>p</code> is a gate that 'cleans up' the type information about some piece of data. For example, <code>limo</code> is used to turn a raw noun of the appropriate shape into a genuine list. Hence we can use <code>^.</code> to cast with <code>limo</code> and similar gates, ensuring that the product has the desired type.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=mylist [11 22 33 ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>?~(mylist ~ i.mylist)\n  mint-vain</p>\n</blockquote>\n\n<blockquote>\n  <p>=mylist ^.(limo mylist)</p>\n</blockquote>\n\n<blockquote>\n  <p>?~(mylist ~ i.mylist)\n  11</p>\n</blockquote>\n\n<blockquote>\n  <p>?~(mylist ~ t.mylist)\n  ~[22 33]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "^."
        ]
    },
    {
        "doc": "<h2><code>^-</code> \"kethep\"</h2>\n\n<p>Typecast by explicit type label.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^-  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^-(p q)<p>  </pre> |\n| Irregular | <pre><p>    <code>p</code>q<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%kthp p=spec q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n^+(^*(p) q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>It's a good practice to put a <code>^-</code> (\"kethep\") at the top of every arm\n(including gates, loops, etc). This cast is strictly necessary\nonly in the presence of head recursion (otherwise you'll get a\n<code>rest-loop</code> error, or if you really screw up spectacularly an\ninfinite loop in the compiler).</p>\n\n<h4>Examples</h4>\n\n<p>```\n~zod:dojo> (add 90 7)\n97</p>\n\n<p>~zod:dojo> <code>@t</code>(add 90 7)\n'a'</p>\n\n<p>~zod:dojo> ^-(@t (add 90 7))\n'a'</p>\n\n<p>/~zod:dojo> =foo |=  a=@\n                 ^-  (unit @ta)\n                 `a</p>\n\n<p>/~zod:dojo> (foo 97)\n[~ ~.a]\n```</p>\n",
        "keys": [
            "^-"
        ]
    },
    {
        "doc": "<h2><code>^+</code> \"ketlus\"</h2>\n\n<p>Typecast by inferred type.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^+  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^+(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktls p=hoon q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The value of <code>q</code> with the type of <code>p</code>, if the type of <code>q</code> nests within the type\nof <code>p</code>. Otherwise, <code>nest-fail</code>.</p>\n\n<h4>Examples</h4>\n\n<p><code>\n~zod:dojo&gt; ^+('text' %a)\n'a'\n</code></p>\n\n<hr />\n",
        "keys": [
            "^+"
        ]
    },
    {
        "doc": "<h2><code>^&amp;</code> \"ketpam\"</h2>\n\n<p>Convert a core to a zinc core (covariant).</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^&amp;  p<p>  </pre> |\n| Wide | <pre>  ^&amp;(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktpm p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>p</code> as a zinc core; crash if <code>p</code> isn't a gold or zinc core.</p>\n\n<h4>Discussion</h4>\n\n<p>A zinc core has a read-only sample and an opaque context. See <a href=\"/reference/hoon/advanced\">Advanced types</a>.</p>\n\n<h4>Examples</h4>\n\n<p>The prettyprinter shows the core metal in the arm labels <code>1.xoz</code> and <code>1&amp;xoz</code>\nbelow (<code>.</code> is gold, <code>&amp;</code> is zinc):</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>|=(@ 1)\n  &lt; 1.xoz\n    { @\n      {our/@p now/@da eny/@uvJ}\n      &lt;19.hqf 23.byz 5.mzd 36.apb 119.zmz 238.ipu 51.mcd 93.glm 74.dbd 1.qct $141>\n    }</p>\n</blockquote>\n\n<blockquote>\n  <p>^&amp;(|=(@ 1))\n  &lt; 1&amp;xoz\n    { @\n      {our/@p now/@da eny/@uvJ}\n      &lt;19.hqf 23.byz 5.mzd 36.apb 119.zmz 238.ipu 51.mcd 93.glm 74.dbd 1.qct $141>\n    }</p>\n  \n  <p>```</p>\n</blockquote>\n\n<p>You can read from the sample of a zinc core, but not change it:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=mycore ^&amp;(|=(a=@ 1))</p>\n</blockquote>\n\n<blockquote>\n  <p>a.mycore\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>mycore(a 22)\n  -tack.a\n  -find.a\n  ford: %slim failed:\n  ford: %ride failed to compute type:\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "^&"
        ]
    },
    {
        "doc": "<h2><code>^~</code> \"ketsig\"</h2>\n\n<p>Fold constant at compile time.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^~  p<p>  </pre> |\n| Wide | <pre>  ^~(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktsg p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>p</code>, folded as a constant if possible.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(make '|-(42)')\n  [%8 p=[%1 p=[1 42]] q=[%9 p=2 q=[%0 p=1]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(make '^~(|-(42))')\n  [%1 p=42]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "^~"
        ]
    },
    {
        "doc": "<h2><code>^*</code> \"kettar\"</h2>\n\n<p>Produce example type value.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^*  p<p>  </pre> |\n| Wide | <pre>  ^*(p)<p>  </pre> |\n| Irregular | <pre>    *p<p>  </pre> |</p>\n\n<p><code>p</code> is any structure expression.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%kttr p=spec]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>A default value (i.e., 'bunt value') of the type <code>p</code>.</p>\n\n<h4>Examples</h4>\n\n<p>Regular:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>^*  @\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>^*  %baz\n  %baz</p>\n</blockquote>\n\n<blockquote>\n  <p>^*  ^\n  [0 0]</p>\n</blockquote>\n\n<blockquote>\n  <p>^*  ?\n  %.y\n  ```</p>\n</blockquote>\n\n<p>Irregular:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>*@\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>*^\n  [0 0]</p>\n</blockquote>\n\n<blockquote>\n  <p>*tape\n  \"\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "^*"
        ]
    },
    {
        "doc": "<h2><code>^=</code> \"kettis\"</h2>\n\n<p>Bind name to a value.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^=  p<p>  q<p>  </pre> |\n| Wide | <pre>  ^=(p q)<p>  </pre> |\n| Irregular | <pre><p>    p=q<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktts p=skin q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>If <code>p</code> is a term, the product <code>q</code> with type <code>[%face p q]</code>. <code>p</code> may also be a\ntuple of terms, or a term-skin pair; the type of <code>q</code> must divide evenly into\ncells to match it.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>a=1\n  a=1</p>\n</blockquote>\n\n<blockquote>\n  <p>^=  a\n    1\n  a=1</p>\n</blockquote>\n\n<blockquote>\n  <p>^=(a 1)\n  a=1</p>\n</blockquote>\n\n<blockquote>\n  <p>[b c d]=[1 2 3 4]\n  [b=1 c=2 d=[3 4]]</p>\n</blockquote>\n\n<blockquote>\n  <p>[b c d=[x y]]=[1 2 3 4]\n  [b=1 c=2 d=[x=3 y=4]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "^="
        ]
    },
    {
        "doc": "<h2><code>^?</code> \"ketwut\"</h2>\n\n<p>Convert any core to a lead core (bivariant).</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ^?  p<p>  </pre> |\n| Wide | <pre>  ^?(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%ktwt p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>p</code> as a lead core; crash if not a core.</p>\n\n<h4>Discussion</h4>\n\n<p>A lead core is an opaque generator; the payload can't be read or\nwritten.</p>\n\n<p>Theorem: if type <code>x</code> nests within type <code>a</code>, a lead core producing\n<code>x</code> nests within a lead core producing <code>a</code>.</p>\n\n<p>Informally, a more specific generator can be used as a less\nspecific generator.</p>\n\n<h4>Examples</h4>\n\n<p>The prettyprinter shows the core metal (<code>.</code> gold, <code>?</code> lead):</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>|=(@ 1)\n  &lt;1.gcq [@  @n &lt;250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]&gt;</p>\n</blockquote>\n\n<blockquote>\n  <p>^?(|=(@ 1))\n  &lt;1?gcq [@  @n &lt;250.yur 41.wda 374.hzt 100.kzl 1.ypj %151>]&gt;\n  ```</p>\n</blockquote>\n",
        "keys": [
            "^?"
        ]
    },
    {
        "doc": "<h2><code>+|</code> \"lusbar\"</h2>\n\n<p>Chapter label (not useful)</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  +&verbar;  %label<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<h4>Discussion</h4>\n\n<p>The <code>+|</code> doesn't produce an arm. It instead provides a label for the arms that\nfollow it. The arms of a core can be divided into <strong>chapters</strong> for\n'organization'. Chapter labels aren't part of the underlying noun of the core;\nthey're stored as type system metadata only.</p>\n\n<p>See <a href=\"/reference/hoon/stdlib/4o#tome\"><code>tome</code></a> in the Hoon standard library.</p>\n\n<p><strong>Note:</strong> The <code>+|</code> rune has little practical utility. Chapter labels cannot be\nreferenced short of manually processing the <code>$type</code> of a core.</p>\n\n<h4>Examples</h4>\n\n<p>Let's look at what the Hoon compiler's parser, <code>ream</code>, does with the <code>+|</code> rune:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ream '|%  +|  %numbers  ++  two  2  ++  three  3  --')\n  [ %brcn\n    p=~\n      q\n    { [ p=%numbers\n        q=[p=~ q={[p=%three q=[%sand p=%ud q=3]] [p=%two q=[%sand p=%ud q=2]]}]\n      ]\n    }\n  ]\n  ```</p>\n</blockquote>\n\n<p>Notice that <code>p.q</code> has the label <code>%numbers</code>. Contrast with:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ream '|%  ++  two  2  ++  three  3  --')\n  [ %brcn\n    p=~\n      q\n    { [ p=%$\n        q=[p=~ q={[p=%three q=[%sand p=%ud q=3]] [p=%two q=[%sand p=%ud q=2]]}]\n      ]\n    }\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "|"
        ]
    },
    {
        "doc": "<h2><code>+$</code> \"lusbuc\"</h2>\n\n<p>Produce a structure arm (type definition).</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  +$  p=term  q=spec<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<p><code>p</code> is an arm name, and <code>q</code> is any structure expression.</p>\n\n<h4>Discussion</h4>\n\n<p>Arms produced by <code>+$</code> are essentially type definitions. They should be used when one wants to define custom types using core arms.</p>\n\n<p>The Hoon subexpression, <code>q</code>, must be a structure expression. That is, it must be\neither a basic structure expression (<code>*</code>, <code>~</code>, <code>^</code>, <code>?</code>, and <code>@</code>), or a complex\nexpression made with the <code>$</code> family of runes (including irregular variants).\nNames of structures are also permitted (e.g., <code>tape</code>).</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=c |%\n         +$  atom-pair  $:(@ @)\n         +$  flag-atom  $:(? @)\n       --</p>\n</blockquote>\n\n<blockquote>\n  <p><code>atom-pair.c</code>[12 14]\n  [12 14]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>atom-pair.c</code>[12 [22 33]]\n  nest-fail</p>\n</blockquote>\n\n<blockquote>\n  <p><code>flag-atom.c</code>[&amp; 22]\n  [%.y 22]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$"
        ]
    },
    {
        "doc": "<h2><code>++</code> \"luslus\"</h2>\n\n<p>Produce a normal arm.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ++  p=term  q=hoon<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<p><code>p</code> is the arm name, and <code>q</code> is any Hoon expression.</p>\n\n<h4>Discussion</h4>\n\n<p>All arms must have a name (e.g., <code>add</code>). An arm is computed by name resolution.\n(This resolution is implicit in the case of <code>$</code> arms. See <code>|=</code>, <code>|-</code>, and <code>|^</code>.)\nThe <code>++</code> rune is used for explicitly giving a name to an arm.</p>\n\n<p>Any Hoon expression, <code>q</code>, may be used to define the arm computation.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=c |%\n         ++  two  2\n         ++  increment  |=(a=@ +(a))\n       --</p>\n</blockquote>\n\n<blockquote>\n  <p>two.c\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(increment.c 11)\n  12\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "+"
        ]
    },
    {
        "doc": "<h2><code>+*</code> \"lustar\"</h2>\n\n<p>Defines deferred expressions within doors.</p>\n\n<h4>Syntax</h4>\n\n<p>Arguments: A variable number of pairs.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  +*  a=term  b=hoon<p>      c=term  d=hoon<p>      ...<p>      e=term  f=hoon<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<p><code>a</code>, <code>c</code>, <code>e</code> are arm names and <code>b</code>, <code>d</code>, <code>f</code> are any Hoon expression. Note that\nunlike all other runes with a variable number of arguments, the list of\narguments of <code>+*</code> does not end with a terminator.</p>\n\n<p><code>+*</code> arms must always come at the beginning of the battery, before any other\ntype of lus arm.</p>\n\n<h4>Discussion</h4>\n\n<p>The primary use of <code>+*</code> is to create deferred expressions within doors (see\nExamples below). This is a name for an expressions that will be evaluated in\neach place the name is dereferenced. This is a similar concept to aliases or\nmacros, but there are some subtle but important differences. Deferred\nexpressions given by <code>+*</code> do not count towards the number of arms in the door\nand thus are also called \"virtual arms\", which can be important for things like\nGall agent cores that require a fixed number of arms.</p>\n\n<p>Under the hood, <code>+*</code> gets compiled as\n<a href=\"/reference/hoon/rune/tis#-tistar\"><code>=*</code>'s</a> (see here for more discussion on\ndeferred expressions). <code>+* foo bar</code> rewrites each <code>++</code> arm beneath it in the\ncore to include <code>=* foo bar</code>. For example, the interpreter sees the Nock\ncompiled from this Hoon expression</p>\n\n<p>```hoon\n|_  z=@ud\n+*  n  1\n++  x  (add z n)</p>\n\n<h2>++  y  (sub z n)</h2>\n\n<p>```</p>\n\n<p>as being identical the Nock compiled from this one:</p>\n\n<p>```hoon\n=|  z=@ud\n|%\n++  x\n  =*  n  1\n  (add z n)\n++  y\n  =*  n  1</p>\n\n<h2>  (sub z n)</h2>\n\n<p>```</p>\n\n<h4>Examples</h4>\n\n<p>To assign an alias to a door, we often write the following.</p>\n\n<p><code>hoon\n|_  foo\n+*  this  .\n</code></p>\n\n<p>This is the idomatic way to assign the alias <code>this</code> to the door.</p>\n\n<p>Sometimes cores, such as Gall app cores, have a fixed number of arms, but you'd\nlike to include more. This is where aliases employed as \"virtual arms\" may be of\nuse. We note that it is often better style to compose cores with <code>=&gt;</code> or <code>=&lt;</code> to add more arms to a\nGall app core. This usage of <code>+*</code> is controversial and should be minimized.</p>\n\n<p><code>hoon\n|_  =bowl:gall\n+*  this  .\n    samp  +&lt;\n    cont  +&gt;\n</code></p>\n\n<p>This assigns the door the alias <code>this</code>, the sample of the door <code>samp</code>, and the\ncontext of the door <code>cont</code>.</p>\n\n<p>You may also call functions with <code>+*</code> by making use of e.g. the <code>%~</code> rune.</p>\n\n<p>```hoon\n=&lt;\n  |_  a=@\n  +*  do   ~(. +&gt; a)\n  ++  stuff  foo:do</p>\n\n<h2>::etc</h2>\n\n<p>|_  b=@\n++  foo  %bar</p>\n\n<h2>::etc</h2>\n\n<p>```</p>\n",
        "keys": [
            "*"
        ]
    },
    {
        "doc": "<h2><code>;:</code> \"miccol\"</h2>\n\n<p>Call a binary function as an n-ary function.</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;:  p<p>    q1<p>    q2<p>    qn<p>  ==<p>  </pre> |\n| Wide | <pre>  ;:(p q1 q2 qn)<p>  </pre> |\n| Irregular | <pre><p>    :(p q1 q2 qn)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%mccl p=hoon q=(list hoon)]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><strong>Pseudocode</strong>: <code>a</code>, <code>b</code>, <code>c</code>, ... as elements of <code>q</code>:</p>\n\n<p>Regular form:</p>\n\n<p><code>hoon\n%-(p a %-(p b %-(p c ...)))\n</code></p>\n\n<p>Irregular form:</p>\n\n<p><code>hoon\n(p a (p b (p c ...)))\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n|-\n?~  q  !!\n?~  t.q  !!\n?~  t.t.q\n  (p i.q i.t.q)\n(p i.q $(q t.q))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add 3 (add 4 5))\n  12</p>\n</blockquote>\n\n<blockquote>\n  <p>;:(add 3 4 5)\n  12</p>\n</blockquote>\n\n<blockquote>\n  <p>:(add 3 4 5)\n  12</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>:((cury cat 3) 'a' 'b' 'c' 'd')\n  'abcd'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ";:"
        ]
    },
    {
        "doc": "<h2><code>;&lt;</code> \"micgal\"</h2>\n\n<p>Monadic do notation.</p>\n\n<h4>Syntax</h4>\n\n<p>Four arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;&lt;  mold  bind  expr1  expr2<p>  </pre> |\n| Wide | <pre>  ;&lt;(mold bind expr1 expr2)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%mcgl p=spec q=hoon r=hoon s=hoon]\n</code></p>\n\n<h4>Semantics</h4>\n\n<p>A <code>;&lt;</code> is for sequencing two computations, <code>expr1</code> and <code>expr2</code>, using a provided\nimplementation of monadic bind. This rune takes a gate <code>bind</code> which takes a mold\n<code>mold</code> and produces an implementation of monadic bind.</p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n%+  (bind mold)\n  expr1\n|=  mold\nexpr2\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>;&lt;</code> is much like Haskell <code>do</code> notation. You have a sequence of events you'd\nlike to run such that each past the first depends on the output of the previous\none. The output of the previous one may not be of the correct type to use as an\ninput to the next one, and so an adapter such as <code>+biff</code> is needed.</p>\n\n<p><code>;&lt;</code> differs from <a href=\"#-micsig\"><code>;~</code></a> in that it takes a gate which takes a mold\nthat produces an implementation of monadic bind, rather than taking an\nimplementation of monadic bind directly.</p>\n\n<p><code>;&lt;</code> can be used to glue a pipeline together to run an asynchronous function or\nevent. This can be helpful when deferring parts of a computation based on\nexternal data.</p>\n\n<p>We remark that you can switch binds in the middle of a sequence of <code>;&lt;</code>.</p>\n\n<h4>Examples</h4>\n\n<p><a href=\"/reference/hoon/stdlib/2a/#biff\"><code>+biff</code></a> is the unit monad's\nimplementation of monadic bind. That is to say, it takes a unit <code>a</code> and a gate\n<code>b</code> that accepts a noun that produces a unit, and extracts the value from <code>a</code> to\npass as a sample to <code>b</code>.</p>\n\n<p>We illustrate the usage of <code>;&lt;</code> with <code>+biff</code> with a <code>map</code> of atoms:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=m (my ~[[1 3] [2 2] [3 1]])\n  (~(get by m) 1)\n  [~ 3]\n  ```</p>\n</blockquote>\n\n<p>A single usage of <code>;&lt;</code> only serves to apply the binding function to the output\nof <code>expr1</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>;&lt;  a=@  _biff  (~(get by m) 1)\n    a\n  3\n  ```</p>\n</blockquote>\n\n<p>Here we see the result of chaining them together:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>;&lt;  a=@  _biff  (~(get by m) 1)\n    ;&lt;  b=@  _biff  (~(get by m) a)\n    b\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ";<"
        ]
    },
    {
        "doc": "<h2><code>;+</code> \"miclus\"</h2>\n\n<p>make a single XML node (Sail)</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;+  p<p>  </pre> |\n| Wide | <pre>  ;+(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<p><code>p</code> is a Hoon expression that produces a <code>manx</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/5e#marl\"><code>marl</code></a>, i.e., a list of\n<a href=\"/reference/hoon/stdlib/5e#manx\"><code>manx</code></a>. A <code>manx</code> is a noun that\nrepresents a single XML node.</p>\n\n<h4>Discussion</h4>\n\n<p>tl;dr -- <code>;+</code> converts a <code>manx</code> to a <code>marl</code>.</p>\n\n<p><code>;+</code> is a Sail rune. Sail is a part of Hoon used for creating and operating on\nnouns that represent XML nodes. With the appropriate rendering pipeline, a Sail\ndocument can be used to generate a static website.</p>\n\n<p>In Sail a single XML node is represented by a <code>manx</code>. A single\n<code><p&gt;</code> node <code>manx</code> can be produced in the following way:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>;p: This will be rendered as an XML node.\n  [[%p ~] [[%$ [%$ \"This will be rendered as an XML node.\"] ~] ~] ~]\n  ```</p>\n</blockquote>\n\n<p>Sometimes what is needed is a <code>marl</code>, i.e., a list of <code>manx</code>. To convert a\nsingle <code>manx</code> to a <code>marl</code>, use the <code>;+</code> rune.</p>\n\n<p>One interesting thing about Sail is that it allows you to use complex Hoon\nexpressions to choose from among several nodes to render. The <code>;+</code> rune can take\nsuch a complex expression.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>^-  marl\n    ;+  ?:  (gth 3 2)\n          ;p: This is the node for 'yes'.\n        ;p: This is the node for 'no'.\n  ~[\n    [ g=[n=%p a=~]\n      c=[i=[g=[n=%$ a=~[[n=%$ v=\"This is the node for 'yes'.\"]]] c=~] t=~]\n    ]\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>^-  marl\n    ;+  ?:  (gth 2 3)\n          ;p: This is the node for 'yes'.\n        ;p: This is the node for 'no'.\n  ~[\n    [ g=[n=%p a=~]\n      c=[i=[g=[n=%$ a=~[[n=%$ v=\"This is the node for 'no'.\"]]] c=~] t=~]\n    ]\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ";+"
        ]
    },
    {
        "doc": "<h2><code>;;</code> \"micmic\"</h2>\n\n<p>Normalize with a mold, asserting fixpoint.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ;;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%mcmc p=spec q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=+  a=(p q)\n?&gt;  =(`*`a `*`q)\na\n</code></p>\n\n<blockquote>\n  <p>Note: the expansion implementation is hygienic -- it doesn't actually add the <code>a</code> face to the subject.</p>\n</blockquote>\n\n<h4>Examples</h4>\n\n<p>Fails because of auras:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>^-(tape ~[97 98 99])\n  mint-nice\n  -need.?(%~ [i=@tD t=\"\"])\n  -have.[@ud @ud @ud %~]\n  nest-fail\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<p>Succeeds because molds don't care about auras:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>;;(tape ~[97 98 99])\n  \"abc\"\n  ```</p>\n</blockquote>\n\n<p>Fails because not a fixpoint:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>;;(tape [50 51 52])\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ";;"
        ]
    },
    {
        "doc": "<h2><code>;/</code> \"micfas\"</h2>\n\n<p>Tape as XML element.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;/  p<p>  </pre> |\n| Wide | <pre>  ;/(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%mcnt p=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n~[%$ ~[%$ 'p']]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>;/  \"foo\"\n  [[%~. [%~. \"foo\"] ~] ~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ";/"
        ]
    },
    {
        "doc": "<h2><code>;~</code> \"micsig\"</h2>\n\n<p>Glue a pipeline together with a product-sample adapter.</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;~  p<p>    q1<p>    q2<p>    qn<p>  ==<p>  </pre> |\n| Wide | <pre>  ;~(p q1 q2 qn)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%mcsg p=hoon q=(list hoon)]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The gates in <code>q</code> are composed together using the gate <code>p</code> as an intermediate\nfunction, which transforms a <code>q</code> product and a <code>q</code> gate into a <code>q</code> sample.</p>\n\n<h4>Expands to</h4>\n\n<p><strong>Note: these are structurally correct, but elide some type-system complexity.</strong></p>\n\n<p><code>;~(a b)</code> reduces to <code>b</code>.</p>\n\n<p><code>;~(a b c)</code> expands to</p>\n\n<p><code>hoon\n|=  arg=*\n(a (b arg) c(+6 arg))\n</code></p>\n\n<p><code>;~(a b c d)</code> expands to</p>\n\n<p><code>hoon\n|=  arg=*\n%+  a (b arg)\n=+  arg=arg\n|.  (a (c arg) d(+6 arg))\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n?~  q  !!\n|-\n?~  t.q  i.q\n=/  a  $(q t.q)\n=/  b  i.q\n=/  c  ,.+6.b\n|.  (p (b c) a(,.+6 c))\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>Apparently <code>;~</code> is a \"Kleisli arrow.\" It's also a close cousin of the infamous\n\"monad.\" Don't let that bother you. Hoon doesn't know anything about category\ntheory, so you don't need to either.</p>\n\n<p><code>;~</code> is often used in parsers, but is not only for parsers.</p>\n\n<p>This can be thought of as user-defined function composition; instead of simply\nnesting the gates in <code>q</code>, each is passed individually to <code>p</code> with the product\nof the previous gate, allowing arbitrary filtering, transformation, or\nconditional application.</p>\n\n<h4>Examples</h4>\n\n<p>A simple \"parser.\" <code>trip</code> converts a <code>cord</code> (atomic string) to\na <code>tape</code> (linked string).</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=cmp |=([a=tape b=$-(char tape)] <code>tape</code>?~(a ~ (weld (b i.a) t.a)))\n  ;~(cmp trip)\n  &lt;1.zje {a/@ &lt;409.yxa 110.lxv 1.ztu $151>}&gt;\n  ```</p>\n</blockquote>\n\n<p>With just one gate in the pipeline <code>q</code>, the glue <code>p</code> is unused:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(;~(cmp trip) 'a')\n  \"a\"\n  ```</p>\n</blockquote>\n\n<p>But for multiple gates, we need it to connect the pipeline:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(;~(cmp trip |=(a=@ ~[a a])) 'a')\n  \"aa\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(;~(cmp trip |=(a=@ ~[a a])) '')\n  \"\"\n  ```</p>\n</blockquote>\n\n<p>A more complicated example:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(;~(cmp trip ;~(cmp |=(a=@ ~[a a]) |=(a=@ &lt;(dec a)&gt;))) 'b')\n  \"97b\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(;~(cmp trip |=(a=@ ~[a a]) |=(a=@ &lt;(dec a)&gt;)) 'b')\n  \"97b\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(;~(cmp trip |=(a=@ ~[a a]) |=(a=@ &lt;(dec a)&gt;)) '')\n  \"\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(;~(cmp trip |=(a=@ ~[a a]) |=(a=@ &lt;(dec a)&gt;)) 'a')\n  \"96a\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(;~(cmp trip |=(a=@ ~[a a]) |=(a=@ &lt;(dec a)&gt;)) 'acd')\n  \"96acd\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ";~"
        ]
    },
    {
        "doc": "<h2><code>;*</code> \"mictar\"</h2>\n\n<p>make a list of XML nodes from complex Hoon expression (Sail)</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;*  p<p>  </pre> |\n| Wide | <pre>  ;*(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<p><code>p</code> is a Hoon expression that produces a <code>marl</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/5e#marl\"><code>marl</code></a>, i.e., a list of\n<a href=\"/reference/hoon/stdlib/5e#manx\"><code>manx</code></a>. A <code>manx</code> is a noun that\nrepresents a single XML node.</p>\n\n<h4>Discussion</h4>\n\n<p><code>;*</code> is a Sail rune. Sail is a part of Hoon used for creating and operating on\nnouns that represent XML nodes. With the appropriate rendering pipeline, a Sail\ndocument can be used to generate a static website.</p>\n\n<p>If you need a complex Hoon expression to produce a <code>marl</code>, use the <code>;*</code> rune.\nOften this rune is used with an expression, <code>p</code>, that includes one or more <code>;=</code>\nsubexpressions.</p>\n\n<p>(See also <a href=\"#-mictis\"><code>;=</code></a>.)</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>;*  ?:  (gth 3 2)\n          ;=  ;p: This is node 1 of 'yes'.\n              ;p: This is node 2 of 'yes'.\n          ==\n        ;=  ;p: This is node 1 of 'no'.\n            ;p: This is node 2 of 'no'.\n        ==\n  [ [[%p ~] [[%$ [%$ \"This is node 1 of 'yes'.\"] ~] ~] ~]\n    [[[%p ~] [[%$ [%$ \"This is node 2 of 'yes'.\"] ~] ~] ~] ~]\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>;*  ?:  (gth 2 3)\n            ;=  ;p: This is node 1 of 'yes'.\n                ;p: This is node 2 of 'yes'.\n            ==\n          ;=  ;p: This is node 1 of 'no'.\n              ;p: This is node 2 of 'no'.\n          ==\n  [ [[%p ~] [[%$ [%$ \"This is node 1 of 'no'.\"] ~] ~] ~]\n    [[[%p ~] [[%$ [%$ \"This is node 2 of 'no'.\"] ~] ~] ~] ~]\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            ";*"
        ]
    },
    {
        "doc": "<h2><code>;=</code> \"mictis\"</h2>\n\n<p>make a list of XML nodes (Sail)</p>\n\n<h4>Syntax</h4>\n\n<p>A variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ;=  p1<p>      p2<p>      p3<p>     pn<p>  ==<p>  </pre> |\n| Wide | <pre>  ;=(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | None. |</p>\n\n<p><code>p1</code>-<code>pn</code> are Hoon expressions, each of which poduces a <code>manx</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/5e#marl\"><code>marl</code></a>, i.e., a list of\n<a href=\"/reference/hoon/stdlib/5e#manx\"><code>manx</code></a>. A <code>manx</code> is a noun that\nrepresents a single XML node.</p>\n\n<h4>Discussion</h4>\n\n<p><code>;=</code> is a <a href=\"/guides/additional/sail\">Sail</a> rune. Sail is a part of Hoon used for\ncreating and operating on nouns that represent XML nodes. With the appropriate\nrendering pipeline, a Sail document can be used to generate a static website.</p>\n\n<p>In Sail a single XML node is represented by a <code>manx</code>. A single <code>&lt;p&gt;</code> node <code>manx</code>\ncan be produced in the following way:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>;p: This will be rendered as an XML node.\n  [[%p ~] [[%$ [%$ \"This will be rendered as an XML node.\"] ~] ~] ~]\n  ```</p>\n</blockquote>\n\n<p>Sometimes what is needed is a <code>marl</code>, i.e., a list of <code>manx</code>. To convert a\nseries of <code>manx</code> nodes to a <code>marl</code>, use the <code>;=</code> rune.</p>\n\n<p>(See also <a href=\"#-mictar\"><code>;*</code></a>.)</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>;=  ;p: This is the first node.\n        ;p: This is the second.\n        ;p: Here is the last one.\n    ==\n  [ [[%p ~] [[%$ [%$ \"This is the first node.\"] ~] ~] ~]\n    [[%p ~] [[%$ [%$ \"This is the second.\"] ~] ~] ~]\n    [[%p ~] [[%$ [%$ \"Here is the last one.\"] ~] ~] ~]\n    ~\n  ]\n  ```</p>\n</blockquote>\n",
        "keys": [
            ";="
        ]
    },
    {
        "doc": "<h2><code>~&gt;</code> \"siggar\"</h2>\n\n<p>Raw hint, applied to computation.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&gt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&gt;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sggr p=$@(term [p=term q=hoon]) q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Semantics</h4>\n\n<p><code>p</code> may either be a single <code>%term</code> or a pair of <code>[term hoon]</code>, the latter of\nwhich may optionally be be written <code>%foo.some-hoon</code>. <code>p</code> will be passed to the\ninterpreter and <code>q</code> will be evaluated and its result produced like normal.</p>\n\n<h4>Discussion</h4>\n\n<p>Hoon has no way of telling what hints are used and what aren't.\nHints are all conventions at the interpreter level.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~&gt;(%a 42)\n  42\n  ```</p>\n</blockquote>\n\n<p>Running the compiler:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(make '~&gt;(%a 42)')\n  [%11 p=97 q=[%1 p=42]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(make '~&gt;(%a.+(2) 42)')\n  [%11 p=[p=97 q=[%4 p=[%1 p=2]]] q=[%1 p=42]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "~>"
        ]
    },
    {
        "doc": "<h2><code>~|</code> \"sigbar\"</h2>\n\n<p>Tracing printf.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&verbar;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&verbar;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgbr p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Convention</h4>\n\n<p>Prettyprints <code>p</code> in stack trace if <code>q</code> crashes.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~|('sample error message' !!)\n  'sample error message'\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>~|  'sample error message'\n    !!\n  'sample error message'\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "~|"
        ]
    },
    {
        "doc": "<h2><code>~$</code> \"sigbuc\"</h2>\n\n<p>Profiling hit counter.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&amp;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&amp;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgbc p=term q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>If profiling is on, adds 1 to the hit counter <code>p</code>, which is a <code>term</code> like\n<code>%foo</code>. Profiling is enabled by passing the <code>-P</code> flag to the <code>urbit</code> binary.\nProfiling results are saved in <code>/path/to/pier/.urb/put/profile/~some.date.txt</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~$(%foo 3)\n  3\n  ```</p>\n</blockquote>\n\n<p>Assuming we have the binary running with the <code>-P</code> flag, if we do this:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=z |=  a=@\n       ?:  =(a 0)\n         a\n       ~$  %my-hit-counter\n       $(a (dec a))</p>\n</blockquote>\n\n<blockquote>\n  <p>(z 42)\n  0\n  ```</p>\n</blockquote>\n\n<p>...then look in <code>/path/to/pier/.urb/put/profile/~some.date.txt</code>, we'll see this\nline near the top of the file:</p>\n\n<p><code>\nmy-hit-counter: 42\n</code></p>\n\n<hr />\n",
        "keys": [
            "~$"
        ]
    },
    {
        "doc": "<h2><code>~_</code> \"sigcab\"</h2>\n\n<p>User-formatted tracing printf.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~_  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~_(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgcb p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Convention</h4>\n\n<p>Shows <code>p</code> in stacktrace if <code>q</code> crashes.</p>\n\n<h4>Discussion</h4>\n\n<p><code>p</code> must produce a <code>tank</code> (pretty-print source).</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~_([%leaf \"sample error message\"] !!)\n  sample error message\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>~_  [%leaf \"sample error message\"]\n    !!\n  sample error message\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "~_"
        ]
    },
    {
        "doc": "<h2><code>~%</code> \"sigcen\"</h2>\n\n<p>Jet registration.</p>\n\n<h4>Syntax</h4>\n\n<p>Four arguments. Two fixed arguments, then a third which may be <code>~</code> if empty or\nelse a variable number of pairs sandwiched between two <code>==</code>s, then a fourth\nfixed argument.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~%  p  q<p>    ==<p>      r1a  r1b<p>      r2a  r2b<p>      rna  rnb<p>    ==<p>  s<p>  </pre> |\n| Wide | None. |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgcn p=chum q=hoon r=tyre s=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>s</code>.</p>\n\n<h4>Convention</h4>\n\n<p>Register a core with name <code>p</code>, with parent at leg <code>q</code>, exporting\nthe named formulas <code>r</code>, constructed by <code>s</code>.</p>\n\n<h4>Discussion</h4>\n\n<p><code>~%</code> is for registering cores. A registered core declares its\nformal identity to the interpreter, which may or may not be able\nto recognize and/or accelerate it.</p>\n\n<p>Registered cores are organized in a containment hierarchy.\nThe parent core is at any leg within the child core. When we\nregister a core, we state the leg to its parent, in the form of\nwing <code>q</code>. We assume the parent is already registered -- as it\nmust be, if (a) we registered it on creation, (b) the child was\ncreated by an arm defined on the parent.</p>\n\n<p>(Cores are actually managed by their formula/battery. Any\nfunction call will create a new core with a new sample, but\nbatteries are constant. But it is not sufficient to match the\nbattery -- matching the semantics constrains the payload as well,\nsince the semantics of a battery may depend on any parent core\nand/or payload constant.)</p>\n\n<p>The purpose of registration is always performance-related. It\nmay involve (a) a special-purpose optimizer or \"jet\", written\nfor a specific core and checked with a Merkle hash; (b) a\ngeneral-purpose hotspot optimizer or \"JIT\"; or (c) merely a\nhotspot declaration for profiling.</p>\n\n<p>As always with hints, the programmer has no idea which of (a),\n(b), and (c) will be applied. Use <code>~%</code>\nindiscriminately on all hotspots, bottlenecks, etc, real or\nsuspected.</p>\n\n<p>The list <code>r</code> is a way for the Hoon programmer to help jet\nimplementors with named Nock formulas that act on the core.\nIn complex systems, jet implementations are often partial and\nwant to call back into userspace.</p>\n\n<p>The child core contains the parent, of course. When we register\na core, we state the leg to its parent, in the form of wing <code>q</code>.\nWe assume that the parent -- any core within the payload -- is\nalready registered.</p>\n\n<p><code>p</code> is the name of this core within its parent; <code>q</code> is the leg</p>\n\n<p>Registers a jet in core <code>s</code> so that it can be called when that code is run.</p>\n\n<h4>Examples</h4>\n\n<p>Here's the beginning of the AES core in <code>zuse.hoon</code>:</p>\n\n<p><code>hoon\n++  aes    !.\n  ~%  %aes  ..part  ~\n  |%\n  ++  ahem\n    |=  [nnk=@ nnb=@ nnr=@]\n    =&gt;\n      =+  =&gt;  [gr=(ga 8 0x11b 3) few==&gt;(fe .(a 5))]\n          [pro=pro.gr dif=dif.gr pow=pow.gr ror=ror.few]\n      =&gt;  |%\n  ..........\n</code></p>\n\n<p>Here we label the entire <code>++aes</code> core for optimization.</p>\n\n<hr />\n",
        "keys": [
            "~%"
        ]
    },
    {
        "doc": "<h2><code>~&lt;</code> \"siggal\"</h2>\n\n<p>Raw hint, applied to product.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&lt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&lt;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<p><code>p</code> may either be a a <code>term</code> or a pair of <code>[term hoon]</code>. If it's the latter, <code>p</code>\nmay optionally be written as <code>%foo.some-hoon</code>.</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sggl p=$@(term [p=term q=hoon]) q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Discussion</h4>\n\n<p><code>~&lt;</code> is only used for jet hints (<a href=\"#-sigfas\"><code>~/</code></a> and <a href=\"#-sigcen\"><code>~%</code></a>) at the\nmoment; we are not telling the interpreter something about the computation we're\nabout to perform, but rather about its product.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(make '~&lt;(%a 42)')\n  [%7 p=[%1 p=42] q=[%11 p=97 q=[%0 p=1]]]\n  (make '~&lt;(%a.+(.) 42)')\n  [%7 p=[%1 p=42] q=[%11 p=[p=97 q=[%4 p=[%0 p=1]]] q=[%0 p=1]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "~<"
        ]
    },
    {
        "doc": "<h2><code>~+</code> \"siglus\"</h2>\n\n<p>Cache a computation.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~+  p<p>  </pre> |\n| Wide | <pre>  ~+(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgls p=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>p</code>.</p>\n\n<h4>Convention</h4>\n\n<p>Caches the formula and subject of <code>p</code> in a local cache (generally\ntransient in the current event).</p>\n\n<h4>Examples</h4>\n\n<p>This may pause for a second:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>%.(25 |=(a=@ ?:((lth a 2) 1 (add $(a (sub a 2)) $(a (dec a))))))\n  121.393\n  ```</p>\n</blockquote>\n\n<p>This may make you want to press <code>ctrl-c</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>%.(30 |=(a=@ ?:((lth a 2) 1 (add $(a (sub a 2)) $(a (dec a))))))\n  1.346.269\n  ```</p>\n</blockquote>\n\n<p>This should work fine:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>%.(100 |=(a=@ ~+(?:((lth a 2) 1 (add $(a (sub a 2)) $(a (dec a)))))))\n  573.147.844.013.817.084.101\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "~+"
        ]
    },
    {
        "doc": "<h2><code>~/</code> \"sigfas\"</h2>\n\n<p>Jet registration for gate with registered context.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~/  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~/(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgfs p=term q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n~%(p +7 ~ q)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>From the kernel:</p>\n\n<p><code>hoon\n++  add\n  ~/  %add\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  =(0 a)  b\n  $(a (dec a), b +(b))\n</code></p>\n\n<hr />\n",
        "keys": [
            "~/"
        ]
    },
    {
        "doc": "<h2><code>~&amp;</code> \"sigpam\"</h2>\n\n<p>Debugging printf.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~&amp;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~&amp;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgpm p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Product</h4>\n\n<p>Pretty-prints <code>p</code> on the console before computing <code>q</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>This rune has no semantic effect beyond the Hoon expression <code>q</code>. It's used\nsolely to create a side-effect: printing the value of <code>p</code> to the console.</p>\n\n<p>It's most useful for debugging programs.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~&amp;('halp' ~)\n  'halp'\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>~&amp;  'halp'\n    ~\n  'halp'\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "~&"
        ]
    },
    {
        "doc": "<h2><code>~=</code> \"sigtis\"</h2>\n\n<p>Detect duplicate.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~=  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~=(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgts p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Convention</h4>\n\n<p>If <code>p</code> equals <code>q</code>, produce <code>p</code> instead of <code>q</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>Duplicate nouns are especially bad news in Hoon, because comparing them\ntakes O(n) time. Use <code>~=</code> to avoid this inefficiency.</p>\n\n<h4>Examples</h4>\n\n<p>This code traverses a tree and replaces all instances of <code>32</code> with\n<code>320</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |=  a=(tree)\n         ?~(a ~ ~=(a [?:(=(n.a 32) 320 n.a) $(a l.a) $(a r.a)]))</p>\n</blockquote>\n\n<blockquote>\n  <p>(foo 32 ~ ~)\n  [320 ~ ~]\n  ```</p>\n</blockquote>\n\n<p>Without <code>~=</code>, it would build a copy of a completely unchanged tree. Sad!</p>\n\n<hr />\n",
        "keys": [
            "~="
        ]
    },
    {
        "doc": "<h2><code>~?</code> \"sigwut\"</h2>\n\n<p>Conditional debug printf.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~?  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ~?(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgwt p=hoon q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>r</code>.</p>\n\n<h4>Convention</h4>\n\n<p>If <code>p</code> is true, prettyprints <code>q</code> on the console before computing <code>r</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~?((gth 1 2) 'oops' ~)\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>~?((gth 1 0) 'oops' ~)\n  'oops'\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>~?  (gth 1 2)\n      'oops'\n    ~\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>~?  (gth 1 0)\n      'oops'\n    ~\n  'oops'\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "~?"
        ]
    },
    {
        "doc": "<h2><code>~!</code> \"sigzap\"</h2>\n\n<p>Print type on compilation fail.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ~!  p<p>  q<p>  </pre> |\n| Wide | <pre>  ~!(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%sgzp p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>q</code>.</p>\n\n<h4>Convention</h4>\n\n<p>If compilation of <code>q</code> fails, prints the type of <code>p</code> in the trace.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>a\n  ! -find.a</p>\n</blockquote>\n\n<blockquote>\n  <p>~!('foo' a)\n  ! @t\n  ! find.a</p>\n</blockquote>\n\n<blockquote>\n  <p>~!  'foo'\n    a\n  ! @t\n  ! find.a\n  ```</p>\n</blockquote>\n",
        "keys": [
            "~!"
        ]
    },
    {
        "doc": "<h2><code>=&gt;</code> \"tisgar\"</h2>\n\n<p>Compose two expressions.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =&gt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  =&gt;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tsgr p=hoon q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>the product of <code>q</code>, with the product of <code>p</code> taken as the subject.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=&gt;([a=1 b=2 c=3] b)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>=&gt;  9  .\n  9</p>\n</blockquote>\n\n<blockquote>\n  <p>=&gt;((add 2 4) [. .])\n  [6 6]</p>\n</blockquote>\n\n<blockquote>\n  <p>=&gt;\n    |%\n    ++  foo\n      |=  [a=@ b=@]\n      [b a]\n    --\n    (foo 42 27)\n  [27 42]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=>"
        ]
    },
    {
        "doc": "<h2><code>=|</code> \"tisbar\"</h2>\n\n<p>Combine a named noun with the subject by \"bunting\" (producing the default value)\nof a given mold.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =&verbar;  p<p>  q<p>  </pre> |\n| Wide | <pre>  =&verbar;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tsbr p=spec q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=+(*p q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>The default (or 'bunt') value of <code>p</code> is pinned to the head of the subject.\nUsually <code>p</code> includes a name for ease of reference.</p>\n\n<p>Speaking more loosely, <code>=|</code> usually \"declares a variable\" which is\n\"uninitialized,\" presumably because you'll set it in a loop or similar.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=|  a=@ud  a\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>=|  a=[@t @t @t]  a\n  ['' '' '']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=|"
        ]
    },
    {
        "doc": "<h2><code>=:</code> \"tiscol\"</h2>\n\n<p>Change multiple legs in the subject.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments: the first a variable number of pairs, the second is fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =:  p1a  p1b<p>      p2a  p2b<p>      p3a  p3b<p>    ==<p>  q<p>  </pre> |\n| Wide | <pre>  =:(p1a p1b, p2a p2b, p3a p3b q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tscl p=(list (pair wing hoon)) q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=&gt;(%_(. p) q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>This rune is like <code>=.</code>, but for modifying the values of multiple legs of the subject.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=+  a=[b=1 c=2]\n    =:  c.a  4\n        b.a  3\n      ==\n    a\n  [b=3 c=4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=:"
        ]
    },
    {
        "doc": "<h2><code>=,</code> \"tiscom\"</h2>\n\n<p>Expose namespace.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =,  p<p>  q<p>  </pre> |\n| Wide | <pre>  =,(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tscm p=hoon q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>p</code> evaluates to a noun with some namespace. From within <code>q</code> you may access\n<code>p</code>'s names without a wing path (i.e., you can use face <code>b</code> rather than <code>b.p</code>).</p>\n\n<h4>Discussion</h4>\n\n<p>This is especially useful for calling arms from an imported library core or for\ncalling arms from a stdlib core repeatedly. For example, JSON reparsers like\n<code>so:dejs:format</code> and <code>of:dejs:format</code> can be called as <code>so</code> and <code>of</code> after\ndoing:</p>\n\n<p><code>hoon\n=,  dejs:format\n</code></p>\n\n<h4>Examples</h4>\n\n<p>With an imported core:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sum -7 --7)\n  -find.sum\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>(sum:si -7 --7)\n  --0</p>\n</blockquote>\n\n<blockquote>\n  <p>=,  si  (sum -7 --7)\n  --0\n  ```</p>\n</blockquote>\n\n<p>With a dojo-defined face:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=/  fan  [bab=2 baz=[3 qux=4]]\n    =,  fan\n    [bab qux.baz]\n  [2 4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=,"
        ]
    },
    {
        "doc": "<h2><code>=.</code> \"tisdot\"</h2>\n\n<p>Change one leg in the subject.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =.  p  q<p>  r<p>  </pre> |\n| Wide | <pre>  =.(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tsdt p=wing q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=&gt;(%_(. p q) r)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>Technically the <code>=.</code> rune doesn't change the subject. It creates a new subject\njust like the old one except for a changed value at <code>p</code>. Note that the mutation\nuses <a href=\"/reference/hoon/rune/cen#_-cencab\"><code>%_</code> (\"cencab\")</a>, so the type at <code>p</code>\ndoesn't change. Trying to change the value type results in a <code>nest-fail</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=+  a=[b=1 c=2]\n    =.  b.a  3\n    a\n  [b=3 c=2]</p>\n</blockquote>\n\n<blockquote>\n  <p>=+  a=[b=1 c=2]\n    =.(b.a 3 a)\n  [b=3 c=2]</p>\n</blockquote>\n\n<blockquote>\n  <p>=+  a=[b=1 c=2]\n    =.(b.a \"hello\" a)\n  nest-fail\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=."
        ]
    },
    {
        "doc": "<h2><code>=-</code> \"tishep\"</h2>\n\n<p>Combine a new noun with the subject, inverted.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =-  p<p>  q<p>  </pre> |\n| Wide | <pre>  =-(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tshp p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=&gt;([q .] p)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>=-</code> is just like <code>=+</code> but its subexpressions are reversed. <code>=-</code> looks better\nthan <code>=+</code> when the expression you're pinning to the subject is much larger than\nthe expression that uses it.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |=  a=@\n         =-  (add a b)\n         :*  %a-bunch\n             %of-stuff\n             %here\n             b=2\n             %and-perhaps-more\n         ==\n  (foo 5)\n  7\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=-"
        ]
    },
    {
        "doc": "<h2><code>=^</code> \"tisket\"</h2>\n\n<p>Pin the head of a pair; change a leg with the tail.</p>\n\n<h4>Syntax</h4>\n\n<p>Four arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =^  p  q<p>    r<p>  s<p>  </pre> |\n| Wide | <pre>  =^(p q r s)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tskt p=skin q=wing r=hoon s=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=/(p -.r =.(q +.r s))\n</code></p>\n\n<h4>Discussion</h4>\n\n<ul>\n<li><code>p</code> is a new name (optionally with type) to pin to the subject.</li>\n<li><code>q</code> is the name of an existing wing of the subject.</li>\n<li><code>r</code> is an expression that produces <code>[p-value new-q-value]</code>.</li>\n<li><code>s</code> is some more code to be evaluted against the modified subject.</li>\n</ul>\n\n<p>This is a bit like doing <code>=/</code> and <code>=.</code> at the same time. It's useful for state\nmachines, where you want to produce both effects and a new state. For example,\nmany arms of a Gall agent produce <code>[effects new-state]</code> in the form of a <code>(quip card _this)</code>. In the <code>++on-poke</code> arm, you might have something like:</p>\n\n<p><code>hoon\n=^  cards  state\n  (handle-poke !&lt;(action vase))\n[cards this]\n</code></p>\n\n<p>This may also remind you of Haskell's State monad.</p>\n\n<h4>Examples</h4>\n\n<p>The <code>og</code> core is a stateful pseudo-random number generator.\nWe have to change the core state every time we generate a\nrandom number, so we use <code>=^</code>:</p>\n\n<p><code>\n~zod:dojo&gt; =+  rng=~(. og 420)\n           =^  r1  rng  (rads:rng 100)\n           =^  r2  rng  (rads:rng 100)\n           [r1 r2]\n[99 46]\n</code></p>\n\n<hr />\n",
        "keys": [
            "=^"
        ]
    },
    {
        "doc": "<h2><code>=&lt;</code> \"tisgal\"</h2>\n\n<p>Compose two expressions, inverted.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =&lt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  =&lt;(p q)<p>  </pre> |\n| Irregular | <pre><p>    p:q<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tsgl p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=&gt;(q p)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>=&lt;</code> is just <code>=&gt;</code> backwards.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=&lt;(b [a=1 b=2 c=3])\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>=&lt;  b\n    [a=1 b=2 c=3]\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>b:[a=1 b=2 c=3]\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>[. .]:(add 2 4)\n  [6 6]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=<"
        ]
    },
    {
        "doc": "<h2><code>=+</code> \"tislus\"</h2>\n\n<p>Combine a new noun with the subject.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =+  p<p>  q<p>  </pre> |\n| Wide | <pre>  =+(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tsls p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=&gt;([p .] q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>The subject of the <code>=+</code> expression, call it <code>a</code>, becomes the cell <code>[p a]</code> for\nthe evaluation of <code>q</code>. That is, <code>=+</code> 'pins a value', <code>p</code>, to the head of the\nsubject.</p>\n\n<p>Loosely speaking, <code>=+</code> is the simplest way of \"declaring a variable.\"</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=+  42  -\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>=+  x=42  x\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>=+  [a='foo' b='bar']  a\n  'foo'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=+"
        ]
    },
    {
        "doc": "<h2><code>=;</code> \"tismic\"</h2>\n\n<p>Combine a named noun with the subject, possibly with type annotation; inverted\norder.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =;  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  =;(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tsmc p=skin q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=/(p r q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>=;</code> is exactly like <code>=/</code> except that the order of its last two subexpressions\nis reversed.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo |=  a=@\n         =/   b  1\n         =;   c=@\n           :(add a b c)\n         2\n  (foo 5)\n  8\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=;"
        ]
    },
    {
        "doc": "<h2><code>=/</code> \"tisfas\"</h2>\n\n<p>Combine a named noun with the subject, possibly with type annotation.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =/  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  =/(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tsfs p=skin q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p>if <code>p</code> is a name, (e.g. <code>a</code>):</p>\n\n<p><code>hoon\n=+(^=(p q) r)\n</code></p>\n\n<p>if <code>p</code> is a name with a type (e.g., <code>a=@</code>):</p>\n\n<p><code>hoon\n=+(^-(p q) r)\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n?@  p\n  =+  p=q\n  r\n=+  ^-($=(p.p q.p) q)\nr\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>p</code> can be either a name or a <code>name=type</code>. If it's just a name, <code>=/</code> (\"tisfas\")\n\"declares a type-inferred variable.\" If it has a type, <code>=/</code> \"declares a\ntype-checked variable.\"</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=/  a=@t  'hello'  a\n  'hello'</p>\n</blockquote>\n\n<blockquote>\n  <p>=/  x  [1 2 3]  x\n  [1 2 3]</p>\n</blockquote>\n\n<blockquote>\n  <p>=foo |=  a=@\n         =/  b  1\n         =/  c=@  2\n         :(add a b c)\n  (foo 5)\n  8\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=/"
        ]
    },
    {
        "doc": "<h2><code>=~</code> \"tissig\"</h2>\n\n<p>Compose many expressions.</p>\n\n<h4>Syntax</h4>\n\n<p>Variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =~  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  =~(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tssg p=(list hoon)]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The product of the chain composition.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=~  10\n        [20 .]\n        [30 .]\n        [40 .]\n        .\n    ==\n  [40 30 20 10]</p>\n</blockquote>\n\n<blockquote>\n  <p>=~  [sub (mul 3 20) (add 10 20)]\n        (sub +)\n        +(.)\n    ==\n  31</p>\n</blockquote>\n\n<blockquote>\n  <p>=foo =|  n=@\n         =&lt;  =~  increment\n                 increment\n                 increment\n                 n\n             ==\n         |%\n         ++  increment\n           ..increment(n +(n))\n         --\n  foo\n  3\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=~"
        ]
    },
    {
        "doc": "<h2><code>=*</code> \"tistar\" {% #-tistar %}</h2>\n\n<p>Define a deferred expression.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =*  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  =*(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tstr p=term q=hoon r=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>r</code>, compiled with a subject in which <code>p</code> is a deferred expression for <code>q</code>.</p>\n\n<h4>Discussion</h4>\n\n<p><code>=*</code> assigns a name to an expression that will be evaluated in each place the\nname is dereferenced. This allows you to \"write\" through it to the original\nsubject <code>axis</code>. <code>q</code> is recorded in the type information of <code>p</code>, and <code>q</code> is\ncalculated every time you use <code>p</code>.</p>\n\n<p>This rune has some similarities with macros, and some similarities with aliases,\nbut it is not really either.</p>\n\n<p>This rune is commonly used to give a Gall agent's state the name <code>state</code> like:</p>\n\n<p><code>hoon\n=*  state  -\n</code></p>\n\n<p>This lets you reference the whole <code>state</code> while also being able to reference its\nindividual elements like <code>foo</code> and <code>bar</code>, without having to do <code>foo.state</code>,\n<code>bar.state</code>, etc.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=+  a=1\n    =*  b  a\n    [a b]\n  [1 1]</p>\n</blockquote>\n\n<blockquote>\n  <p>=+  a=1\n    =*  b  a\n    =.  a  2\n    [a b]\n  [2 2]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "=*"
        ]
    },
    {
        "doc": "<h2><code>=?</code> \"tiswut\"</h2>\n\n<p>Conditionally change one leg in the subject.</p>\n\n<h4>Syntax</h4>\n\n<p>Four arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  =?  p  q<p>    r<p>  s<p>  </pre> |\n| Wide | <pre>  =?(p q r s)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%tswt p=wing q=hoon r=hoon s=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n=.  p  ?:(q r p)\ns\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>Use <code>=?</code> to replace the value of leg <code>p</code> with <code>r</code> on condition <code>q</code>. As\nusual, we are not actually mutating the subject, just creating\na new subject with a changed value. The change in value includes a\ntype check against the old subject; the type of <code>r</code> must nest under\nthe type of <code>p</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a 12</p>\n</blockquote>\n\n<blockquote>\n  <p>=?(a =(1 1) 22 a)\n  22</p>\n</blockquote>\n\n<blockquote>\n  <p>=?(a =(1 2) 22 a)\n  12\n  ```</p>\n</blockquote>\n",
        "keys": [
            "=?"
        ]
    },
    {
        "doc": "<h2><code>?|</code> \"wutbar\"</h2>\n\n<p>Logical OR.</p>\n\n<h4>Syntax</h4>\n\n<p>Variable number of arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?&verbar;  p1<p>      p2<p>      p3<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  ?&verbar;(p1 p2 p3 pn)<p>  </pre> |\n| Irregular | <pre>    &verbar;(p1 p2 p3 pn)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtbr p=(list hoon)]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><strong>Pseudocode</strong>: <code>a</code>, <code>b</code>, <code>c</code>, ... as elements of <code>p</code>:</p>\n\n<p><code>hoon\n?:(a &amp; ?:(b &amp; ?:(c &amp; ?:(... ?:(z &amp; |)))))\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n|-\n?~  p\n  |\n?:  i.p\n  &amp;\n$(p t.p)\n</code></p>\n\n<h4>Produces</h4>\n\n<p>If any argument evaluates to true (<code>%.y</code>), true. If all arguments evaluate to\nfalse (<code>%.n</code>), false.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>|(=(6 42) =(42 42))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>|(=(6 42) =(42 43))\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?|"
        ]
    },
    {
        "doc": "<h2><code>?-</code> \"wuthep\"</h2>\n\n<p>Switch against a union, with no default.</p>\n\n<h4>Syntax</h4>\n\n<p>One fixed argument, then a variable number of pairs.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  ?-  p<p>    q1a  q1b<p>    q2a  q2b<p>    qna  qnb<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  ?-    p<p>      q1a<p>    q1b<p>  ::<p>      q2a<p>    q2b<p>  ::<p>      qna<p>    qnb<p>  ==<p>  </pre> |\n| Wide | <pre>  ?-(p q1a q1b, q2a q2b, qna qnb)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wthp p=wing q=(list (pair spec value))]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><strong>Pseudocode</strong>: <code>a</code>, <code>b</code>, <code>c</code>, ... as elements of <code>q</code>:</p>\n\n<p><code>hoon\n?:  ?=(p.a p)  q.a\n?:  ?=(p.b p)  q.b\n?:  ?=(p.c p)  q.c\n...\n~|(%mint-lost !!)\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n|-\n?.  q\n  ~|(%mint-lost !!)\n?:  ?=(p.i.q p)\n  q.i.q\n$(q t.q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>The <code>?-</code> rune is for a conditional expression in which the type of <code>p</code>\ndetermines which branch is taken. Usually the type of <code>p</code> is a union of other\ntypes. There is no default branch.</p>\n\n<p>The compiler makes sure that your code neither misses a case of the union, nor\nincludes a double case that isn't there. This is not special handling for <code>?-</code>,\njust a consequence of the semantics of <code>?:</code>, which <code>?-</code> reduces to.</p>\n\n<p>A missing case will throw the <code>mint-lost</code> error. An extra case will throw\n<code>mint-vain</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=cor |=  vat=?(%a %b)\n         ?-  vat\n           %a  20\n           %b  42\n         ==</p>\n</blockquote>\n\n<blockquote>\n  <p>(cor %a)\n  20</p>\n</blockquote>\n\n<blockquote>\n  <p>(cor %b)\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>(cor %c)\n  ! nest-fail\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?-"
        ]
    },
    {
        "doc": "<h2><code>?:</code> \"wutcol\" {% #-wutcol %}</h2>\n\n<p>Branch on a boolean test.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?:  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?:(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtcl p=hoon q=hoon r=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>If <code>p</code> produces true (<code>%.y</code>), then <code>q</code>. If <code>p</code> produces false (<code>%.n</code>), then <code>r</code>.\nIf <code>p</code> is not a boolean, compiler yells at you.</p>\n\n<h4>Discussion</h4>\n\n<p>If test analysis reveals that either branch is never taken, or if <code>p</code> is not a\nboolean, compilation fails. An untaken branch is indicated with <code>mint-lost</code>.</p>\n\n<p>Note also that all other branching expressions reduce to <code>?:</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>?:((gth 1 0) 3 4)\n  3</p>\n</blockquote>\n\n<blockquote>\n  <p>?:  (gth 1 0)\n      3\n    4\n  3</p>\n</blockquote>\n\n<blockquote>\n  <p>?:((gth 1 2) 3 4)\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>?:  (gth 1 2)\n      3\n    4\n  4\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?:"
        ]
    },
    {
        "doc": "<h2><code>?.</code> \"wutdot\"</h2>\n\n<p>Branch on a boolean test, inverted.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?.  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?.(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtdt p=hoon q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n?:(p r q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>?.</code> is just like <code>?:</code>, but with its last two subexpressions reversed.</p>\n\n<p>As is usual with inverted forms, use <code>?.</code> when the true-case expression is much\ntaller and/or wider than the false-case expression.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>?.((gth 1 2) 3 4)\n  3</p>\n</blockquote>\n\n<blockquote>\n  <p>?.(?=(%a 'a') %not-a %yup)\n  %yup</p>\n</blockquote>\n\n<blockquote>\n  <p>?.  %.y\n      'this false case is less heavy than the true case'\n    ?:  =(2 3)\n      'two not equal to 3'\n    'but see how \\'r is much heavier than \\'q?'\n  'but see how \\'r is much heavier than \\'q?'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?."
        ]
    },
    {
        "doc": "<h2><code>?^</code> \"wutket\"</h2>\n\n<p>Branch on whether a wing of the subject is a cell.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?^  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?^(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtkt p=wing q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n?:(?=(^ p) q r)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>The type of the wing, <code>p</code>, must not be known to be either an atom or a cell, or\nelse you'll get a <code>mint-vain</code> error at compile time. <code>mint-vain</code> means that one\nof the <code>?^</code> branches, <code>q</code> or <code>r</code>, is never taken.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>?^(0 1 2)\n  ! mint-vain\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>?^(<code>*</code>0 1 2)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>?^(<code>*</code>[1 2] 3 4)\n  3\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?^"
        ]
    },
    {
        "doc": "<h2><code>?&lt;</code> \"wutgal\"</h2>\n\n<p>Negative assertion.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?&lt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  ?&lt;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtgl p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n?:(p !! q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>?&lt;</code> is used to force a crash when some condition <code>p</code> doesn't yield false\n(<code>%.n</code>). It can be used for type inference with the <code>?=</code> rune, much like the\n<code>?&gt;</code> rune.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>?&lt;(=(3 4) %foo)\n  %foo</p>\n</blockquote>\n\n<blockquote>\n  <p>?&lt;(=(3 3) %foo)\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>=a <code>*</code>[12 14]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>^</code>a\n  nest-fail</p>\n</blockquote>\n\n<blockquote>\n  <p>?&lt;(?=(@ a) <code>^</code>a)\n  [12 14]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?<"
        ]
    },
    {
        "doc": "<h2><code>?&gt;</code> \"wutgar\"</h2>\n\n<p>Positive assertion.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?>  p<p>  q<p>  </pre> |\n| Wide | <pre>  ?>(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtgr p=hoon q=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n?.(p !! q)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>?&gt;</code> is used to force a crash when some condition <code>p</code> doesn't yield true\n(<code>%.y</code>). It can be used for type inference, with the <code>?=</code> rune, to specify the\ntype of a value.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>?>(=(3 3) %foo)\n  %foo</p>\n</blockquote>\n\n<blockquote>\n  <p>?>(=(3 4) %foo)\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>=a <code>*</code>123</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@</code>a\n  nest-fail</p>\n</blockquote>\n\n<blockquote>\n  <p>?>(?=(@ a) <code>@</code>a)\n  123\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?>"
        ]
    },
    {
        "doc": "<h2><code>?+</code> \"wutlus\"</h2>\n\n<p>Switch against a union, with a default.</p>\n\n<h4>Syntax</h4>\n\n<p>Two fixed arguments, then a variable number of pairs.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall style #1 | <pre>  ?+  p  q<p>    r1a  r1b<p>    r2a  r2b<p>    rna  rnb<p>  ==<p>  </pre> |\n| Tall style #2 | <pre>  ?+    p  q<p>      r1a<p>    r1b<p>  ::<p>      r2a<p>    r2b<p>  ::<p>      rna<p>    rnb<p>  ==<p>  </pre> |\n| Wide | <pre>  ?+(p q r1a r1b, r2a r2b, rna rnb)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtls p=wing q=hoon r=(list (pair spec hoon))]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><strong>Pseudocode</strong>: <code>a</code>, <code>b</code>, <code>c</code>, ... as elements of <code>r</code>:</p>\n\n<p><code>hoon\n?:  ?=(p.a p)  q.a\n?:  ?=(p.b p)  q.b\n?:  ?=(p.c p)  q.c\n...\nq\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n|-\n?.  r\n  q\n?:  ?=(p.i.r p)\n  q.i.r\n$(r t.r)\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>The <code>?+</code> rune is for a conditional expression in which the type of <code>p</code>\ndetermines which branch is taken. Usually the type of <code>p</code> is a union of other\ntypes. If <code>p</code>'s type doesn't match the case for any given branch, the default\nexpression, <code>q</code>, is evaluated.</p>\n\n<p>If there is a case that is never taken you'll get a <code>mint-vain</code> error.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=cor |=  vat=@tas\n         ?+  vat  240\n           %a  20\n           %b  42\n         ==</p>\n</blockquote>\n\n<blockquote>\n  <p>(cor %a)\n  20</p>\n</blockquote>\n\n<blockquote>\n  <p>(cor %b)\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>(cor %c)\n  240\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?+"
        ]
    },
    {
        "doc": "<h2><code>?&amp;</code> \"wutpam\"</h2>\n\n<p>Logical AND.</p>\n\n<h4>Syntax</h4>\n\n<p>Variable arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?&amp;  p1<p>      p2<p>      pn<p>  ==<p>  </pre> |\n| Wide | <pre>  ?&amp;(p1 p2 pn)<p>  </pre> |\n| Irregular | <pre><p>    &amp;(p1 p2 pn)<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtpm p=(list hoon)]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><strong>Pseudocode</strong>: <code>a</code>, <code>b</code>, <code>c</code>, ... as elements of <code>p</code>:</p>\n\n<p><code>hoon\n?.(a | ?.(b | ?.(c | ?.(... ?.(z | &amp;)))))\n</code></p>\n\n<h4>Desugaring</h4>\n\n<p><code>hoon\n|-\n?~  p\n  &amp;\n?.  i.p\n  |\n$(p t.p)\n</code></p>\n\n<h4>Produces</h4>\n\n<p>If ALL arguments evaluate to true (<code>%.y</code>), true (<code>%.y</code>). If one or more evalute\nto false (<code>%.n</code>), false (<code>%.n</code>).</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>&amp;(=(6 6) =(42 42))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>&amp;(=(6 7) =(42 42))\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?&"
        ]
    },
    {
        "doc": "<h2><code>?@</code> \"wutpat\"</h2>\n\n<p>Branch on whether a wing of the subject is an atom.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?@  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?@(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtpt p=wing q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n?:(?=(@ p) q r)\n</code></p>\n\n<h4>Produces</h4>\n\n<p>If <code>p</code> is an atom, <code>q</code>. If <code>p</code> is a cell, <code>r</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>The type of the wing, <code>p</code>, must not be known to be either an atom or a cell, or\nelse you'll get a <code>mint-vain</code> error at compile time. <code>mint-vain</code> means that one\nof the <code>?@</code> branches, <code>q</code> or <code>r</code>, is never taken.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>?@(0 1 2)\n  ! mint-vain\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>?@(<code>*</code>0 1 2)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>?@(<code>*</code>[1 2] 3 4)\n  4\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?@"
        ]
    },
    {
        "doc": "<h2><code>?~</code> \"wutsig\"</h2>\n\n<p>Branch on whether a wing of the subject is null.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?~  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  ?~(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtsg p=wing q=hoon r=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n?:(?=($~ p) q r)\n</code></p>\n\n<h4>Produces</h4>\n\n<p>If <code>p</code> is null (<code>~</code>), <code>q</code>. If <code>p</code> is non-null, <code>r</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>It's bad style to use <code>?~</code> to test for any zero atom. Use it only for a true\nnull, <code>~</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo \"\"</p>\n</blockquote>\n\n<blockquote>\n  <p>?~(foo 1 2)\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?~"
        ]
    },
    {
        "doc": "<h2><code>?=</code> \"wuttis\"</h2>\n\n<p>Test pattern match.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?=  p<p>  q<p>  </pre> |\n| Wide | <pre>  ?=(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtts p=spec q=wing]\n</code></p>\n\n<h4>Produces</h4>\n\n<p><code>%.y</code> (true) if the noun at <code>q</code> is in the type of <code>p</code>; <code>%.n</code> (false) otherwise.</p>\n\n<h4>Discussion</h4>\n\n<p><code>?=</code> is not as powerful as it might seem. For instance, it\ncan't generate a loop -- you cannot (and should not) use it to\ntest whether a <code>*</code> is a <code>(list @)</code>. Nor can it validate atomic\nauras.</p>\n\n<p>Patterns should be as weak as possible. Unpack one layer of\nunion at a time. Don't confirm things the type system knows.</p>\n\n<p>For example, when matching from a tagged union for the type <code>[%foo p=@ q=[@ @]]</code>, the appropriate pattern is <code>[%foo *]</code>. You have one\nquestion, which is whether the head of the noun is <code>%foo</code>.</p>\n\n<p>A common error is <code>find.$</code>, meaning <code>p</code> is not a type.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=bar [%foo %bar %baz]\n  ?=([%foo *] bar)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "?="
        ]
    },
    {
        "doc": "<h2><code>?!</code> \"wutzap\"</h2>\n\n<p>Logical NOT.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  ?!  p<p>  </pre> |\n| Wide | <pre>  ?!(p)<p>  </pre> |\n| Irregular | <pre>    !p<p>  </pre> |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%wtzp p=hoon]\n</code></p>\n\n<h4>Expands to</h4>\n\n<p><code>hoon\n.=(| p)\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The logical NOT of <code>p</code>, which must evaluate to either <code>%.y</code> or <code>%.n</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```\n~zod:dojo> ?!(.=(1 2))\n%.y</p>\n\n<p>~zod:dojo> !&amp;\n%.n</p>\n\n<p>~zod:dojo> !|\n%.y</p>\n\n<p>~zod:dojo> !(gth 5 6)\n%.y\n```</p>\n",
        "keys": [
            "?!"
        ]
    },
    {
        "doc": "<h2><code>!,</code> \"zapcom\"</h2>\n\n<p>Produce the Hoon AST of an expression.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !,  p<p>  q<p>  </pre> |\n| Wide | <pre>  !,(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zpcm p=hoon q=hoon]\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>This produces the <a href=\"/reference/hoon/stdlib/4o#hoon\"><code>$hoon</code></a> AST of\nexpression <code>q</code>. The first argument, <code>p</code>, is always an example of the <code>$hoon</code>\ntype, typically just the <code>*hoon</code> bunt value, and is used for type inference. The\nreason for <code>p</code> is just to handle transitions if the <code>$hoon</code> type changes.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!,  *hoon  [1 1]\n  [%cltr p=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>!,  *hoon  (add 1 1)\n  [%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!,"
        ]
    },
    {
        "doc": "<h2><code>!&gt;</code> \"zapgar\"</h2>\n\n<p>Wrap a noun in its type (form a <a href=\"/reference/hoon/stdlib/4o#vase\"><code>vase</code></a>).</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !>  p<p>  </pre> |\n| Wide | <pre>  !>(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zpgr p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>A cell whose tail is the product of <code>p</code>, and whose head is the static type of <code>p</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>In Hoon, a dynamic type is a static type compiled at runtime. This type-noun\ncell is generally called a <a href=\"/reference/hoon/stdlib/4o#vase\"><code>vase</code></a>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!>(1)\n  [#t/@ud q=1]\n  ```</p>\n</blockquote>\n\n<p>If you want just the type value, use a 'type spear'. This is <code>-:!&gt;</code>, i.e., the\nhead of the cell produced by <code>!&gt;</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>-:!>(1)</p>\n  \n  <h1>t/@ud</h1>\n</blockquote>\n\n<p>```</p>\n\n<hr />\n",
        "keys": [
            "!>"
        ]
    },
    {
        "doc": "<h2><code>!&lt;</code> \"zapgal\"</h2>\n\n<p>Extracts a <a href=\"/reference/hoon/stdlib/4o#vase\"><code>vase</code></a> to the given mold if\nits type nests.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !&lt;  p<p>  q<p>  </pre> |\n| Wide | <pre>  !&lt;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zpgl p=spec q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The value of vase <code>q</code> typed with the type of mold <code>p</code> if possible, else a\n<code>nest-fail</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>This is something like a partial inverse to the <code>!&gt;</code> rune and can be used to\nextract a typed value from a <code>vase</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!&lt;  @  !>  ~zod\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;  @p  !>  0\n  nest-fail</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;  tape  !>(\"foobar\")\n  \"foobar\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!<"
        ]
    },
    {
        "doc": "<h2><code>!;</code> \"zapmic\"</h2>\n\n<p>Wrap a noun in its type (raw).</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !;  p<p>  q<p>  </pre> |\n| Wide | <pre>  !;(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zpmc p=hoon q=hoon]\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>This wraps the product of <code>q</code> in its inferred type. It's a raw version of\n<a href=\"#-zapgar\"><code>!&gt;</code></a>. Unlike zapgar, <code>q</code> is not given a <code>p</code> face and its type\ninformation is not stripped to a raw noun.</p>\n\n<p>The first field, <code>p</code>, must be an example of the\n<a href=\"/reference/hoon/stdlib/4o#type\"><code>$type</code></a> type, typically just <code>*type</code> (the\nbunt of <code>$type</code>). The <code>p</code> argument is just so transitions can be handled if the\n<code>$type</code> type changes.</p>\n\n<p>It's unlikely you'd use this rune directly; <a href=\"#-zapgar\"><code>!&gt;</code></a> is much more\ntypical.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!;  *type  [1 1]\n  [#t/[@ud @ud] 1 1]</p>\n</blockquote>\n\n<blockquote>\n  <p>!;  *type  'foo'\n  [#t/@t 'foo']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!;"
        ]
    },
    {
        "doc": "<h2><code>!=</code> \"zaptis\"</h2>\n\n<p>Make the Nock formula for a Hoon expression.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !=  p<p>  </pre> |\n| Wide | <pre>  !=(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zpts p=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>The Nock generated by <code>p</code>.</p>\n\n<h4>Discussion</h4>\n\n<p>Don't confuse <code>!=</code> with a negation, <code>!</code>, followed by a test for equality, <code>=(10 11)</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!=(20)\n  [1 20]</p>\n</blockquote>\n\n<blockquote>\n  <p>!=(~zod)\n  [1 0]</p>\n</blockquote>\n\n<blockquote>\n  <p>!=((add 2 2))\n  [8 [9 3.110.356 0 31] 9 2 [0 4] [7 [0 3] 1 2 2] 0 11]\n  ```</p>\n</blockquote>\n\n<p>Don't confuse the <code>!=</code> rune with:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>!=(10 11)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>!=(10 10)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>The syntax difference is that a test for equality takes two subexpressions, and\nthe <code>!=</code> rune only one.</p>\n\n<hr />\n",
        "keys": [
            "!="
        ]
    },
    {
        "doc": "<h2><code>!?</code> \"zapwut\"</h2>\n\n<p>Restrict Hoon version.</p>\n\n<h4>Syntax</h4>\n\n<p>Two arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !?  p<p>  q<p>  </pre> |\n| Wide | <pre>  !?(p q)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zpwt p=$@(p=@ [p=@ q=@]) q=hoon]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>When <code>p</code> is an atom:</p>\n\n<ul>\n<li><code>q</code> if <code>p</code> \u2265 Hoon kelvin version, otherwise crash.</li>\n</ul>\n\n<p>When <code>p</code> is a cell:</p>\n\n<ul>\n<li><code>q</code>, if <code>p.p</code> \u2265 Hoon kelvin version \u2265 <code>q.p</code>, otherwise crash.</li>\n</ul>\n\n<p>(Versions count down; the current version is 140.)</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!?  [142 140]  (add 2 2)\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>!?  142  (add 2 2)\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>!?  64  (add 2 2)\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!?"
        ]
    },
    {
        "doc": "<h2><code>!@</code> \"zappat\"</h2>\n\n<p>Branch on whether a wing exists.</p>\n\n<h4>Syntax</h4>\n\n<p>Three arguments, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !@  p<p>    q<p>  r<p>  </pre> |\n| Wide | <pre>  !@(p q r)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zppt p=(list wing) q=hoon r=hoon]\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>p</code> is a wing reference like <code>foo</code>, <code>bar.foo</code>, etc. If <code>p</code> exists, <code>q</code>. If <code>p</code>\ndoes not exist, <code>r</code>. Essentially, this is like <code>?:</code> for wing existence.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foo 42</p>\n</blockquote>\n\n<blockquote>\n  <p>!@(foo 'exists' 'does not exist')\n  'exists'</p>\n</blockquote>\n\n<blockquote>\n  <p>!@(baz 'exists' 'does not exist')\n  'does not exist'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!@"
        ]
    },
    {
        "doc": "<h2><code>!!</code> \"zapzap\"</h2>\n\n<p>Crash.</p>\n\n<h4>Syntax</h4>\n\n<p>No arguments.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !!<p>  </pre> |\n| Wide | <pre><p>  !!<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>AST</h4>\n\n<p><code>hoon\n[%zpzp ~]\n</code></p>\n\n<h4>Produces</h4>\n\n<p>Nothing. Always crashes, with type <code>%void</code>.</p>\n\n<h4>Discussion</h4>\n\n<p><code>%void</code> nests in every other type, so you can stub out anything with <code>!!</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!!\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!!"
        ]
    },
    {
        "doc": "<h2><code>!:</code> \"zapcol\"</h2>\n\n<p>Turn on stack trace.</p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !:  p<p>  </pre> |\n| Wide | <pre>  !:(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>Produces</h4>\n\n<p>The product of <code>p</code> unless <code>p</code> crashes, in which case a stack trace is given.</p>\n\n<h4>Discussion</h4>\n\n<p><code>!:</code> is used to turn on a debugging stack trace option for any code you have in\n<code>p</code>.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>?:(=(0 1) 123 !!)\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>!:  ?:(=(0 1) 123 !!)\n  /~zod/base/~2022.4.2..08.54.53..07d7:&lt;[1 5].[1 22]&gt;\n  /~zod/base/~2022.4.2..08.54.53..07d7:&lt;[1 19].[1 21]&gt;\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!:"
        ]
    },
    {
        "doc": "<h2><code>!.</code> \"zapdot\"</h2>\n\n<p>Turn off stack trace for a subexpression <code>p</code></p>\n\n<h4>Syntax</h4>\n\n<p>One argument, fixed.</p>\n\n<p>| Form | Syntax |\n| :----: | :---: |\n| Tall | <pre>  !.  p<p>  </pre> |\n| Wide | <pre>  !.(p)<p>  </pre> |\n| Irregular | None. |</p>\n\n<h4>Produces</h4>\n\n<p>The product of <code>p</code>. If <code>p</code> crashes, no stack trace entries are given for that code.</p>\n\n<h4>Discussion</h4>\n\n<p><code>!.</code> is used to turn off a debugging stack trace option for any code you have in\n<code>p</code>. This rune can be embedded under a <code>!:</code> rune for inner loops of your code\nthat you don't want or need to trace. This is especially useful if a trace\noverflows the stack.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>%.(1 |=(a=@ ^-(@ ?:(=(a 10) !! $(a +(a))))))\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>!:  %.(1 |=(a=@ ^-(@ ?:(=(a 10) !! $(a +(a))))))\n  /~zod/base/~2022.4.2..08.56.45..5ecc:&lt;[1 5].[1 49]&gt;\n  /~zod/base/~2022.4.2..08.56.45..5ecc:&lt;[1 17].[1 47]&gt;\n  /~zod/base/~2022.4.2..08.56.45..5ecc:&lt;[1 22].[1 46]&gt;\n  ...skipping some lines...\n  /~zod/base/~2022.4.2..08.56.45..5ecc:&lt;[1 22].[1 46]&gt;\n  /~zod/base/~2022.4.2..08.56.45..5ecc:&lt;[1 33].[1 35]&gt;\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>!:  %.(1 !.(|=(a=@ ^-(@ ?:(=(a 10) !! $(a +(a)))))))\n  /~zod/base/~2022.4.2..08.57.07..d40b:&lt;[1 5].[1 53]&gt;\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "!."
        ]
    },
    {
        "doc": "<h2><code>+$wing</code></h2>\n\n<p>Search path</p>\n\n<p>Address in subject. A <code>$wing</code> is a path to a value in the subject. A\nterm alone is the trivial case of a <code>$wing</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  wing  (list limb)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ream 'a.+.c')\n  [%wing p=~[%a [%.y p=3] %c]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(wing +:(ream 'a.+.c'))\n  ~[%a [%.y p=3] %c]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$wing"
        ]
    },
    {
        "doc": "<h2><code>+$term</code></h2>\n\n<p>Hoon constant</p>\n\n<p>A restricted text atom for Hoon constants. The only characters permitted are\nlowercase ASCII letters, <code>-</code>, and <code>0-9</code>, the latter two of which cannot be the\nfirst character. The syntax for <code>@tas</code> is the text itself, always preceded by\n<code>%</code>. The empty <code>@tas</code> has a\nspecial syntax, <code>$</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  term  @tas\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*term\n  %$</p>\n</blockquote>\n\n<blockquote>\n  <p>*%term\n  %term</p>\n</blockquote>\n\n<blockquote>\n  <p>%dead-fish9\n  %dead-fish9</p>\n</blockquote>\n\n<blockquote>\n  <p>-:!>(%dead-fish9)</p>\n  \n  <h1>t/%dead-fish9</h1>\n</blockquote>\n\n<blockquote>\n  <p>-:!>(<code>@tas</code>%dead-fish9)</p>\n  \n  <h1>t/@tas</h1>\n</blockquote>\n\n<p>```</p>\n\n<hr />\n",
        "keys": [
            "$term"
        ]
    },
    {
        "doc": "<h2><code>+$knot</code></h2>\n\n<p>ASCII text</p>\n\n<p>An atom type that only permits ASCII characters.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  knot  @ta\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*knot\n  ~.</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ta</code>105\n  ~.i\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$knot"
        ]
    },
    {
        "doc": "<h2><code>+$cord</code></h2>\n\n<p>UTF-8 text</p>\n\n<p>One of Hoon's two string types (the other being <code>tape</code>). A cord is an\natom of UTF-8 text.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  cord  @t\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*cord\n  ''</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>'foobar'\n  0x7261.626f.6f66</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>97\n  'a'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@</code>'urbit'\n  499.984.265.845</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>499.984.265.845\n  'urbit'\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Aura <code>@t</code> designates a Unicode atom, little-endian: the first character\nin the text is the least-significant byte.</p>\n\n<p><a href=\"/reference/hoon/stdlib/4b#trip\"><code>trip</code></a> converts from <code>cord</code> to <code>tape</code>, and <a href=\"/reference/hoon/stdlib/4b#crip\"><code>crip</code></a> converts\nfrom <code>tape</code> to <code>cord</code>.</p>\n\n<hr />\n",
        "keys": [
            "$cord"
        ]
    },
    {
        "doc": "<h2><code>+$tape</code></h2>\n\n<p>List of characters</p>\n\n<p>One of Hoon's two string types, the other being <a href=\"#cord\"><code>+cord</code></a>. A tape is a list of <code>@tD</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tape  (list @tD)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*tape\n  \"\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>\"foobar\"\n  \"foobar\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(list @t)</code>\"foobar\"\n  &lt;|f o o b a r|&gt;</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(list @tD)</code>\"foobar\"\n  \"foobar\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(list @)</code>\"foobar\"\n  ~[102 111 111 98 97 114]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$tape"
        ]
    },
    {
        "doc": "<h2><code>--</code> \"hephep\"</h2>\n\n<h4>Syntax</h4>\n\n<p>The <code>--</code> rune is used to indicate the end of a core expression.</p>\n\n<h4>Discussion</h4>\n\n<p>The <code>|%</code>, <code>|_</code>, and <code>|^</code> runes are used to create cores that can have\narbitrarily many arms. When you have defined all the desired arms in a core\nexpression (using the <code>++</code>, <code>+$</code>, and <code>+*</code> runes), use <code>--</code> to terminate the\nexpression.</p>\n",
        "keys": [
            "--"
        ]
    },
    {
        "doc": "<h2><code>==</code> \"tistis\"</h2>\n\n<h4>Syntax</h4>\n\n<p>The <code>==</code> rune is used to indicate the end of a 'jogging' or 'running' series of\nHoon expressions (runes that take a variable number of arguments).</p>\n\n<h4>Discussion</h4>\n\n<p>Certain runes are used to create expressions that may include arbitrarily many\nsubexpressions. Such expressions are terminated with the <code>==</code> rune. For example,\nthe <code>:*</code> and <code>:~</code> runes are used to create a cell of any length. (The latter is\njust like the former except that it adds a null value at the end of the cell.)\nFor another example, the <code>%=</code> rune used used to make arbitrarily many changes to\na given wing value.</p>\n",
        "keys": [
            "=="
        ]
    },
    {
        "doc": "<h2><code>++add</code></h2>\n\n<p>Add</p>\n\n<p>Produces the sum of <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add\n  ~/  %add\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  =(0 a)  b\n  $(a (dec a), b +(b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add 2 2)\n  4\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add 1 1.000.000)\n  1.000.001\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add 1.333 (mul 2 2))\n  1.337\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add 'a' 4)\n  101\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add 'a' 'b')\n  195\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add 0xc 0xf)\n  27\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(add 0xc 0xf)\n  0x1b\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "add"
        ]
    },
    {
        "doc": "<h2><code>++dec</code></h2>\n\n<p>Decrement</p>\n\n<p>Decrements <code>a</code> by <code>1</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dec\n  ~/  %dec\n  |=  a=@\n  ~_  leaf+\"decrement-underflow\"\n  ?&lt;  =(0 a)\n  =+  b=0\n  |-  ^-  @\n  ?:  =(a +(b))  b\n  $(b +(b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dec 7)\n  6\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dec 0)\n  ! decrement-underflow\n  ! exit\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dec 'b')\n  97\n  <code>@t</code>(dec 'b')\n  'a'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dec 0xc)\n  11\n  <code>@ux</code>(dec 0xc)\n  0xb\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dec"
        ]
    },
    {
        "doc": "<h2><code>++div</code></h2>\n\n<p>Divide</p>\n\n<p>Computes <code>a</code> divided by <code>b</code> without remainder.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div\n  ~/  %div\n  |:  [a=`@`1 b=`@`1]\n  ^-  @\n  ~_  leaf+\"divide-by-zero\"\n  ?&lt;  =(0 b)\n  =+  c=0\n  |-\n  ?:  (lth a b)  c\n  $(a (sub a b), c +(c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div 4 2)\n  2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div 17 8)\n  2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div 20 30)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div 'ab' 'a')\n  259\n  <code>@</code>'ab'\n  25.185\n  <code>@</code>a\n  97\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div 0x9f 0x29)\n  6\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "div"
        ]
    },
    {
        "doc": "<h2><code>++dvr</code></h2>\n\n<p>Divide with remainder</p>\n\n<p>Computes <code>a</code> divided by <code>b</code>, producing the quotient and the remainder.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of <a href=\"/reference/glossary/atom\"><code>atoms</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dvr\n  ~/  %dvr\n  |=  [a=@ b=@]\n  ^-  [p=@ q=@]\n  [(div a b) (mod a b)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dvr 17 8)\n  [p=2 q=1]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dvr 17 6)\n  [p=2 q=5]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dvr 18 6)\n  [p=3 q=0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dvr 4 2)\n  [p=2 q=0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dvr 'ab 'a')\n  [p=259 q=62]\n  <code>@</code>'a'\n  97\n  <code>@</code>'ab'\n  25.185\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dvr"
        ]
    },
    {
        "doc": "<h2><code>++gte</code></h2>\n\n<p>Greater-than/equal</p>\n\n<p>Tests whether <code>a</code> is greater than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gte\n  ~/  %gte\n  |=  [a=@ b=@]\n  ^-  ?\n  !(lth a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte 100 10)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte 4 4)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte 3 4)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gte"
        ]
    },
    {
        "doc": "<h2><code>++gth</code></h2>\n\n<p>Greater-than</p>\n\n<p>Tests whether <code>a</code> is greater than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gth\n  ~/  %gth\n  |=  [a=@ b=@]\n  ^-  ?\n  !(lte a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth 'd' 'c')\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth ~h1 ~m61)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth 'steak' 'brisket')\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gth"
        ]
    },
    {
        "doc": "<h2><code>++lte</code></h2>\n\n<p>Less-than/equal</p>\n\n<p>Tests whether <code>a</code> is less than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lte\n  ~/  %lte\n  |=  [a=@ b=@]\n  |(=(a b) (lth a b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte 4 5)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte 5 4)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte 5 5)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte 0 0)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte 'a' 'b')\n  %.y\n  <code>@</code>'a'\n  97\n  <code>@</code>'b'\n  98\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte 'abraham' 'bob')\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte ~m61 ~h1)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lte"
        ]
    },
    {
        "doc": "<h2><code>++lth</code></h2>\n\n<p>Less-than</p>\n\n<p>Tests whether <code>a</code> is less than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth\n  ~/  %lth\n  |=  [a=@ b=@]\n  ^-  ?\n  ?&amp;  !=(a b)\n      |-\n      ?|  =(0 a)\n          ?&amp;  !=(0 b)\n              $(a (dec a), b (dec b))\n  ==  ==  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth 4 5)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth 5 4)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth 5 5)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth 5 0)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth 'a' 'b')\n  %.y\n  <code>@</code>'a'\n  97\n  <code>@</code>'b'\n  98\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth 'abraham' 'bob')\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lth"
        ]
    },
    {
        "doc": "<h2><code>++max</code></h2>\n\n<p>Maximum</p>\n\n<p>Computes the greater of <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  max\n  ~/  %max\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  (gth a b)  a\n  b\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(max 10 100)\n  100\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(max 10.443 9)\n  10.443\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(max 1 1)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(max 'abraham' 'bob')\n  30.787.873.400.840.801\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(max 'abraham' 'bob')\n  'abraham'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(max 'abraham' 'benjamin')\n  'benjamin'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@dr</code>(max ~m6 ~h1)\n  ~h1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(max 0xe1 0x1e)\n  0xe1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "max"
        ]
    },
    {
        "doc": "<h2><code>++min</code></h2>\n\n<p>Minimum</p>\n\n<p>Computes the lesser of <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  min\n  ~/  %min\n  |=  [a=@ b=@]\n  ^-  @\n  ?:  (lth a b)  a\n  b\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(min 10 100)\n  10\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(min 10.443 9)\n  9\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(min 1 1)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(min 'abraham' 'bob')\n  6.451.042\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(min 'abraham' 'bob')\n  'bob'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(min 'abraham' 'benjamin')\n  'abraham'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@dr</code>(min ~m6 ~h1)\n  ~m6\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "min"
        ]
    },
    {
        "doc": "<h2><code>++mod</code></h2>\n\n<p>Modulus</p>\n\n<p>Computes the remainder of dividing <code>a</code> by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mod\n  ~/  %mod\n  |:  [a=`@`1 b=`@`1]\n  ^-  @\n  +:(dvr a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mod 5 2)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mod 5 5)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mod 2 5)\n  2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mod 40 20)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@</code>'c'\n  99\n  <code>@</code>'a'\n  97\n  (mod 'c' 'a')\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mod"
        ]
    },
    {
        "doc": "<h2><code>++mul</code></h2>\n\n<p>Multiply</p>\n\n<p>Multiplies <code>a</code> by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mul\n  ~/  %mul\n  |:  [a=`@`1 b=`@`1]\n  ^-  @\n  =+  c=0\n  |-\n  ?:  =(0 a)  c\n  $(a (dec a), c (add b c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mul 3 4)\n  12\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mul 0 1)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@</code>'a'\n  97\n  <code>@</code>'b'\n  98\n  (mul 'a' 'b')\n  9.506\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(mul 0x1f 0xe)\n  0x1b2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mul"
        ]
    },
    {
        "doc": "<h2><code>++sub</code></h2>\n\n<p>Subtract</p>\n\n<p>Subtracts <code>b</code> from <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub\n  ~/  %sub\n  |=  [a=@ b=@]\n  ~_  leaf+\"subtract-underflow\"\n  ^-  @\n  ?:  =(0 b)  a\n  $(a (dec a), b (dec b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub 10 5)\n  5\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub 243 44)\n  199\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub 5 0)\n  5\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub 0 5)\n  ! subtract-underflow\n  ! exit\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub 'c' 'a')\n  2\n  <code>@</code>'c'\n  99\n  <code>@</code>'a'\n  97\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub 0x1f 0xe)\n  17\n  <code>@ux</code>(sub 0x1f 0xe)\n  0x11\n  ```</p>\n</blockquote>\n",
        "keys": [
            "sub"
        ]
    },
    {
        "doc": "<h2><code>++cap</code></h2>\n\n<p>Tree head</p>\n\n<p>Tests whether the tree address <code>a</code> is in the head or the tail of a <a href=\"/reference/glossary/noun\"><code>noun</code></a>.\nProduces the constant <a href=\"/reference/glossary/atom\"><code>atom</code></a> <code>%2</code> if it is within the head (subtree <code>+2</code>), or\nthe constant <a href=\"/reference/glossary/atom\"><code>atom</code></a> <code>%3</code> if it is within the tail (subtree <code>+3</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A constant <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cap\n  ~/  %cap\n  |=  a=@\n  ^-  ?(%2 %3)\n  ?-  a\n    %2        %2\n    %3        %3\n    ?(%0 %1)  !!\n    *         $(a (div a 2))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap 4)\n  %2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap 6)\n  %3\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap (add 10 9))\n  %2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap 1)    ::address '1' is in neither the head nor the tail\n  ! exit\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap 0x40))\n  %2\n  <code>@</code>0x40\n  64\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap 'a')\n  %3\n  <code>@</code>'a'\n  97\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cap"
        ]
    },
    {
        "doc": "<h2><code>++mas</code></h2>\n\n<p>Address within head/tail</p>\n\n<p>Computes the tree address of <a href=\"/reference/glossary/atom\"><code>atom</code></a> <code>a</code> within either the head (<code>+2</code>) or tail\n(<code>+3</code>) of a <a href=\"/reference/glossary/noun\"><code>noun</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mas\n  ~/  %mas\n  |=  a=@\n  ^-  @\n  ?-  a\n    ?(%2 %3)  1\n    ?(%0 %1)  !!\n    *         (add (mod a 2) (mul $(a (div a 2)) 2))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas 3)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas 4)\n  2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas 5)\n  3\n  (cap 5)    ::<code>(cap a)</code> computes whether address <code>a</code> is in the head or the tail\n  %2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas 7)\n  3\n  (cap 7)\n  %3\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas 11)\n  7\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas (mas 11))\n  3\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap (mas 6))\n  %3\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas 0)    ::address <code>0</code> is in neither the head nor the tail\n  ! exit\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mas 1)    ::address <code>1</code> is in neither the head nor the tail\n  ! exit\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>\n            1\n          /   \\\n         /     \\\n        2       3              &lt;--here are the head (`+2`) and the tail (`+3`)\n       / \\      /\\\n      4   5    6  7\n     /\\   /\\  /\\  /\\\n     (continues...)\n</code></p>\n\n<p>Running <code>(mas 7)</code> in the <a href=\"/reference/glossary/dojo\"><code>Dojo</code></a> will return <code>3</code>, because address <code>+3</code> is what\n<code>+7</code> now occupies. The tree below helps illustrate the relationship. With\nparentheses are <code>a</code> values (if <code>a</code> is in subtree <code>+3</code>), and without parentheses\nare the values returned with <code>(mas a)</code>.</p>\n\n<p><code>\n            1(3)                       ::new/(old) addresses\n           /    \\\n          2       3\n         (6)     (7)\n        / \\       /\\\n       /   \\     /  \\\n      4     5   6    7\n     (12) (13) (14) (15)\n    / \\    / \\ / \\   / \\\n       (continues...)\n</code></p>\n\n<p>Notice how the old values in the head (subtree <code>+2</code>) were not illustrated in\nthis case, because <code>+7</code> is within the tail (subtree <code>+3</code>).</p>\n\n<hr />\n",
        "keys": [
            "mas"
        ]
    },
    {
        "doc": "<h2><code>++peg</code></h2>\n\n<p>Address within address</p>\n\n<p>Computes the absolute address of <code>b</code>, a relative address within the subtree\n<code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<p><code>b</code> is an <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>An <a href=\"/reference/glossary/atom\"><code>atom</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  peg\n  ~/  %peg\n  |=  [a=@ b=@]\n  ?&lt;  =(0 a)\n  ^-  @\n  ?-  b\n    %1  a\n    %2  (mul a 2)\n    %3  +((mul a 2))\n    *   (add (mod b 2) (mul $(b (div b 2)) 2))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(peg 4 1)\n  4\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(peg 1 4)\n  4\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(peg 4 2)\n  8\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(peg 4 8)\n  32\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(peg 4 (peg 4 2))\n  32\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(peg 8 45)\n  269\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cap (peg 4 2))    ::<code>(cap a)</code> computes whether address <code>a</code> is in the head or the tail\n  %2\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>In other words, the subtree at address <code>a</code> is treated as a tree in its own\nright (starting with root <code>+1</code>, head <code>+2</code>, and tail <code>+3</code>). Relative address\n<code>b</code> is found with respect to <code>a</code>, and then its absolute address, within the\ngreater tree, is returned.</p>\n\n<p>Running <code>(peg 3 4)</code> in the <a href=\"/reference/glossary/dojo\"><code>Dojo</code></a>, for example, will return <code>12</code>. Looking at\na tree diagram makes it easy to see why.</p>\n\n<p><code>\n                 1\n              /     \\\n             /       \\\n            /         \\\n           2           3       &lt;- here is the subtree `+3`. The subtree address is `a` in `(peg a b)`\n          / \\         / \\\n         /   \\       /   \\\n        4     5     6     7\n       / \\   / \\   / \\   / \\\n      8  9  10 11 12 13 14  15\n     /\\  /\\ /\\ /\\ /\\ /\\ /\\  /\\\n         (continues...)\n</code></p>\n\n<p>When we consider subtree at address <code>+3</code> by itself, it has relative addresses\nthat are structured in the same way as its parent tree's absolute addresses.\nThe absolute addresses are given in parentheses in the diagram below.\nNotice how relative address <code>+4</code> is at the same position as absolute address\n<code>+12</code>.</p>\n\n<p><code>\n            1(3)                        ::new/(old) addresses\n           /    \\\n          2       3\n         (6)     (7)\n        / \\       /\\\n       /   \\     /  \\\n      4     5   6    7\n    (12) (13) (14)  (15)\n    / \\    / \\ / \\   / \\\n       (continues...)\n</code></p>\n\n<hr />\n",
        "keys": [
            "peg"
        ]
    },
    {
        "doc": "<h2><code>+$bite</code></h2>\n\n<p>Atom slice specifier.</p>\n\n<p>Either a single atom representing block size, or a cell containing a block size\nand an atom representing the number of blocks, called <code>step</code>. If <code>step</code> is not\nsupplied, it defaults to a value of 1.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    +$  bite  $@(bloq [=bloq =step])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```\n    ::  ++end gets the least significant bits of an atom.</p>\n\n<pre><code>&gt; (end [1 1] 255)\n3\n\n&gt; (end 1 255)\n3\n\n&gt; (end 3 255)\n255\n\n&gt; (end 3 65.535)\n255\n\n&gt; (end [3 2] 65.535)\n65.535\n\n&gt; (end [3 0] 65.535)\n0\n</code></pre>\n\n<p>```</p>\n",
        "keys": [
            "$bite"
        ]
    },
    {
        "doc": "<h2><code>+$bloq</code></h2>\n\n<p>Blocksize</p>\n\n<p><a href=\"/reference/glossary/atom\"><code>Atom</code></a> representing block size. A block of size <code>a</code> has a bitwidth of <code>2^a</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  bloq  @\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```\n    ::  ++met measures how many a-bloqs long an atom is.</p>\n\n<pre><code>&gt; (met 3 256)\n2\n\n&gt; (met 3 255)\n1\n\n&gt; (met 3 65.535)\n2\n\n&gt; (met 2 65.536)\n&gt; 3\n\n&gt; (met 0 4)\n3\n\n&gt; (met 1 4)\n2\n\n&gt; (met 5 9.999.999.999)\n2\n\n&gt; (met 2 0xb5)\n2\n</code></pre>\n\n<p>```</p>\n\n<h4>Discussion</h4>\n\n<p>You can think of <code>bloq</code> as a numeral system that can represent values of\n<code>a^2^2</code>, where <code>a</code> is the block size. That's because a block of size\n<code>a</code> contains <code>a^2</code> bits, and a binary number that is <code>b</code> bits wide can represent\n<code>b^2</code> values.</p>\n\n<p>A <code>bloq</code> of 0 has a bitwidth of 1. (2^0 bits; can represent 2 values.)</p>\n\n<p>A <code>bloq</code> of 1 has a bitwidth of 2. (2^1 bits; can represent 4 values.)</p>\n\n<p>A <code>bloq</code> of 2 has a bitwidth of 4. (2^2 bits; can represent 16 values.)</p>\n\n<p>A <code>bloq</code> of 3 has a bitwidth of 8. (2^3 bits; can represent 256 values.)</p>\n\n<p>And so on.</p>\n\n<p>See the <a href=\"/reference/hoon/stdlib/2c\">bit arithmetic</a> section for operations that use <code>bloq</code>s.</p>\n\n<hr />\n",
        "keys": [
            "$bloq"
        ]
    },
    {
        "doc": "<h2><code>++each</code></h2>\n\n<p>Mold of fork between two types</p>\n\n<p>A mold generator. Produces a discriminated fork between two types, defaulting to\n<code>this</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  each\n  |$  [this that]\n  $%  [%| p=that]\n      [%&amp; p=this]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>? *(each cord time)\n    ?([%.y p=@t] [%.n p=@da])\n  [%.y p='']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>? <em>(each * tape)\n    ?([%.y p=</em>] [%.n p=\"\"])\n  [%.y p=0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "each"
        ]
    },
    {
        "doc": "<h2><code>++gate</code></h2>\n\n<p>Function</p>\n\n<p>A <a href=\"/reference/glossary/core\"><code>core</code></a> with one arm, <code>$</code>--the empty name--which transforms a sample noun into a\nproduct noun. If used dryly as a type, the subject must have a sample type of\n<code>*</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  gate\n      $-(* *)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>? gate\n    &lt;1.ddq [* &lt;46.hgz 1.pnw %140>]&gt;\n  &lt;1.ddq [* &lt;46.hgz 1.pnw %140>]&gt;\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(<code>gate</code>|=(a=* [a 'b']) 1)\n  [1 98]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(<code>gate</code>|=(a=@ [a 'b']) 1)\n  mint-nice\n  -need.@\n  -have.*\n  nest-fail\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>A <code>gate</code> is analogous to a function in other programming languages. We created\nthis new jargon because other constructs in Urbit are \"functions\" in the\nmathematical sense. Any <code>gate</code> normalizes to an iron <code>gate</code>.</p>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2a#lift\"><code>++lift</code></a>, <a href=\"/reference/hoon/stdlib/2n#cork\"><code>++cork</code></a></p>\n\n<hr />\n",
        "keys": [
            "gate"
        ]
    },
    {
        "doc": "<h2><code>++list</code></h2>\n\n<p>List</p>\n\n<p>A mold generator. Generates a mold of a null-terminated list of a\nhomogenous type.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  list\n  |$  [item]\n  $@(~ [i=item t=(list item)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(list)\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(list @)</code>\"abc\"\n  ~[97 98 99]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(snag 0 \"abc\")\n  'a'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(list @)</code>[1 2 'j' ~]\n  ~[1 2 106]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2b#turn\"><code>++turn</code></a>, <a href=\"/reference/hoon/stdlib/2b#snag\"><code>++snag</code></a></p>\n\n<hr />\n",
        "keys": [
            "list"
        ]
    },
    {
        "doc": "<h2><code>++lone</code></h2>\n\n<p>Face on mold</p>\n\n<p>A mold generator. Puts face of <code>p</code> on the passed-in mold.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lone\n  |$  [item]\n  p=item\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>? *cord\n  @t\n  ''\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>? *(lone cord)\n    p=@t\n  p=''\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>? *(lone @)\n    p=@\n  p=0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>? *@\n    @\n  0\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lone"
        ]
    },
    {
        "doc": "<h2><code>++pair</code></h2>\n\n<p>Mold of pair of types</p>\n\n<p>A mold generator. Produces a tuple of two of the types passed in.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pair\n  |$  [head tail]\n  [p=head q=tail]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(pair ? cord)\n  [p=%.y q='']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(pair tape @)\n  [p=\"\" q=0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pair"
        ]
    },
    {
        "doc": "<h2><code>++pole</code></h2>\n\n<p>Faceless <a href=\"/reference/hoon/stdlib/1c#list\"><code>list</code></a></p>\n\n<p>A mold generator. A <a href=\"/reference/hoon/stdlib/1c#list\"><code>list</code></a> without the faces <code>i</code> and <code>t</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pole\n  |$  [item]\n  $@(~ [item (pole item)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=/(a \"asdf\" ?>(?=(^ a) <code>(lest @tD)</code>a))\n  [i='a' t=[i='s' t=[i='d' t=[i='f' t=~]]]]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(pole char)</code>\"asdf\"\n  ['a' ['s' ['d' ['f' ~]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pole"
        ]
    },
    {
        "doc": "<h2><code>++qual</code></h2>\n\n<p>Mold of 4-type tuple</p>\n\n<p>A mold generator. Produces a tuple of four of the types passed in.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qual\n  |$  [first second third fourth]\n  [p=first q=second r=third s=fourth]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(qual date time tape cord)\n  [p=[[a=%.y y=0] m=0 t=[d=0 h=0 m=0 s=0 f=~]] q=~2000.1.1 r=\"\" s='']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(qual (list @) @u @ud @ux)\n  [p=~ q=0 r=0 s=0x0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "qual"
        ]
    },
    {
        "doc": "<h2><code>++quip</code></h2>\n\n<p>Mold of pair of <a href=\"/reference/hoon/stdlib/1c#list\"><code>list</code></a> and type</p>\n\n<p>A mold generator. Produces a tuple of a <a href=\"/reference/hoon/stdlib/1c#list\"><code>list</code></a> of <code>item</code> and the mold of <code>state</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  quip\n  |$  [item state]\n  [(list item) state]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(quip @ _'hi')\n  [~ 'hi']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(quip @ @ux)</code>[[1 2 3 4 ~] 0x10]\n  [~[1 2 3 4] 0x10]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>A common pattern in Hoon code is to return a <code>list</code> of changes, along with a\nnew state. You'll often see <code>quip</code> used in Gall apps.</p>\n\n<hr />\n",
        "keys": [
            "quip"
        ]
    },
    {
        "doc": "<h2><code>++step</code></h2>\n\n<p>Atom size or offset, in <a href=\"#bloq\">bloq</a>s.</p>\n\n<h4>Source</h4>\n\n<p><code>\n++  step\n  _`@u`1\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>step</code>0\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>step</code>2\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "step"
        ]
    },
    {
        "doc": "<h2><code>++trap</code></h2>\n\n<p><a href=\"/reference/glossary/core\"><code>Core</code></a> with one arm <code>$</code></p>\n\n<p>A trap is a <a href=\"/reference/glossary/core\"><code>core</code></a> with one arm <code>$</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  trap\n  |$  [product]\n  _|?($:product)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(<em>trap)\n  &lt;1?ruo 1.mhl [product=&lt;1|xpg [</em> * *]&gt; &lt;46.hgz 1.pnw %140>]&gt;\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><em>(</em>trap)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(|.(42))\n  42\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "trap"
        ]
    },
    {
        "doc": "<h2><code>++tree</code></h2>\n\n<p>Tree mold generator</p>\n\n<p>A mold generator. A <code>tree</code> can be empty, or contain a node of a type and\nleft/right sub <code>tree</code> of the same type. Pretty-printed with <code>{}</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tree\n  |$  [node]\n  $@(~ [n=node l=(tree node) r=(tree node)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(tree [@ tape])</code>[[1 \"hi\"] [[2 \"bye\"] ~ ~] ~]\n  {[2 \"bye\"] [1 \"hi\"]}\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tree"
        ]
    },
    {
        "doc": "<h2><code>++trel</code></h2>\n\n<p>Mold of three types</p>\n\n<p>A mold generator. A mold of the tuple of the three types passed in.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  trel\n  |$  [first second third]\n  [p=first q=second r=third]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(trel @ud @t @s)\n  [p=0 q='' r=--0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(trel cord bloq tape)\n  [p='' q=0 r=\"\"]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "trel"
        ]
    },
    {
        "doc": "<h2><code>++unit</code></h2>\n\n<p>Maybe</p>\n\n<p>A mold generator. A <code>unit</code> is either <code>~</code> or <code>[~ u=item]</code>, where <code>item</code> is the\ntype that was passed in.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  unit\n  |$  [item]\n  $@(~ [~ u=item])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>? *(unit time)\n    u(@da)\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=  a=@\n    ^-  (unit @)\n    ?~  a  ~\n    [~ a]\n  (a 2)\n  [~ 2]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Using a <code>unit</code> allows you to specify something that may not be there.</p>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2a#bind\"><code>++bind</code></a></p>\n\n<hr />\n",
        "keys": [
            "unit"
        ]
    },
    {
        "doc": "<h2><code>++biff</code></h2>\n\n<p><a href=\"/reference/hoon/stdlib/1c#unit\"><code>Unit</code></a> as argument</p>\n\n<p>Applies a function <code>b</code> that produces a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> to the unwrapped value of <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>\n<code>a</code> (<code>u.a</code>). If <code>a</code> is empty, <code>~</code> is produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p><code>b</code> is a function that accepts a <a href=\"/reference/glossary/noun\"><code>noun</code></a> and produces a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  biff\n  |*  [a=(unit) b=$-(* (unit))]\n  ?~  a  ~\n  (b u.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(biff (some 5) |=(a=@ (some (add a 2))))\n  [~ u=7]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(biff ~ |=(a=@ (some (add a 2))))\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "biff"
        ]
    },
    {
        "doc": "<h2><code>++bind</code></h2>\n\n<p>Non-unit function to <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>, producing <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a></p>\n\n<p>Applies a function <code>b</code> to the value (<code>u.a</code>) of a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> <code>a</code>, producing\na <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>. Used when you want a function that does not accept or produce a\n<a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> to both accept and produce a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p><code>b</code> is a function.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bind\n  |*  [a=(unit) b=gate]\n  ?~  a  ~\n  [~ u=(b u.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bind ((unit @) [~ 97]) ,@t)\n  [~ u='a']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (add a 1))\n  (bind ((unit @) [~ 2]) a)\n  [~ u=3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bind"
        ]
    },
    {
        "doc": "<h2><code>++bond</code></h2>\n\n<p>Replace null</p>\n\n<p>Replaces an empty <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> <code>b</code> with the product of a called <a href=\"/reference/glossary/trap\"><code>trap</code></a>\n<code>a</code>. If the <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> is not empty, then the original <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> is produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/glossary/trap\"><code>trap</code></a>.</p>\n\n<p><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>Either the product of <code>a</code> or the value inside of <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> <code>b</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bond\n  |*  a=(trap)\n  |*  b=(unit)\n  ?~  b  $:a\n  u.b\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bex 10)\n      1.024\n  ((bond |.((bex 10))) ~)\n      1.024\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>((bond |.((bex 10))) (slaw %ud '123'))\n      123\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bond"
        ]
    },
    {
        "doc": "<h2><code>++both</code></h2>\n\n<p>Group <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> values into pair</p>\n\n<p>Produces <code>~</code> if either <code>a</code> or <code>b</code> are empty. Otherwise, produces a\n<a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> whose value is a cell of the values of two input <a href=\"/reference/hoon/stdlib/1c#unit\"><code>units</code></a> <code>a</code> and\n<code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> of the two initial values.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  both\n  |*  [a=(unit) b=(unit)]\n  ?~  a  ~\n  ?~  b  ~\n  [~ u=[u.a u.b]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(both (some 1) (some %b))\n  [~ u=[1 %b]]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(both ~ (some %b))\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "both"
        ]
    },
    {
        "doc": "<h2><code>++clap</code></h2>\n\n<p>Combine two <a href=\"/reference/hoon/stdlib/1c#unit\"><code>units</code></a> with function</p>\n\n<p>Applies a binary function <code>c</code>--which does not usually accept or produce a\n<a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>-- to the values of two <a href=\"/reference/hoon/stdlib/1c#unit\"><code>units</code></a>, <code>a</code> and <code>b</code>, producing a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p>If <code>a</code> is null, produces <code>b</code>. If <code>b</code> is null, produces <code>a</code>. Otherwise, produces the produce of <code>c</code> in a <code>unit</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p><code>c</code> is a function that performs a binary operation.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  clap\n  |*  [a=(unit) b=(unit) c=_=&gt;(~ |=(^ +&lt;-))]\n  ?~  a  b\n  ?~  b  a\n  [~ u=(c u.a u.b)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(clap ~ <code>'b' |=([a=@tD b=@tD]</code>tape`[a b ~]))\n  [~ u='b']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(clap <code>'a' ~ |=([a=@tD b=@tD]</code>tape`[a b ~]))\n  [~ u='a']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(clap <code>'a'</code>'b' |=([a=@tD b=@tD] <code>tape</code>[a b ~]))\n  [~ u=\"ab\"]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "clap"
        ]
    },
    {
        "doc": "<h2><code>++clef</code></h2>\n\n<p>Compose two <a href=\"/reference/hoon/stdlib/1c#unit\"><code>units</code></a> with function</p>\n\n<p>Applies a binary function <code>c</code>--which does not usually accept <a href=\"/reference/hoon/stdlib/1c#unit\"><code>units</code></a>-- to the values of two <a href=\"/reference/hoon/stdlib/1c#unit\"><code>units</code></a>, <code>a</code> and <code>b</code>, producing a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p>If <code>a</code> or <code>b</code> are null, produces null. Otherwise, produces the produce of <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>unit</code>.</p>\n\n<p><code>b</code> is a <code>unit</code>.</p>\n\n<p><code>c</code> is a <code>gate</code> that takes a <code>cell</code> and produces a <code>unit</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  clef\n  |*  [a=(unit) b=(unit) c=_=&gt;(~ |=(^ `+&lt;-))]\n  ?~  a  ~\n  ?~  b  ~\n  (c u.a u.b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(clef ~ <code>'b' |=([a=@tD b=@tD]</code>(unit tape)`[~ [a b ~]]))\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(clef <code>'a' ~ |=([a=@tD b=@tD]</code>(unit tape)`[~ [a b ~]]))\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(clef <code>'a'</code>'b' |=([a=@tD b=@tD] <code>(unit tape)</code>[~ [a b ~]]))\n  [~ \"ab\"]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "clef"
        ]
    },
    {
        "doc": "<h2><code>++drop</code></h2>\n\n<p><a href=\"/reference/hoon/stdlib/1c#unit\"><code>Unit</code></a> to list</p>\n\n<p>Makes a <a href=\"/reference/hoon/stdlib/1c#list\"><code>++list</code></a> of the unwrapped value (<code>u.a</code>) of a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drop\n  |*  a=(unit)\n  ?~  a  ~\n  [i=u.a t=~]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit @) [~ 97])\n  (drop a)\n  [i=97 t=~]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit @) [~])\n  (drop a)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "drop"
        ]
    },
    {
        "doc": "<h2><code>++fall</code></h2>\n\n<p>Give <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> a default value</p>\n\n<p>Produces a default value <code>b</code> for a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> <code>a</code> in cases where <code>a</code> is null.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p><code>b</code> is a <a href=\"/reference/glossary/noun\"><code>noun</code></a> that's used as the default value.</p>\n\n<h4>Produces</h4>\n\n<p>Either a <a href=\"/reference/glossary/noun\"><code>noun</code></a> <code>b</code> or the unwrapped value of <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> <code>a</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fall\n  |*  [a=(unit) b=*]\n  ?~(a b u.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fall ~ 'a')\n  'a'\n  (fall [~ u=0] 'a')\n  0\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fall"
        ]
    },
    {
        "doc": "<h2><code>++flit</code></h2>\n\n<p>Make filter</p>\n\n<p>Accepts gate <code>a</code> which produces a <code>?</code>. Applies <code>a</code> to <code>b</code>, producing <code>b</code> wrapped in a <code>unit</code> if true, otherwise produces null.</p>\n\n<p><code>+flit</code> is a wet gate that takes <code>a</code> and produces a new wet gate that takes <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>gate</code> which produces <code>?</code>, and is the sample of the outer wet gate.</p>\n\n<p><code>b</code> is any <code>noun</code>, and is the sample of the inner wet gate.</p>\n\n<h4>Produces</h4>\n\n<p><code>(unit [type])</code>, where <code>[type]</code> is the type of <code>b</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  flit\n  |*  a=$-(* ?)\n  |*  b=*\n  ?.((a b) ~ [~ u=b])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=f (flit |=(=@ud ?:(=(ud 1) %.y %.n)))\n  (f 1)\n  [~ 1]\n  (f 2)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "flit"
        ]
    },
    {
        "doc": "<h2><code>++hunt</code></h2>\n\n<p>First of units</p>\n\n<p>Apply binary gate <code>ord</code>, which produces a <code>?</code>, to units <code>a</code> and <code>b</code>. Produce <code>a</code> if true and <code>b</code> if false. If <code>a</code> is null, produce <code>b</code>. If <code>b</code> is null, produce <code>a</code>.</p>\n\n<p>This allows selecting between two units by some rule.</p>\n\n<h4>Accepts</h4>\n\n<p><code>ord</code> is a <code>$-(^ ?)</code> - a binary gate that produces <code>?</code>.</p>\n\n<p><code>a</code> is a <code>unit</code>.</p>\n\n<p><code>b</code> is a <code>unit</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hunt\n  |*  [ord=$-(^ ?) a=(unit) b=(unit)]\n  ^-  %-  unit\n      $?  _?&gt;(?=(^ a) u.a)\n          _?&gt;(?=(^ b) u.b)\n      ==\n  ?~  a  b\n  ?~  b  a\n  ?:((ord u.a u.b) a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(hunt gte ~ `20)\n  [~ 20]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(hunt gte `10 ~)\n  [~ 10]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(hunt gte <code>10</code>20)\n  [~ 20]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "hunt"
        ]
    },
    {
        "doc": "<h2><code>++lift</code></h2>\n\n<p>Curried bind</p>\n\n<p>Accepts function <code>a</code> and produces a function that accepts <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>\n<code>b</code> to which it applies <code>a</code>. Used when you want a function that does not accept\nor produce a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> to both accept and produce a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>mold</code>.</p>\n\n<p><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lift\n  |*  a=mold\n  |*  b=(unit)\n  (bind b a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((lift dec) <code>(unit @)</code>~)\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>((lift dec) <code>(unit @)</code>[~ 20])\n  [~ 19]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lift"
        ]
    },
    {
        "doc": "<h2><code>++mate</code></h2>\n\n<p>Choose</p>\n\n<p>Accepts two <a href=\"/reference/hoon/stdlib/1c#unit\"><code>units</code></a> <code>a</code> and <code>b</code> whose values are expected to be\nequivalent. If either is empty, then the value of the other is produced.\nIf neither are empty, it asserts that both values are the same and\nproduces that value. If the assertion fails, <code>++mate</code> crashes with\n<code>'mate'</code> in the stack trace.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<p><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> or crash.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mate\n  |*  [a=(unit) b=(unit)]\n  ?~  b  a\n  ?~  a  b\n  ?.(=(u.a u.b) ~&gt;(%mean.'mate' !!) a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit @) [~ 97])\n  =b ((unit @) [~ 97])\n  (mate a b)\n  [~ 97]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit @) [~ 97])\n  =b ((unit @) [~])\n  (mate a b)\n  [~ 97]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit @) [~ 97])\n  =b ((unit @) [~ 98])\n  (mate a b)\n  ! 'mate'\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mate"
        ]
    },
    {
        "doc": "<h2><code>++need</code></h2>\n\n<p>Unwrap <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a></p>\n\n<p>Retrieve the value from a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> and crash if the <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> is null.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>Either the unwrapped value of <code>a</code> (<code>u.a</code>), or crash.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  need\n  ~/  %need\n  |*  a=(unit)\n  ?~  a  ~&gt;(%mean.'need' !!)\n  u.a\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit [@t @t]) [~ ['a' 'b']])\n  (need a)\n  ['a' 'b']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit @ud) [~ 17])\n  (need a)\n  17\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a ((unit @) [~])\n  (need a)\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "need"
        ]
    },
    {
        "doc": "<h2><code>++some</code></h2>\n\n<p>Wrap value in a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a></p>\n\n<p>Takes any <a href=\"/reference/glossary/noun\"><code>noun</code></a> <code>a</code> and produces a <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a> with the value set to <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/glossary/noun\"><code>noun</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A <a href=\"/reference/hoon/stdlib/1c#unit\"><code>unit</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  some\n  |*  a=*\n  [~ u=a]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(some ['a' 'b'])\n  [~ u=['a' 'b']]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(some &amp;)\n  [~ u=%.y]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "some"
        ]
    },
    {
        "doc": "<h2><code>++bake</code></h2>\n\n<p><strong>Note:</strong> This function isn't specifically a list function but is included in section 2b of the standard library so is documented here for completeness.</p>\n\n<p>Convert wet gate <code>f</code> to a dry gate by specifying argument mold <code>a</code>.</p>\n\n<p><code>+bake</code> is a wet gate that takes a wet gate and produces a dry gate.</p>\n\n<h4>Accepts</h4>\n\n<p><code>f</code> is a <code>gate</code>.</p>\n\n<p><code>a</code> is a <code>mold</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A dry <code>gate</code> whose sample type is <code>a</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bake\n  |*  [f=gate a=mold]\n  |=  arg=a\n  (f arg)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=wet-gate |<em>(a=</em> [a a])\n  (wet-gate 42)\n  [42 42]\n  (wet-gate ['foo' 'bar'])\n  [['foo' 'bar'] 'foo' 'bar']\n  =dry-gate (bake wet-gate @ud)\n  (dry-gate 42)\n  [42 42]\n  (dry-gate ['foo' 'bar'])\n  -need.@ud\n  -have.[@t @t]\n  nest-fail\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bake"
        ]
    },
    {
        "doc": "<h2><code>++fand</code></h2>\n\n<p>All indices in <code>list</code></p>\n\n<p>Produces the indices of all occurrences of <code>nedl</code> in <code>hstk</code> as a <code>list</code> of\natoms.</p>\n\n<h4>Accepts</h4>\n\n<p><code>nedl</code> is a list.</p>\n\n<p><code>hstk</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fand\n  ~/  %fand\n  |=  [nedl=(list) hstk=(list)]\n  =|  i=@ud\n  =|  fnd=(list @ud)\n  |-  ^+  fnd\n  =+  [n=nedl h=hstk]\n  |-\n  ?:  |(?=(~ n) ?=(~ h))\n    (flop fnd)\n  ?:  =(i.n i.h)\n    ?~  t.n\n      ^$(i +(i), hstk +.hstk, fnd [i fnd])\n    $(n t.n, h t.h)\n  ^$(i +(i), hstk +.hstk)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fand ~[3] ~[1 2 3])\n  ~[2]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fand ~[4] ~[1 2 3])\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fand ~['a'] \"cbabab\")\n  ~[2 4]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fand \"ba\" \"cbabab\")\n  ~[1 3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fand"
        ]
    },
    {
        "doc": "<h2><code>++find</code></h2>\n\n<p>First index in <code>list</code></p>\n\n<p>Produces the index of the first occurrence of <code>nedl</code> in <code>hstk</code> as the <code>unit</code>\nof an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>nedl</code> is a list.</p>\n\n<p><code>hstk</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>The <code>unit</code> of an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  find\n  ~/  %find\n  |=  [nedl=(list) hstk=(list)]\n  =|  i=@ud\n  |-   ^-  (unit @ud)\n  =+  [n=nedl h=hstk]\n  |-\n  ?:  |(?=(~ n) ?=(~ h))\n     ~\n  ?:  =(i.n i.h)\n    ?~  t.n\n      `i\n    $(n t.n, h t.h)\n  ^$(i +(i), hstk +.hstk)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(find [3]~ ~[1 2 3])\n  [~ u=2]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(find [4]~ ~[1 2 3])\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(find ['c']~ \"cbabab\")\n  [~ u=0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(find \"ab\" \"cbabab\")\n  [~ u=2]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(find \"bab\" \"cbabab\")\n  [~ u=1]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "find"
        ]
    },
    {
        "doc": "<h2><code>++flop</code></h2>\n\n<p>Reverse</p>\n\n<p>Produces the <code>list</code> <code>a</code> in reverse order.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>list</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  flop\n  ~/  %flop\n  |*  a=(list)\n  =&gt;  .(a (homo a))\n  ^+  a\n  =+  b=`_a`~\n  |-\n  ?~  a  b\n  $(a t.a, b [i.a b])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a [1 2 3 ~]\n  (flop a)\n  ~[3 2 1]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(flop (flop a))\n  ~[1 2 3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "flop"
        ]
    },
    {
        "doc": "<h2><code>++gulf</code></h2>\n\n<p>List from range</p>\n\n<p>Produces a <code>list</code> composed of each consecutive integer starting from <code>a</code> and\nending with <code>b</code>. <code>a</code> and <code>b</code> are themselves included.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>a <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gulf\n  |=  [a=@ b=@]\n  ?&gt;  (lte a b)\n  |-  ^-  (list @)\n  ?:(=(a +(b)) ~ [a $(a +(a))])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gulf 1 6)\n  ~[1 2 3 4 5 6]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(list @t)</code>(gulf 99 106)\n  &lt;|c d e f g h i j|&gt;\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gulf"
        ]
    },
    {
        "doc": "<h2><code>++homo</code></h2>\n\n<p>Homogenize</p>\n\n<p>Produces a <code>list</code> whose type is a fork of all the contained types in the\nlist <code>a</code>. Used when you want to make all the types of the elements of a list the\nsame.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>list</code>.</p>\n\n<h4>Produces</h4>\n\n<p>a <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  homo\n  |*  a=(list)\n  ^+  =&lt;  $\n    |@  ++  $  ?:(*? ~ [i=(snag 0 a) t=$])\n    --\n  a\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>lyst\n  [i=1 t=[i=97 t=[i=2 t=[i=98 t=[i=[~ u=10] t=~]]]]]\n  (homo lyst)\n  ~[1 97 2 98 [~ u=10]]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (limo [1 2 3 ~])\n  a\n  [i=1 t=[i=2 t=[i=3 t=~]]]\n  (homo a)\n  ~[1 2 3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "homo"
        ]
    },
    {
        "doc": "<h2><code>++into</code></h2>\n\n<p>Insert item at index</p>\n\n<p>Accepts a <code>list</code> <code>a</code>, an atom <code>b</code>, and a noun <code>c</code>, producing the list of <code>a</code> with the item <code>c</code> inserted at index <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a atom.</p>\n\n<p><code>c</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>the list of <code>a</code> with the item <code>c</code> inserted at index <code>b</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  into\n  ~/  %into\n  |*  [a=(list) b=@ c=*]\n  ^+  a\n  (weld (scag b a) [c (slag b a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(into (limo ~[2 3 4]) 1 11)\n  ~[2 11 3 4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "into"
        ]
    },
    {
        "doc": "<h2><code>++join</code></h2>\n\n<p>Constructs a new <code>list</code>, placing <code>sep</code> between every element of <code>lit</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sep</code> is a <code>noun</code>.</p>\n\n<p><code>lit</code> is a <code>list</code>.</p>\n\n<h4>Produces</h4>\n\n<p>a <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  join\n  |*  [sep=* lit=(list)]\n  =.  sep  `_?&gt;(?=(^ lit) i.lit)`sep\n  ?~  lit  ~\n  =|  out=(list _?&gt;(?=(^ lit) i.lit))\n  |-  ^+  out\n  ?~  t.lit\n    (flop [i.lit out])\n  $(out [sep i.lit out], lit t.lit)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(join ' ' \"hoon\")\n  \"h o o n\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(join 0 <code>(list @)</code>~[1 2 3])\n  ~[1 0 2 0 3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "join"
        ]
    },
    {
        "doc": "<h2><code>++lent</code></h2>\n\n<p>List length</p>\n\n<p>Produces the length of any <code>list</code> <code>a</code> as an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>list</code>.</p>\n\n<h4>Produces</h4>\n\n<p>an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lent\n  ~/  %lent\n  |=  a=(list)\n  ^-  @\n  =+  b=0\n  |-\n  ?~  a  b\n  $(a t.a, b +(b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lent [1 2 3 4 ~]))\n  4\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lent [1 'a' 2 'b' (some 10) ~])\n  5\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lent"
        ]
    },
    {
        "doc": "<h2><code>++levy</code></h2>\n\n<p>Logical \"and\" on list</p>\n\n<p>Computes the Boolean logical \"and\" on the results of gate <code>b</code> applied to each individual element in <code>list</code> <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A boolean.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  levy\n  ~/  %levy\n  |*  [a=(list) b=$-(* ?)]\n  |-  ^-  ?\n  ?~  a  &amp;\n  ?.  (b i.a)  |\n  $(a t.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (lte a 1))\n  (levy <code>(list @)</code>[0 1 2 1 ~] a)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (lte a 3))\n  (levy <code>(list @)</code>[0 1 2 1 ~] a)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "levy"
        ]
    },
    {
        "doc": "<h2><code>++lien</code></h2>\n\n<p>Logical \"or\" on list</p>\n\n<p>Computes the Boolean logical \"or\" on the results of applying <code>gate</code> <code>b</code> to\nevery element of <code>++list</code> <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lien\n  ~/  %lien\n  |*  [a=(list) b=$-(* ?)]\n  |-  ^-  ?\n  ?~  a  |\n  ?:  (b i.a)  &amp;\n  $(a t.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (gte a 1))\n  (lien <code>(list @)</code>[0 1 2 1 ~] a)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (gte a 3))\n  (lien <code>(list @)</code>[0 1 2 1 ~]) a)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lien"
        ]
    },
    {
        "doc": "<h2><code>++limo</code></h2>\n\n<p>List Constructor</p>\n\n<p>Turns a null-terminated tuple into a <code>list</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a null-terminated tuple.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>++list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  limo\n  |*  a=*\n  ^+  =&lt;  $\n    |@  ++  $  ?~(a ~ ?:(*? [i=-.a t=$] $(a +.a)))\n    --\n  a\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(limo [1 2 3 ~])\n  [i=1 t=[i=2 t=[i=3 t=~]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "limo"
        ]
    },
    {
        "doc": "<h2><code>++murn</code></h2>\n\n<p>Maybe transform</p>\n\n<p>Passes each member of <code>list</code> <code>a</code> to gate <code>b</code>, which must produce a\n<code>unit</code>. Produces a new list with all the results that do not produce\n<code>~</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate that produces a unit.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  murn\n  ~/  %murn\n  |*  [a=(list) b=$-(* (unit))]\n  =&gt;  .(a (homo a))\n  |-  ^-  (list _?&gt;(?=(^ a) (need (b i.a))))\n  ?~  a  ~\n  =/  c  (b i.a)\n  ?~  c  $(a t.a)\n  [+.c $(a t.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ ?.((gte a 2) ~ (some (add a 10))))\n  (murn <code>(list @)</code>[0 1 2 3 ~] a)\n  [i=12 t=[i=13 t=~]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "murn"
        ]
    },
    {
        "doc": "<h2><code>++oust</code></h2>\n\n<p>Remove</p>\n\n<p>Removes elements from list <code>c</code> beginning at inclusive index <code>a</code>, removing <code>b</code>\nnumber of elements.</p>\n\n<h4>Accepts</h4>\n\n<p><code>c</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>++list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  oust\n  ~/  %oust\n  |*  [[a=@ b=@] c=(list)]\n  (weld (scag +&lt;-&lt; c) (slag (add +&lt;-&lt; +&lt;-&gt;) c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(oust [4 5] \"good day, urbit!\")\n  \"good urbit!\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(oust [2 2] <code>(list @)</code>[1 2 3 4 ~])\n  ~[1 2]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "oust"
        ]
    },
    {
        "doc": "<h2><code>++reap</code></h2>\n\n<p>Replicate</p>\n\n<p>Replicate: produces a <code>list</code> containing <code>a</code> copies of <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  reap\n  ~/  %reap\n  |*  [a=@ b=*]\n  |-  ^-  (list _b)\n  ?~  a  ~\n  [b $(a (dec a))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(reap 20 %a)\n  ~[%a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a %a]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(reap 5 ~s1)\n  ~[~s1 ~s1 ~s1 ~s1 ~s1]\n  <code>@dr</code>(roll (reap 5 ~s1) add)\n  ~s5\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "reap"
        ]
    },
    {
        "doc": "<h2><code>++rear</code></h2>\n\n<p>Last item of list</p>\n\n<p>Produces the last item in list <code>a</code>, crashing if <code>a</code> is null.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>list</code>.</p>\n\n<h4>Produces</h4>\n\n<p>The type of the last element in <code>a</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rear\n  ~/  %rear\n  |*  a=(list)\n  ^-  _?&gt;(?=(^ a) i.a)\n  ?&gt;  ?=(^ a)\n  ?:  =(~ t.a)  i.a\n  $(a t.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rear ~[1 2 3])\n  3\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rear ~)\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rear"
        ]
    },
    {
        "doc": "<h2><code>++reel</code></h2>\n\n<p>Right fold</p>\n\n<p>Right fold: moves right to left across a <code>list</code> <code>a</code>, recursively slamming\na binary gate <code>b</code> with an element from <code>a</code> and an accumulator, producing\nthe final value of the accumulator.</p>\n\n<p>(To \"slam\" means to call a gate and give it a sample/samples. In this instance,\n<code>a</code> is the list of samples that are given to the gate b.)</p>\n\n<p>The initial value of the accumulator is the bunt of <code>b</code>'s second argument (<code>+&lt;+</code>). This can occasionally produce\nundesired behavior (see examples). If you need more control over the initial\nvalue, try making use of <code>$_</code> and <code>|:</code>, or perhaps <a href=\"#spin\"><code>+spin</code></a> or\n<a href=\"#spun\"><code>+spun</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a binary gate.</p>\n\n<h4>Produces</h4>\n\n<p>The accumulator, which is a noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  reel\n  ~/  %reel\n  |*  [a=(list) b=_=&gt;(~ |=([* *] +&lt;+))]\n  |-  ^+  ,.+&lt;+.b\n  ?~  a\n    +&lt;+.b\n  (b i.a $(a t.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(reel <code>(list @)</code>[1 2 3 4 5 ~] add)\n  15</p>\n</blockquote>\n\n<blockquote>\n  <p>(reel <code>(list @)</code>[6 3 1 ~] sub)\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>(reel <code>(list @)</code>[3 6 1 ~] sub)\n  ! subtract-underflow\n  ! exit\n  ```</p>\n</blockquote>\n\n<p><code>+mul</code>'s default sample is 1, so calling <code>+reel</code> with <code>+mul</code> yields the expected behavior:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>*mul\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(reel <code>(list @)</code>~[1 2 3 4] mul)\n  24\n  ```</p>\n</blockquote>\n\n<p>However, if you build a gate that uses <code>+mul</code> like so, the sample defaults to 0\nsince that is the bunt of <code>@</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(reel <code>(list @)</code>~[1 2 3 4] |=([a=@ b=@] (mul a b)))\n  0\n  ```</p>\n</blockquote>\n\n<p>We can fix this with <code>|:</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(reel <code>(list @)</code>~[1 2 3 4] |:([a=1 b=1] (mul a b)))\n  24\n  ```</p>\n</blockquote>\n\n<p>If you check the definition of <code>+mul</code>, you'll see that it also utilizes this\npattern.</p>\n\n<p>We can check explicitly what sequence of operations <code>+reel</code> performs like this:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=f |:  [l='e<em>l' r='e</em>r']\n        ^-  @t\n        :((cury cat 3) '(' l '<em>' r ')')\n  (reel \"abcde\" f)\n  '(a</em>(b<em>(c</em>(d<em>(e</em>e_r)))))'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "reel"
        ]
    },
    {
        "doc": "<h2><code>++roll</code></h2>\n\n<p>Left fold</p>\n\n<p>Left fold: moves left to right across a list <code>a</code>, recursively slamming a\nbinary gate <code>b</code> with an element from the <code>list</code> and an accumulator,\nproducing the final value of the accumulator.</p>\n\n<p>(To \"slam\" means to call a gate and give it a sample/samples. In this instance,\n<code>a</code> is the list of samples that are given to the gate b.)</p>\n\n<p>The initial value of the accumulator is <code>b</code>'s second argument (<code>+&lt;+</code>). This can\noccasionally produce undesired behavior (see examples). If you need more control\nover the initial value, try making use of <code>$_</code> and <code>|:</code>, or perhaps\n<a href=\"#spin\"><code>+spin</code></a> or <a href=\"#spun\"><code>+spun</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a binary gate.</p>\n\n<h4>Produces</h4>\n\n<p>The accumulator, which is a noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  roll\n  ~/  %roll\n  |*  [a=(list) b=_=&gt;(~ |=([* *] +&lt;+))]\n  |-  ^+  ,.+&lt;+.b\n  ?~  a\n    +&lt;+.b\n  $(a t.a, b b(+&lt;+ (b i.a +&lt;+.b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(roll <code>(list @)</code>[1 2 3 4 5 ~] add)\n  q=15</p>\n</blockquote>\n\n<blockquote>\n  <p>(roll <code>(list @)</code>[6 3 1 ~] sub)\n  ! subtract-underflow\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(roll <code>(list @)</code>[1 3 6 ~] sub)\n  q=4\n  ```</p>\n</blockquote>\n\n<p><code>+mul</code>'s default sample is 1, so calling <code>+roll</code> with <code>+mul</code> yields the expected behavior:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>*mul\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(roll <code>(list @)</code>~[1 2 3 4] mul)\n  24\n  ```</p>\n</blockquote>\n\n<p>However, if you build a gate that uses <code>+mul</code> like so, the sample defaults to 0\nsince that is the bunt of <code>@</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(roll <code>(list @)</code>~[1 2 3 4] |=([a=@ b=@] (mul a b)))\n  0\n  ```</p>\n</blockquote>\n\n<p>We can fix this with <code>|:</code>:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(roll <code>(list @)</code>~[1 2 3 4] |:([a=1 b=1] (mul a b)))\n  24\n  ```</p>\n</blockquote>\n\n<p>If you check the definition of <code>+mul</code>, you'll see that it also utilizes this\npattern.</p>\n\n<p>We can check explicitly what sequence of operations <code>+roll</code> performs like this:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=f |:  [l='e<em>l' r='e</em>r']\n        ^-  @t\n        :((cury cat 3) '(' l '<em>' r ')')\n  (roll \"abcde\" f)\n  '(e</em>(d<em>(c</em>(b<em>(a</em>e_r)))))\n  ```</p>\n</blockquote>\n\n<p>This is in contrast to what one might expect:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=foldl\n      |*  [l=(list) f=$-([* <em>] *)]\n      ^-  f\n      ?~  l  +&lt;-.f\n      %=  $\n        +&lt;-.f  (f +&lt;-.f i.l)\n        l      t.l\n        ==\n  (foldl \"abcde\" f)\n  '(((((e_l</em>a)<em>b)</em>c)<em>d)</em>e)'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "roll"
        ]
    },
    {
        "doc": "<h2><code>++scag</code></h2>\n\n<p>Prefix</p>\n\n<p>Accepts an atom <code>a</code> and <code>list</code> <code>b</code>, producing the first <code>a</code> elements of\nthe front of the list.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A list of the same type as <code>b</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  scag\n  ~/  %scag\n  |*  [a=@ b=(list)]\n  |-  ^+  b\n  ?:  |(?=(~ b) =(0 a))  ~\n  [i.b $(b t.b, a (dec a))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scag 2 <code>(list @)</code>[1 2 3 4 ~])\n  [i=1 t=~[2]]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scag 10 <code>(list @)</code>[1 2 3 4 ~])\n  [i=1 t=~[2 3 4]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "scag"
        ]
    },
    {
        "doc": "<h2><code>++skid</code></h2>\n\n<p>Separate</p>\n\n<p>Separates a <code>list</code> <code>a</code> into two lists - Those elements of <code>a</code> who produce\ntrue when slammed to gate <code>b</code> and those who produce <code>%.n</code>.</p>\n\n<p>(To \"slam\" means to call a gate and give it a sample/samples. In this instance,\n<code>a</code> is the list of samples that are given to the gate <code>b</code>.)</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate that accepts one argument and produces a flag.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of two lists.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  skid\n  ~/  %skid\n  |*  [a=(list) b=$-(* ?)]\n  |-  ^+  [p=a q=a]\n  ?~  a  [~ ~]\n  =+  c=$(a t.a)\n  ?:((b i.a) [[i.a p.c] q.c] [p.c [i.a q.c]])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (gth a 1))\n  (skid <code>(list @)</code>[0 1 2 3 ~] a)\n  [p=[i=2 t=~[3]] q=[i=0 t=~[1]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "skid"
        ]
    },
    {
        "doc": "<h2><code>++skim</code></h2>\n\n<p>Filter</p>\n\n<p>Cycles through the members of a list <code>a</code>, passing them to a gate <code>b</code> and\nproducing a list of all of the members that produce <code>%.y</code>. Inverse of\n<code>skip</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate that accepts one argument and produces a boolean.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  skim\n  ~/  %skim\n  |*  [a=(list) b=$-(* ?)]\n  |-\n  ^+  a\n  ?~  a  ~\n  ?:((b i.a) [i.a $(a t.a)] $(a t.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (gth a 1))\n  (skim <code>(list @)</code>[0 1 2 3 ~] a)\n  [i=2 t=~[3]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "skim"
        ]
    },
    {
        "doc": "<h2><code>++skip</code></h2>\n\n<p>Except</p>\n\n<p>Cycles through the members of <code>list</code> <code>a</code>, passing them to a gate <code>b</code>.\nProduces a list of all of the members that produce <code>%.n</code>. Inverse of\n<code>skim</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate that accepts one argument and produces a flag.</p>\n\n<h4>Produces</h4>\n\n<p>A list of the same type as <code>a</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  skip\n  ~/  %skip\n  |*  [a=(list) b=$-(* ?)]\n  |-\n  ^+  a\n  ?~  a  ~\n  ?:((b i.a) $(a t.a) [i.a $(a t.a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (gth a 1))\n  (skip <code>(l)</code>[0 1 2 3 ~]) a)\n  [i=0 t=[i=1 t=~]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "skip"
        ]
    },
    {
        "doc": "<h2><code>++slag</code></h2>\n\n<p>Suffix</p>\n\n<p>Accepts an atom <code>a</code> and list <code>b</code>, producing the remaining elements from\n<code>b</code> starting at <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A list of the same type as <code>b</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slag\n  ~/  %slag\n  |*  [a=@ b=(list)]\n  |-  ^+  b\n  ?:  =(0 a)  b\n  ?~  b  ~\n  $(b t.b, a (dec a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slag 2 (limo [1 2 3 4 ~]))\n  [i=3 t=[i=4 t=~]]\n  (slag 1 (limo [1 2 3 4 ~]))\n  [i=2 t=[i=3 t=[i=4 t=~]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slag"
        ]
    },
    {
        "doc": "<h2><code>++snag</code></h2>\n\n<p>Index</p>\n\n<p>Accepts an atom <code>a</code> and a <code>++list</code> <code>b</code>, producing the element at the index\nof <code>a</code>and failing if the list is null. Lists are 0-indexed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>Produces an element of <code>b</code>, or crashes if no element exists at that index.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  snag\n  ~/  %snag\n  |*  [a=@ b=(list)]\n  |-  ^+  ?&gt;(?=(^ b) i.b)\n  ?~  b\n    ~_  leaf+\"snag-fail\"\n    !!\n  ?:  =(0 a)  i.b\n  $(b t.b, a (dec a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(snag 2 \"asdf\")\n  'd'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(snag 0 <code>(list @ud)</code>~[1 2 3 4])\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "snag"
        ]
    },
    {
        "doc": "<h2><code>++snap</code></h2>\n\n<p>Replace item at index</p>\n\n<p>Accepts a <code>list</code> <code>a</code>, an atom <code>b</code>, and a noun <code>c</code>, producing the list of <code>a</code> with the item at index <code>b</code> replaced with <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a atom.</p>\n\n<p><code>c</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>the list of <code>a</code> with the item at index <code>b</code> replaced with <code>c</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  snap\n  ~/  %snap\n  |*  [a=(list) b=@ c=*]\n  ^+  a\n  (weld (scag b a) [c (slag +(b) a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(snap (limo ~[2 3 4]) 1 11)\n  ~[2 11 4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "snap"
        ]
    },
    {
        "doc": "<h2><code>++snip</code></h2>\n\n<p>Drop tail off list</p>\n\n<p>Removes the last element from list <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>list</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  snip\n  ~/  %snip\n  |*  a=(list)\n  ^+  a\n  ?~  a  ~\n  ?:  =(~ t.a)  ~\n  [i.a $(a t.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(snip \"foobar\")\n  \"fooba\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(snip ~)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "snip"
        ]
    },
    {
        "doc": "<h2><code>++snoc</code></h2>\n\n<p>Append</p>\n\n<p>Accepts a <code>++list</code> <code>a</code> and a noun <code>b</code>, producing the list of <code>b</code> appended to <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>Produces a list of <code>b</code> appended to <code>a</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  snoc\n  |*  [a=(list) b=*]\n  (weld a ^+(a [b]~))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(zing (snoc <code>(list tape)</code>~[\"a\" \"bc\" \"def\"] \"g\"))\n  \"abcdefg\"\n  (snoc <code>(list @ud)</code>~[1 2 3] 4)\n  ~[1 2 3 4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "snoc"
        ]
    },
    {
        "doc": "<h2><code>++sort</code></h2>\n\n<p>Quicksort</p>\n\n<p>Quicksort: accepts a <code>++list</code> <code>a</code> and a gate <code>b</code> which accepts two nouns and\nproduces a flag. <code>++sort</code> then produces a list of the elements of <code>a</code>,\nsorted according to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate that accepts two nouns and produces a boolean.</p>\n\n<h4>Produces</h4>\n\n<p>A list</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sort  !.\n  ~/  %sort\n  |*  [a=(list) b=$-([* *] ?)]\n  =&gt;  .(a ^.(homo a))\n  |-  ^+  a\n  ?~  a  ~\n  =+  s=(skid t.a |:(c=i.a (b c i.a)))\n  %+  weld\n    $(a p.s)\n  ^+  t.a\n  [i.a $(a q.s)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sort <code>(list @)</code>[0 1 2 3 ~] gth)\n  ~[3 2 1 0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sort"
        ]
    },
    {
        "doc": "<h2><code>++spin</code> {% #spin %}</h2>\n\n<p>Gate to list, with state</p>\n\n<p>Accepts a <code>++list</code> <code>a</code>, some state <code>b</code>, and a gate <code>c</code>. <code>c</code> is called with\na tuple -- the head is an element of <code>a</code> and the tail is the state <code>b</code>, and\nshould produce a tuple of the transformed element and the (potentially\nmodified) state <code>b</code>. Produces a pair where the first element is a list of the\ntransformed elements of <code>a</code>, and the second element is the final value of <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>++list</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<p><code>c</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A pair of a list and a noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  spin\n  ~/  %spin\n  |*  [a=(list) b=* c=_|=(^ [** +&lt;+])]\n  =&gt;  .(c `$-([_?&gt;(?=(^ a) i.a) _b] [_-:(c) _b])`c)\n  =/  acc=(list _-:(c))  ~\n  |-  ^-  (pair _acc _b)\n  ?~  a\n    [(flop acc) b]\n  =^  res  b  (c i.a b)\n  $(acc [res acc], a t.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>%^  spin  (limo ~[4 5 6])     ::  Trivial example -- does nothing with the state\n      0\n    |=([n=@ a=@] [n a])\n  [p=~[4 5 6] q=0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>%^  spin  (limo ~[4 5 6])     ::  Form a pair with <code>p</code> as the index and <code>q</code> as the list element\n      0\n    |=([n=@ a=@] [<code>(pair)</code>[a n] +(a)])\n  [p=~[[p=0 q=4] [p=1 q=5] [p=2 q=6]] q=3]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>%^  spin  (reap 10 0)     :: Create 10 random numbers less than <code>10</code>\n      ~(. og eny)\n    |=([n=@ rng=_og] (rads:rng 10))\n  [p=~[7 8 6 0 1 5 4 7 9 3] q=&lt;4.rvi {a/@uvJ &lt;51.qyl 129.pdd 41.mac 1.ane $141>}&gt;]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>(~(rads og eny) 2)</code> creates a random number less than <code>2</code>, seeding the RNG\nwith entropy (<code>eny</code>). The head of the product is the random number, the tail\nis the continuation of the RNG.</p>\n\n<hr />\n",
        "keys": [
            "spin"
        ]
    },
    {
        "doc": "<h2><code>++spun</code> {% #spun %}</h2>\n\n<p>Gate to list, with state</p>\n\n<p>Accepts a <code>list</code> <code>a</code> and a gate <code>b</code>. <code>c</code> is internal state, initially\nderived by <strong>bunting</strong> the tail of the sample of gate <code>b</code>, instead of\nbeing passed in explicitly as in <code>++spin</code>. Produces a list with the\ngate applied to each element of the original list. <code>b</code> is called with a tuple --\nthe head is an element of <code>a</code> and the tail is the state <code>c</code>, and should\nproduce a tuple of the transformed element and the (potentially modified)\nstate <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>++list</code>.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  spun\n  ~/  %spun\n  |*  [a=(list) b=_|=(^ [** +&lt;+])]\n  p:(spin a +&lt;+.b b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>%+  spun  (limo ~[4 5 6])            ::  <code>p</code> as the index and <code>q</code> as the list element\n    |=([n=@ a=@] [<code>(pair)</code>[a n] +(a)])\n  ~[[p=0 q=4] [p=1 q=5] [p=2 q=6]]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=l (limo ~[7 8 9])\n  %+  spun  (limo ~[4 5 6])            ::  joins two lists into a list of pairs\n    |=([n=@ a=@] [<code>(pair)</code>[(snag a l) n] +(a)])\n  ~[[p=7 q=4] [p=8 q=5] [p=9 q=6]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "spun"
        ]
    },
    {
        "doc": "<h2><code>++swag</code></h2>\n\n<p>Infix</p>\n\n<p>Similar to <code>substr</code> in Javascript: extracts a string infix, beginning at\ninclusive index <code>a</code>, producing <code>b</code> number of characters.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A list of the same type as <code>c</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  swag\n  |*  [[a=@ b=@] c=(list)]\n  (scag +&lt;-&gt; (slag +&lt;-&lt; c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(swag [2 5] \"roly poly\")\n  \"ly po\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(swag [2 2] (limo [1 2 3 4 ~]))\n  [i=3 t=[i=4 t=~]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "swag"
        ]
    },
    {
        "doc": "<h2><code>++turn</code></h2>\n\n<p>Gate to list</p>\n\n<p>Accepts a <code>++list</code> <code>a</code> and a gate <code>b</code>. Produces a list with the gate applied\nto each element of the original list.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  turn\n  ~/  %turn\n  |*  [a=(list) b=gate]\n  =&gt;  .(a (homo a))\n  ^-  (list _?&gt;(?=(^ a) (b i.a)))\n  |-\n  ?~  a  ~\n  [i=(b i.a) t=$(a t.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(turn (limo [104 111 111 110 ~]) @t)\n  &lt;|h o o n|&gt;\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a |=(a=@ (add a 4))\n  (turn (limo [1 2 3 4 ~]) a)\n  ~[5 6 7 8]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>turn</code> is Hoon's version of 'map' in Haskell.</p>\n\n<hr />\n",
        "keys": [
            "turn"
        ]
    },
    {
        "doc": "<h2><code>++weld</code></h2>\n\n<p>Concatenate</p>\n\n<p>Concatenate two <code>++list</code>s <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> and <code>b</code> are lists.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  weld\n  ~/  %weld\n  |*  [a=(list) b=(list)]\n  =&gt;  .(a ^.(homo a), b ^.(homo b))\n  |-  ^+  b\n  ?~  a  b\n  [i.a $(a t.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(weld \"urb\" \"it\")\n  \"urbit\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(weld (limo [1 2 ~]) (limo [3 4 ~]))\n  ~[1 2 3 4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "weld"
        ]
    },
    {
        "doc": "<h2><code>++welp</code></h2>\n\n<p>Perfect weld</p>\n\n<p>Concatenate two <code>++list</code>s <code>a</code> and <code>b</code> without losing their type information\nto homogenization.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<p><code>b</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  welp\n  ~/  %welp\n  =|  [* *]\n  |@\n  ++  $\n    ?~  +&lt;-\n      +&lt;-(. +&lt;+)\n    +&lt;-(+ $(+&lt;- +&lt;-&gt;))\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(welp \"foo\" \"bar\")\n  \"foobar\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(welp ~[60 61 62] ~[%a %b %c])\n  [60 61 62 %a %b %c ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>? (welp ~[60 61 62] ~[%a %b %c])\n    [@ud @ud @ud %a %b %c %~]\n  [60 61 62 %a %b %c ~]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(welp [sa+1 so+2 ~] si=3)\n  [[%sa 1] [%so 2] si=3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "welp"
        ]
    },
    {
        "doc": "<h2><code>++zing</code></h2>\n\n<p>Turns a <code>++list</code> of lists into a single list by promoting the elements of\neach sublist into the higher.</p>\n\n<h4>Accepts</h4>\n\n<p>A list of lists.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zing\n  ~/  %zing\n  =|  *\n  |@\n  ++  $\n    ?~  +&lt;\n      +&lt;\n    (welp +&lt;- $(+&lt; +&lt;+))\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(zing (limo [(limo ['a' 'b' 'c' ~]) (limo ['e' 'f' 'g' ~]) (limo ['h' 'i' 'j' ~]) ~]))\n  ~['a' 'b' 'c' 'e' 'f' 'g' 'h' 'i' 'j']\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(zing (limo [(limo [1 'a' 2 'b' ~]) (limo [3 'c' 4 'd' ~]) ~]))\n  ~[1 97 2 98 3 99 4 100]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "zing"
        ]
    },
    {
        "doc": "<h2><code>++bex</code></h2>\n\n<p>Binary exponent</p>\n\n<p>Computes the result of <code>2^a</code>, where <code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\">$bloq</a>), producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>bloq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bex\n  ~/  %bex\n  |=  a=bloq\n  ^-  @\n  ?:  =(0 a)  1\n  (mul 2 $(a (dec a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bex 4)\n  16\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bex (add 19 1))\n  1.048.576\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bex 0)\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bex"
        ]
    },
    {
        "doc": "<h2><code>++can</code></h2>\n\n<p>Assemble</p>\n\n<p>Produces an atom from a list <code>b</code> of length-value pairs <code>p</code> and <code>q</code>,\nwhere <code>p</code> is the length in blocks of size <code>a</code>, and <code>q</code> is an atomic\nvalue.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>).</p>\n\n<p><code>b</code> is a <code>list</code> of length-value pairs, <code>p</code> and <code>q</code>:</p>\n\n<ul>\n<li><code>p</code> is a <a href=\"/reference/hoon/stdlib/1c/#step\">step</a>.</li>\n<li><code>q</code> is a <code>@</code>.</li>\n</ul>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  can\n  ~/  %can\n  |=  [a=bloq b=(list [p=step q=@])]\n  ^-  @\n  ?~  b  0\n  (add (end [a p.i.b] q.i.b) (lsh [a p.i.b] $(b t.b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>21    ::  @ub is the binary aura\n  0b1.0101\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(can 3 ~[[1 21]])\n  0b1.0101\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(can 3 ~[[1 1]])\n  0b1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(can 0 ~[[1 255]])\n  0b1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(can 3 [3 0xc1] [1 0xa] ~)    ::  @ux is the hexadecimal aura\n  0xa00.00c1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(can 3 [3 0xc1] [1 0xa] [1 0x23] ~)\n  0x23.0a00.00c1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(can 4 [3 0xc1] [1 0xa] [1 0x23] ~)\n  0x23.000a.0000.0000.00c1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(can 3 ~[[1 'a'] [2 'bc']])\n  0x63.6261\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "can"
        ]
    },
    {
        "doc": "<h2><code>++cat</code></h2>\n\n<p>Concatenate</p>\n\n<p>Concatenates two atoms, <code>b</code> and <code>c</code>, according to block size <code>a</code>, producing an\natom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>).</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cat\n  ~/  %cat\n  |=  [a=bloq b=@ c=@]\n  (add (lsh [a (met a b)] c) b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(cat 3 1 0)    ::  @ub is the binary aura\n  0b1\n  <code>@ub</code>(cat 0 1 1)\n  0b11\n  <code>@ub</code>(cat 0 2 1)\n  0b110\n  <code>@ub</code>(cat 2 1 1)\n  0b1.0001\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>256\n  0b1.0000.0000\n  <code>@ub</code>255\n  0b1111.1111\n  <code>@ub</code>(cat 3 256 255)\n  0b1111.1111.0000.0001.0000.0000\n  <code>@ub</code>(cat 2 256 255)\n  0b1111.1111.0001.0000.0000\n  (cat 3 256 255)\n  16.711.936\n  (cat 2 256 255)\n  1.044.736\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cat"
        ]
    },
    {
        "doc": "<h2><code>++cut</code></h2>\n\n<p>Slice</p>\n\n<p>Slices <code>c</code> blocks of size <code>a</code> that are positioned <code>b</code> blocks from the end of\n<code>d</code>. That slice is produced as an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c\"><code>$bloq</code></a>).</p>\n\n<p><code>[b c]</code> where:</p>\n\n<ul>\n<li><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#step\">step</a>.</li>\n<li><code>c</code> is a <a href=\"/reference/hoon/stdlib/1c#step\">step</a>.</li>\n</ul>\n\n<p><code>d</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cut\n  ~/  %cut\n  |=  [a=bloq [b=step c=step] d=@]\n  (end [a c] (rsh [a b] d))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cut 0 [1 1] 2)\n  1\n  (cut 0 [2 1] 4)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(cut 3 [0 3] 'abcdefgh')           ::  @t is the cord aura\n  'abc'\n  <code>@t</code>(cut 3 [1 3] 'abcdefgh')\n  'bcd'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(cut 0 [0 3] 0b1111.0000.1101)    ::  @ub is the binary aura\n  0b101\n  <code>@ub</code>(cut 0 [0 6] 0b1111.0000.1101)\n  0b1101\n  <code>@ub</code>(cut 0 [4 6] 0b1111.0000.1101)\n  0b11.0000\n  <code>@ub</code>(cut 0 [3 6] 0b1111.0000.1101)\n  0b10.0001\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cut"
        ]
    },
    {
        "doc": "<h2><code>++end</code></h2>\n\n<p>Tail</p>\n\n<p>Produces an atom by taking the last <code>step</code> blocks of size <code>bloq</code> from <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom slice specifier (see <a href=\"/reference/hoon/stdlib/1c#bite\"><code>$bite</code></a>),\nwhich is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)\nwith optional block count.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  end\n  ~/  %end\n  |=  [a=bite b=@]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  (mod b (bex (mul (bex bloq) step)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(end [2 2] 255)\n  255\n  (end [3 1] 255)\n  255\n  (end 3 255)\n  255\n  (end 3 256)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>12                  ::  @ub is the binary aura\n  0b1100\n  <code>@ub</code>(end [0 3] 12)\n  0b100\n  (end [0 3] 12)\n  4\n  <code>@ub</code>(end [1 3] 12)\n  0b1100\n  (end [1 3] 12)\n  12\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>'abc'               ::  @ux is the hexademical aura\n  0x63.6261\n  <code>@ux</code>(end [3 2] 'abc')\n  0x6261\n  <code>@t</code>(end [3 2] 'abc')    ::  @t is the cord aura\n  'ab'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "end"
        ]
    },
    {
        "doc": "<h2><code>++fil</code></h2>\n\n<p>Fill bloqstream</p>\n\n<p>Produces an atom by repeating <code>c</code> for <code>b</code> blocks of size <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>).</p>\n\n<p><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#step\">step</a>.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fil\n  ~/  %fil\n  |=  [a=bloq b=step c=@]\n  =|  n=@ud\n  =.  c  (end a c)\n  =/  d  c\n  |-  ^-  @\n  ?:  =(n b)\n    (rsh a d)\n  $(d (add c (lsh a d)), n +(n))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(fil 3 5 %a)                                ::  @t is the cord (string) aura\n  'aaaaa'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(fil 5 10 %ceeb)\n  'ceebceebceebceebceebceebceebceebceebceeb'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(fil 4 10 'eced')\n  'ecececececececececec'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@tas</code>(fil 4 10 %bf)                            ::  @tas is the term aura\n  %bfbfbfbfbfbfbfbfbfbf\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(fil 2 6 1)                                ::  @ub is the binary aura\n  0b1.0001.0001.0001.0001.0001\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fil"
        ]
    },
    {
        "doc": "<h2><code>++lsh</code></h2>\n\n<p>Left-shift</p>\n\n<p>Produces an atom by left-shifting <code>b</code> by <code>step</code> blocks of size <code>bloq</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom slice specifier (see <a href=\"/reference/hoon/stdlib/1c#bite\"><code>$bite</code></a>),\nwhich is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)\nwith optional block count.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lsh\n  ~/  %lsh\n  |=  [a=bite b=@]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  (mul b (bex (mul (bex bloq) step)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>1                 ::  @ub is the binary aura\n  0b1\n  <code>@ub</code>(lsh [0 1] 1)\n  0b10\n  (lsh [0 1] 1)\n  2\n  (lsh 0 1)\n  2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>255\n  0b1111.1111\n  <code>@ub</code>(lsh [3 1] 255)\n  0b1111.1111.0000.0000\n  (lsh [3 1] 255)\n  65.280\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lsh"
        ]
    },
    {
        "doc": "<h2><code>++met</code></h2>\n\n<p>Measure</p>\n\n<p>Computes the number of blocks of size <code>a</code> in <code>b</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>).</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  met\n  ~/  %met\n  |=  [a=bloq b=@]\n  ^-  @\n  =+  c=0\n  |-\n  ?:  =(0 b)  c\n  $(b (rsh a b), c +(c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(met 0 1)\n  1\n  (met 0 2)\n  2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(met 3 255)\n  1\n  (met 3 256)\n  2\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(met 3 'abcde')\n  5\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "met"
        ]
    },
    {
        "doc": "<h2><code>++rap</code></h2>\n\n<p>Assemble non-zero</p>\n\n<p>Concatenates a list of atoms <code>b</code> using block size <code>a</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c\"><code>++bloq</code></a>).</p>\n\n<p><code>b</code> is a <code>list</code> of atoms.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rap\n  ~/  %rap\n  |=  [a=bloq b=(list @)]\n  ^-  @\n  ?~  b  0\n  (cat a i.b $(b t.b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(rap 2 [1 2 3 4 ~])                   ::  @ub is the binary aura\n  0b100.0011.0010.0001\n  <code>@ub</code>(rap 1 [1 2 3 4 ~])\n  0b1.0011.1001\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rap 0 [0 0 0 ~])\n  0\n  (rap 0 [1 0 1 ~])\n  3\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>3\n  0b11\n  (rap 0 [0 1 0 0 1 2 ~])\n  11\n  (rap 0 [1 1 2 ~])\n  11\n  <code>@ub</code>11\n  0b1011\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Any element of the value <code>0</code> is not included in concatenation.</p>\n\n<hr />\n",
        "keys": [
            "rap"
        ]
    },
    {
        "doc": "<h2><code>++rep</code></h2>\n\n<p>Assemble single</p>\n\n<p>Produces an atom by assembling a list of atoms <code>b</code> using block size <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom slice specifier (see <a href=\"/reference/hoon/stdlib/1c#bite\"><code>$bite</code></a>),\nwhich is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)\nwith optional block count.</p>\n\n<p><code>b</code> is a list of atoms.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rep\n  ~/  %rep\n  |=  [a=bite b=(list @)]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  =|  i=@ud\n  |-  ^-  @\n  ?~  b   0\n  %+  add  $(i +(i), b t.b)\n  (lsh [bloq (mul step i)] (end [bloq step] i.b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(rep 2 [1 2 3 4 ~])                   ::  @ub is the binary aura\n  0b100.0011.0010.0001\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rep 0 [0 0 1 ~])\n  4\n  (rep 0 [0 0 0 1 ~])\n  8\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(rep 0 [0 0 0 1 ~])\n  0b1000\n  <code>@ub</code>8\n  0b1000\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(rep 0 [1 0 1 0 ~])\n  0b101\n  <code>@ub</code>(rep 0 [1 2 3 4 ~])\n  0b101\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rep 0 [0 1 0 1 ~])\n  10\n  (rep 0 [1 0 1 0 1 ~])\n  21\n  <code>@ub</code>21\n  0b10.1010\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(rep 3 [12 166 8 34 ~])\n  0b10.0010.0000.1000.1010.0110.0000.1100\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>*</code>\"abcd\"\n  [97 98 99 100 0]\n  <code>@t</code>(rep 3 \"abcd\")                         :: @t is the text aura\n  'abcd'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rep"
        ]
    },
    {
        "doc": "<h2><code>++rev</code></h2>\n\n<p>Reverses block order, accounting for leading zeroes.</p>\n\n<p>Produces an atom from the bits of <code>dat</code> in reverse order according to a block\nsize <code>boz</code> and a size <code>len</code>.</p>\n\n<p>If the total size is less than the length of <code>dat</code>, then only the first\nbits of <code>dat</code> up to the total size will be taken and reversed. If the total size\nis longer, trailing zeroes will be added.</p>\n\n<h4>Accepts</h4>\n\n<p><code>boz</code> is a block size with optional block count (see\n<a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>).</p>\n\n<p><code>len</code> is a <code>@ud</code> of the number of blocks of size <code>boz</code> to be reversed.</p>\n\n<p><code>dat</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rev\n  ~/  %rev\n  |=  [boz=bloq len=@ud dat=@]\n  ^-  @\n  =.  dat  (end [boz len] dat)\n  %+  lsh\n    [boz (sub len (met boz dat))]\n  (swp boz dat)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a 0b1111.0000.1111.1010.0011\n  <code>@ub</code>(rev 0 20 a)\n  0b1100.0101.1111.0000.1111\n  <code>@ub</code>(rev 0 12 a)\n  0b1100.0101.1111\n  <code>@ub</code>(rev 2 5 a)\n  0b11.1010.1111.0000.1111\n  <code>@ub</code>(rev 2 4 a)\n  0b11.1010.1111.0000\n  <code>@ub</code>(rev 2 6 a)\n  0b11.1010.1111.0000.1111.0000\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rev 1 10 1.000)\n  179.200\n  (rev 2 5 1.000)\n  582.400\n  (rev 1 5 1.000)\n  175\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rev"
        ]
    },
    {
        "doc": "<h2><code>++rip</code></h2>\n\n<p>Disassemble</p>\n\n<p>Produces a list of atoms from the bits of <code>b</code> using block size <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom slice specifier (see <a href=\"/reference/hoon/stdlib/1c#bite\"><code>$bite</code></a>),\nwhich is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)\nwith optional block count.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A list of atoms.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rip\n  ~/  %rip\n  |=  [a=bite b=@]\n  ^-  (list @)\n  ?:  =(0 b)  ~\n  [(end a b) $(b (rsh a b))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>155                      ::  @ub is the binary aura\n  0b1001.1011\n  (rip 0 155)\n  ~[1 1 0 1 1 0 0 1]\n  (rip 2 155)\n  ~[11 9]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rip 0 11)\n  ~[1 1 0 1]\n  (rip 1 155)\n  ~[3 2 1 2]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>256\n  0b1.0000.0000\n  (rip 0 256)\n  ~[0 0 0 0 0 0 0 0 1]\n  (rip 2 256)\n  ~[0 0 1]\n  (rip 3 256)\n  ~[0 1]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(rip 3 'abcd')\n  \"abcd\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rip"
        ]
    },
    {
        "doc": "<h2><code>++rsh</code></h2>\n\n<p>Right-shift</p>\n\n<p>Right-shifts <code>b</code> by <code>step</code> blocks of size <code>bloq</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom slice specifier (see <a href=\"/reference/hoon/stdlib/1c#bite\"><code>$bite</code></a>),\nwhich is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)\nwith optional block count.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rsh\n  ~/  %rsh\n  |=  [a=bite b=@]\n  =/  [=bloq =step]  ?^(a a [a *step])\n  (div b (bex (mul (bex bloq) step)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>145                       ::  @ub is the binary aura\n  0b1001.0001\n  <code>@ub</code>(rsh [1 1] 145)\n  0b10.0100\n  (rsh [1 1] 145)\n  36\n  (rsh 1 145)\n  36\n  <code>@ub</code>(rsh [2 1] 145)\n  0b1001\n  (rsh [2 1] 145)\n  9\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>10\n  0b1010\n  <code>@ub</code>(rsh [0 1] 10)\n  0b101\n  (rsh [0 1] 10)\n  5\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>'abc'\n  0x63.6261\n  <code>@t</code>(rsh [3 1] 'abc')\n  'bc'\n  <code>@ux</code>(rsh [3 1] 'abc')\n  0x6362\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rsh"
        ]
    },
    {
        "doc": "<h2><code>++run</code></h2>\n\n<p><code>++turn</code> into atom.</p>\n\n<p>Disassembles atom <code>b</code> into slices specified by <code>a</code>, applies <code>c</code> to each slice,\nand reassembles the results back into an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom slice specifier (see <a href=\"/reference/hoon/stdlib/1c#bite\"><code>$bite</code></a>),\nwhich is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)\nwith optional block count.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is a gate that accepts an atom and produces an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  run\n  ~/  %run\n  |=  [a=bite b=@ c=$-(@ @)]\n  (rep a (turn (rip a b) c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>65.535                     :: @ux is the hexadecimal aura\n      0xffff\n  <code>@ux</code>(run 2 65.535 dec)         :: dec is the decrement gate\n      0xeeee\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "run"
        ]
    },
    {
        "doc": "<h2><code>++rut</code></h2>\n\n<p><code>++turn</code> into list.</p>\n\n<p>Disassembles atom <code>b</code> into slices specified by <code>a</code>, applies <code>c</code> to each slice,\nand assembles the results back into a.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom slice specifier (see <a href=\"/reference/hoon/stdlib/1c#bite\"><code>$bite</code></a>),\nwhich is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)\nwith optional block count.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is a gate that accepts an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rut\n  ~/  %rut\n  |*  [a=bite b=@ c=$-(@ *)]\n  (turn (rip a b) c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>65.535                             :: @ux is the hexadecimal aura\n  0xffff\n  <code>(list @ux)</code>(rut 2 65.535 dec)          :: dec is the decrement gate\n  ~[0xe 0xe 0xe 0xe]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rut"
        ]
    },
    {
        "doc": "<h2><code>++sew</code></h2>\n\n<p>Stitch one atom into another</p>\n\n<p>Replace <code>c</code> blocks of size <code>a</code> at offset <code>b</code> of atom <code>e</code> with <code>c</code> blocks of size <code>a</code> from atom <code>d</code>.</p>\n\n<p>That is, take <code>(end [a c] d)</code> from <code>d</code> and overwrite the <code>(cut a [b c] e)</code> part of <code>e</code>.</p>\n\n<p>Or in simpler terms, take from the start of <code>d</code> and replace some part of <code>e</code> with it.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <a href=\"/reference/hoon/stdlib/1c#bite\">$bloq</a> (block size).</p>\n\n<p><code>[b c d]</code> where:</p>\n\n<ul>\n<li><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#step\">step</a> specifying the number of <code>bloq</code>s to offset.</li>\n<li><code>b</code> is a <a href=\"/reference/hoon/stdlib/1c#step\">step</a> specifying the number of <code>bloq</code>s to replace.</li>\n<li><code>d</code> is the donor atom.</li>\n</ul>\n\n<p><code>e</code> is the recipient atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sew\n  ~/  %sew\n  |=  [a=bloq [b=step c=step d=@] e=@]\n  ^-  @\n  %+  add\n    (can a b^e c^d ~)\n  =/  f  [a (add b c)]\n  (lsh f (rsh f e))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(sew 3 [0 0 'XXXX'] 'OOOO')\n  'OOOO'\n  <code>@t</code>(sew 3 [0 1 'XXXX'] 'OOOO')\n  'XOOO'\n  <code>@t</code>(sew 3 [2 1 'XXXX'] 'OOOO')\n  'OOXO'\n  <code>@t</code>(sew 3 [2 2 'XXXX'] 'OOOO')\n  'OOXX'\n  <code>@t</code>(sew 3 [0 4 'XXXX'] 'OOOO')\n  'XXXX'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sew"
        ]
    },
    {
        "doc": "<h2><code>++swp</code></h2>\n\n<p>Reverse block order</p>\n\n<p>Switches little-endian to big-endian and vice versa: produces an atom by\nreversing the block order of <code>b</code> using block size <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>).</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  swp\n  ~/  %swp\n  |=  [a=bloq b=@]\n  (rep a (flop (rip a b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>24             ::  @ub is the binary aura\n  0b1.1000\n  (swp 0 24)\n  3\n  <code>@ub</code>3\n  0b11\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(swp 0 0)\n  0\n  (swp 0 128)\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "swp"
        ]
    },
    {
        "doc": "<h2><code>++xeb</code></h2>\n\n<p>Binary logarithm</p>\n\n<p>Computes the base-2 logarithm of <code>a</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  xeb\n  ~/  %xeb\n  |=  a=@\n  ^-  @\n  (met 0 a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xeb 31)\n  5\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xeb 32)\n  6\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xeb 49)\n  6\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xeb 0)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xeb 1)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xeb 2)\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "xeb"
        ]
    },
    {
        "doc": "<h2><code>++fe</code></h2>\n\n<p>Modulo bloq</p>\n\n<p>Core that contains arms for <code>bloq</code> and modular integer operations.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    |_  a=bloq\n</code></p>\n\n<hr />\n\n<h3><code>++dif:fe</code></h3>\n\n<p>Produces the difference between two atoms in the modular basis\nrepresentation.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and is the sample of the parent core).</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n  ++  dif\n    |=([b=@ c=@] (sit (sub (add out (sit b)) (sit c))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(dif fe 3) 63 64)\n  255\n  (~(dif fe 3) 5 10)\n  251\n  (~(dif fe 3) 0 1)\n  255\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(dif fe 0) 9 10)\n  1\n  (~(dif fe 0) 9 11)\n  0\n  (~(dif fe 0) 9 12)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(dif fe 2) 9 12)\n  13\n  (~(dif fe 2) 63 64)\n  15\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++inv:fe</code></h3>\n\n<p>Inverse</p>\n\n<p>Inverts the order of the modular field.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and is the sample of the parent core).</p>\n\n<p><code>b</code> is a <code>bloq</code>. (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  inv  |=(b=@ (sub (dec out) (sit b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(inv fe 3) 255)\n  0\n  (~(inv fe 3) 256)\n  255\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(inv fe 3) 0)\n  255\n  (~(inv fe 3) 1)\n  254\n  (~(inv fe 3) 2)\n  253\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(inv fe 3) 55)\n  200\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++net:fe</code></h3>\n\n<p>Flip endianness</p>\n\n<p>Reverses bytes within a block.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and the sample of the parent core).</p>\n\n<p><code>b</code> is a <code>bloq</code>. (see <a href=\"/reference/hoon/stdlib/1c#bloq\"><code>$bloq</code></a>)</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  net  |=  b=@  ^-  @\n         =&gt;  .(b (sit b))\n         ?:  (lte a 3)\n           b\n         =+  c=(dec a)\n         %+  con\n           (lsh c $(a c, b (cut c [0 1] b)))\n         $(a c, b (cut c [1 1] b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(net fe 3) 64)\n  64\n  (~(net fe 3) 128)\n  128\n  (~(net fe 3) 255)\n  255\n  (~(net fe 3) 256)\n  0\n  (~(net fe 3) 257)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(net fe 3) 500)\n  244\n  (~(net fe 3) 511)\n  255\n  (~(net fe 3) 512)\n  0\n  (~(net fe 3) 513)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(net fe 3) 0)\n  0\n  (~(net fe 3) 1)\n  1\n  (~(net fe 0) 1)\n  1\n  (~(net fe 0) 2)\n  0\n  (~(net fe 0) 3)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(net fe 6) 1)\n  72.057.594.037.927.936\n  (~(net fe 6) 2)\n  144.115.188.075.855.872\n  (~(net fe 6) 3)\n  216.172.782.113.783.808\n  (~(net fe 6) 4)\n  288.230.376.151.711.744\n  (~(net fe 6) 5)\n  360.287.970.189.639.680\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++out:fe</code></h3>\n\n<p>Max integer value</p>\n\n<p>Produces the maximum integer value that the current block can store; <code>2^a^a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and is the sample of the parent core).</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  out  (bex (bex a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(out fe 0)\n  2\n  ~(out fe 1)\n  4\n  ~(out fe 2)\n  16\n  ~(out fe 3)\n  256\n  ~(out fe 4)\n  65.536\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(out fe 10)\n  \\/179.769.313.486.231.590.772.930.519.078.902.473.361.797.697.894.230.657.273\\/\n    .430.081.157.732.675.805.500.963.132.708.477.322.407.536.021.120.113.879.87\n    1.393.357.658.789.768.814.416.622.492.847.430.639.474.124.377.767.893.424.8\n    65.485.276.302.219.601.246.094.119.453.082.952.085.005.768.838.150.682.342.\n    462.881.473.913.110.540.827.237.163.350.510.684.586.298.239.947.245.938.479\n    .716.304.835.356.329.624.224.137.216\n  \\/                                                                           \\/\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rol:fe</code></h3>\n\n<p>Roll left</p>\n\n<p>Rolls <code>d</code> to the left by <code>c</code> <code>b</code>-sized blocks.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and is the sample of the parent core).</p>\n\n<p><code>b</code> is a <code>bloq</code>.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<p><code>d</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rol  |=  [b=bloq c=@ d=@]  ^-  @\n         =+  e=(sit d)\n         =+  f=(bex (sub a b))\n         =+  g=(mod c f)\n         (sit (con (lsh [b g] e) (rsh [b (sub f g)] e)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(~(rol fe 6) 4 3 0xabac.dedf.1213)\n  0x1213.0000.abac.dedf</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(~(rol fe 6) 4 2 0xabac.dedf.1213)\n  0xdedf.1213.0000.abac\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(~(rol fe 5) 3 1 'dfgh')\n  'hdfg'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(~(rol fe 5) 3 2 'dfgh')\n  'ghdf'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(~(rol fe 5) 3 0 'dfgh')\n  'dfgh'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ror:fe</code></h3>\n\n<p>Roll right</p>\n\n<p>Rolls <code>d</code> to the right by <code>c</code> <code>b</code>-sized blocks.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and is the sample of the parent core).</p>\n\n<p><code>b</code> is a <code>bloq</code>.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<p><code>d</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ror  |=  [b=bloq c=@ d=@]  ^-  @\n         =+  e=(sit d)\n         =+  f=(bex (sub a b))\n         =+  g=(mod c f)\n         (sit (con (rsh [b g] e) (lsh [b (sub f g)] e)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(~(ror fe 6) 4 1 0xabac.dedf.1213)\n  0x1213.0000.abac.dedf</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(~(ror fe 6) 3 5 0xabac.dedf.1213)\n  0xacde.df12.1300.00ab</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(~(ror fe 6) 3 3 0xabac.dedf.1213)\n  0xdf12.1300.00ab.acde\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(~(rol fe 5) 3 0 'hijk')\n  'hijk'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(~(rol fe 5) 3 1 'hijk')\n  'khij'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(~(rol fe 5) 3 2 'hijk')\n  'jkhi'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sum:fe</code></h3>\n\n<p>Sum</p>\n\n<p>Sums two numbers in this modular field.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and is the sample of the parent core).</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sum  |=([b=@ c=@] (sit (add b c)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sum fe 3) 10 250)\n  4\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sum fe 0) 0 1)\n  1\n  (~(sum fe 0) 0 2)\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sum fe 2) 14 2)\n  0\n  (~(sum fe 2) 14 3)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sum fe 4) 10.000 256)\n  10.256\n  (~(sum fe 4) 10.000 100.000)\n  44.464\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sit:fe</code></h3>\n\n<p>Enforce modulo</p>\n\n<p>Produces an atom in the current modular block representation.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>bloq</code> (and is the sample of the parent core).</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sit  |=(b=@ (end a b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sit fe 3) 255)\n  255\n  (~(sit fe 3) 256)\n  0\n  (~(sit fe 3) 257)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sit fe 2) 257)\n  1\n  (~(sit fe 2) 10.000)\n  0\n  (~(sit fe 2) 100)\n  4\n  (~(sit fe 2) 19)\n  3\n  (~(sit fe 2) 17)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sit fe 0) 17)\n  1\n  (~(sit fe 0) 0)\n  0\n  (~(sit fe 0) 1)\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fe"
        ]
    },
    {
        "doc": "<h2><code>++con</code></h2>\n\n<p>Binary OR</p>\n\n<p>Computes the bitwise logical OR of two atoms, <code>a</code> and <code>b</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom</p>\n\n<p><code>b</code> is an atom</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  con\n  ~/  %con\n  |=  [a=@ b=@]\n  =+  [c=0 d=0]\n  |-  ^-  @\n  ?:  ?&amp;(=(0 a) =(0 b))  d\n  %=  $\n    a   (rsh 0 a)\n    b   (rsh 0 b)\n    c   +(c)\n    d   %+  add  d\n          %+  lsh  [0 c]\n          ?&amp;  =(0 (end 0 a))\n              =(0 (end 0 b))\n          ==\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(con 0b0 0b1)\n      1</p>\n\n<pre><code>&gt; (con 0 1)\n1\n\n&gt; (con 0 0)\n0\n\n&gt; `@ub`(con 0b1111.0000 0b1.0011)\n0b1111.0011\n\n&gt; (con 4 4)\n4\n\n&gt; (con 10.000 234)\n10.234\n\n&gt; `@ub`534\n0b10.0001.0110\n\n&gt; `@ub`987\n0b11.1101.1011\n\n&gt; `@ub`(con 534 987)\n0b11.1101.1111\n\n&gt; (con 534 987)\n991\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>con</code> performs the bitwise operation OR, a concept that's general to computing.\nIt compares each bit of its first sample to the corresponding bit of its second\nsample. If either bit is 1, the corresponding product bit is set\nto 1. Otherwise, the corresponding product bit is set to 0.</p>\n\n<p>Take the example of <code>(con 8 12)</code>. It's easy to see how this operation works when\nits samples and its product are stacked.</p>\n\n<p><code>\n    0b1000     ::  8  (sample)\n    0b1100     ::  12 (sample)\n    0b1100     ::  12 (product)\n</code></p>\n\n<p>Note that the names <code>con</code> (conjunction) for OR and <code>dis</code> (disjunction) for AND\nare given to opposite operators in Hoon when compared to other computing\ncontexts. That's because <code>0</code> is true in Hoon and <code>1</code> is false. Outside of Hoon,\nwhere <code>0</code> is false and <code>1</code> is true, bitwise OR is the logical disjunction and\nbitwise AND is the logical conjunction.</p>\n\n<hr />\n",
        "keys": [
            "con"
        ]
    },
    {
        "doc": "<h2><code>++dis</code></h2>\n\n<p>Binary AND</p>\n\n<p>Computes the bitwise logical AND of two atoms, <code>a</code> and <code>b</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dis\n  ~/  %dis\n  |=  [a=@ b=@]\n  =|  [c=@ d=@]\n  |-  ^-  @\n  ?:  ?|(=(0 a) =(0 b))  d\n  %=  $\n    a   (rsh 0 a)\n    b   (rsh 0 b)\n    c   +(c)\n    d   %+  add  d\n          %+  lsh  [0 c]\n          ?|  =(0 (end 0 a))\n              =(0 (end 0 b))\n          ==\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>9\n      0b1001</p>\n\n<pre><code>&gt; `@ub`5\n0b101\n\n&gt; `@ub`(dis 9 5)\n0b1\n\n&gt; (dis 9 5)\n1\n\n&gt; `@ub`534\n0b10.0001.0110\n\n&gt; `@ub`987\n0b11.1101.1011\n\n&gt; `@ub`(dis 534 987)\n0b10.0001.0010\n\n&gt; (dis 534 987)\n530\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>dis</code> performs the bitwise AND, an operation general to computing. It compares\neach bit of its first sample to the corresponding bit of its second sample. If\nboth bits are 1, the corresponding product bit is set to 1. Otherwise, the\ncorresponding product bit is set to 0.</p>\n\n<p>Take the example of <code>(dis 8 12)</code>. It's easy to see how this operation works when\nits samples and its product are stacked.</p>\n\n<p><code>\n    0b1000     ::  8  (sample)\n    0b1100     ::  12 (sample)\n    0b1000     ::  8  (product)\n</code></p>\n\n<p>Note that the names <code>dis</code> (disjunction) for AND and <code>con</code> (conjuction) for OR\nare given to opposite operators in Hoon when compared to other computing\ncontexts. That's because <code>0</code> is true in Hoon and <code>1</code> is false. Outside of Hoon,\nwhere <code>0</code> is false and <code>1</code> is true, bitwise OR is the logical disjunction and\nbitwise AND is the logical conjunction.</p>\n\n<hr />\n",
        "keys": [
            "dis"
        ]
    },
    {
        "doc": "<h2><code>++mix</code></h2>\n\n<p>Binary XOR</p>\n\n<p>Produces the bitwise logical XOR of two atoms, <code>a</code> and <code>b</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom</p>\n\n<p><code>b</code> is an atom</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mix\n  ~/  %mix\n  |=  [a=@ b=@]\n  ^-  @\n  =+  [c=0 d=0]\n  |-\n  ?:  ?&amp;(=(0 a) =(0 b))  d\n  %=  $\n    a   (rsh 0 a)\n    b   (rsh 0 b)\n    c   +(c)\n    d   (add d (lsh [0 c] =((end 0 a) (end 0 b))))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>2\n      0b10</p>\n\n<pre><code>&gt; `@ub`3\n0b11\n\n&gt; `@ub`(mix 2 3)\n0b1\n\n&gt; (mix 2 3)\n1\n\n&gt; `@ub`(mix 2 2)\n0b0\n\n&gt; (mix 2 2)\n0\n\n&gt; `@ub`534\n0b10.0001.0110\n\n&gt; `@ub`987\n0b11.1101.1011\n\n&gt; `@ub`(mix 534 987)\n0b1.1100.1101\n\n&gt; (mix 534 987)\n461\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>mix</code> performs the bitwise XOR (exclusive-OR), an operation that's general to\ncomputing. compares each bit of its first sample to the corresponding bit of its\nsecond sample. If one bit is 0 and the other bit is 1, the corresponding product\nbit is set to 1. Otherwise, the corresponding product bit is set to 0.</p>\n\n<p>Take the example of <code>(mix 8 12)</code>. It's easy to see how this operation works when\nits samples and its product are stacked.</p>\n\n<p><code>\n    0b1000     ::  8  (sample)\n    0b1100     ::  12 (sample)\n     0b100     ::  4 (product)\n</code></p>\n\n<hr />\n",
        "keys": [
            "mix"
        ]
    },
    {
        "doc": "<h2><code>++not</code></h2>\n\n<p>Binary NOT</p>\n\n<p>Computes the bitwise logical NOT of the bottom <code>b</code> blocks of size <code>a</code>\nof <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a block size (see <a href=\"/reference/hoon/stdlib/1c\"><code>bloq</code></a>).</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  not  |=  [a=bloq b=@ c=@]\n  (mix c (dec (bex (mul b (bex a)))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>24\n      0b1.1000</p>\n\n<pre><code>&gt; (not 0 5 24)\n7\n\n&gt; `@ub`7\n0b111\n\n&gt; (not 2 5 24)\n1.048.551\n\n&gt; (not 2 5 1.048.551)\n24\n\n&gt; (not 1 1 (not 1 1 10))\n10\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>In computing in general, the bitwise operation NOT simply turns a binary\nnumber's <code>0</code>s into <code>1</code>s, and vice versa.</p>\n\n<p>In Hoon, we ask for a little more information to use <code>not</code>, because binary\nnumbers have a number of implicit leading zeroes differently depending on on\ntheir <a href=\"/reference/hoon/stdlib/1c\">block size</a>. Decimal <code>7</code>, for example, is <code>0b111</code> in binary, and\nhas one implicit zero in the context of a block of size <code>2</code>, which has a\nbitwidth of 4. Let's try <code>not</code> on <code>7</code> with a single block of size <code>2</code>.</p>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(not 2 1 0b111)\n      0b1000</p>\n\n<pre><code>&gt; `@u`0b1000\n8\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<p>This happened because <code>0b111</code> is considered as <code>0b0111</code> by the <code>not</code> operator\nwhen dealing with a single block of size <code>2</code>. The NOT of <code>7</code>, then, is <code>0b1000</code>,\nor <code>8</code> in decimal.</p>\n\n<p>When we pass <code>not</code> a single block of size <code>3</code>, there is a bitwidth of 8 to\nfill with binary information. So the remaining leading digits of <code>0b111</code> are,\nagain, treated as <code>0</code>.</p>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(not 3 1 0b111)\n      0b1111.1000</p>\n\n<pre><code>&gt; `@u`0b1111.1000\n248\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<p>This works when going to a smaller block size, too.</p>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(not 1 1 0b1011)\n      0b100</p>\n\n<pre><code>&gt; `@u`0b100\n4\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<p>What's happening here may not be readily apparent. But we're only flipping the\nlast block of size <code>1</code> (bitwidth 2) of the binary <code>0b111</code>. That is, we leave\nthe \"0b1\" piece just the same and manipulate the \"11\" that the number ends with.</p>\n\n<hr />\n",
        "keys": [
            "not"
        ]
    },
    {
        "doc": "<h2><code>++mug</code> {% #mug %}</h2>\n\n<p>murmur3 scrambler</p>\n\n<p>Hashes <code>a</code> with the 31-bit murmur3 non-cryptographic hash algorithm,\nproducing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mug\n  ~/  %mug\n  |=  a=*\n  |^  ?@  a  (mum 0xcafe.babe 0x7fff a)\n      =/  b  (cat 5 $(a -.a) $(a +.a))\n      (mum 0xdead.beef 0xfffe b)\n  ::\n  ++  mum\n    |=  [syd=@uxF fal=@F key=@]\n    =/  wyd  (met 3 key)\n    =|  i=@ud\n    |-  ^-  @F\n    ?:  =(8 i)  fal\n    =/  haz=@F  (muk syd wyd key)\n    =/  ham=@F  (mix (rsh [0 31] haz) (end [0 31] haz))\n    ?.(=(0 ham) ham $(i +(i), syd +(syd)))\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mug 10.000)\n  795.713.195\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mug 10.001)\n  420.521.697\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mug 1)\n  1.901.865.568\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mug (some 10))\n  750.200.080\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mug [1 2 3 4 5 ~])\n  1.565.443.491\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mug"
        ]
    },
    {
        "doc": "<h2><code>++muk</code></h2>\n\n<p>Standard MurmurHash3</p>\n\n<p>Implementation of the 32-bit\n<a href=\"https://en.wikipedia.org/wiki/MurmurHash#Algorithm\">MurmurHash3</a>\nnon-cryptographic hash algorithm. Takes <code>syd</code> as the seed, <code>len</code> as the key length\nin <a href=\"/reference/hoon/stdlib/2c\">blocks</a> of size 3, and <code>key</code> as the key, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>syd</code> is an atom.</p>\n\n<p><code>len</code> is an atom.</p>\n\n<p><code>key</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  muk                                                 ::  standard murmur3\n  ~%  %muk  ..muk  ~\n  =+  ~(. fe 5)\n  |=  [syd=@ len=@ key=@]\n  =.  syd      (end 5 syd)\n  =/  pad      (sub len (met 3 key))\n  =/  data     (weld (rip 3 key) (reap pad 0))\n  =/  nblocks  (div len 4)  ::  intentionally off-by-one\n  =/  h1  syd\n  =+  [c1=0xcc9e.2d51 c2=0x1b87.3593]\n  =/  blocks  (rip 5 key)\n  =/  i  nblocks\n  =.  h1  =/  hi  h1  |-\n    ?:  =(0 i)  hi\n    =/  k1  (snag (sub nblocks i) blocks)  ::  negative array index\n    =.  k1  (sit (mul k1 c1))\n    =.  k1  (rol 0 15 k1)\n    =.  k1  (sit (mul k1 c2))\n    =.  hi  (mix hi k1)\n    =.  hi  (rol 0 13 hi)\n    =.  hi  (sum (sit (mul hi 5)) 0xe654.6b64)\n    $(i (dec i))\n  =/  tail  (slag (mul 4 nblocks) data)\n  =/  k1    0\n  =/  tlen  (dis len 3)\n  =.  h1\n    ?+  tlen  h1  ::  fallthrough switch\n      %3  =.  k1  (mix k1 (lsh [0 16] (snag 2 tail)))\n          =.  k1  (mix k1 (lsh [0 8] (snag 1 tail)))\n          =.  k1  (mix k1 (snag 0 tail))\n          =.  k1  (sit (mul k1 c1))\n          =.  k1  (rol 0 15 k1)\n          =.  k1  (sit (mul k1 c2))\n          (mix h1 k1)\n      %2  =.  k1  (mix k1 (lsh [0 8] (snag 1 tail)))\n          =.  k1  (mix k1 (snag 0 tail))\n          =.  k1  (sit (mul k1 c1))\n          =.  k1  (rol 0 15 k1)\n          =.  k1  (sit (mul k1 c2))\n          (mix h1 k1)\n      %1  =.  k1  (mix k1 (snag 0 tail))\n          =.  k1  (sit (mul k1 c1))\n          =.  k1  (rol 0 15 k1)\n          =.  k1  (sit (mul k1 c2))\n          (mix h1 k1)\n    ==\n  =.  h1  (mix h1 len)\n  |^  (fmix32 h1)\n  ++  fmix32\n    |=  h=@\n    =.  h  (mix h (rsh [0 16] h))\n    =.  h  (sit (mul h 0x85eb.ca6b))\n    =.  h  (mix h (rsh [0 13] h))\n    =.  h  (sit (mul h 0xc2b2.ae35))\n    =.  h  (mix h (rsh [0 16] h))\n    h\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(muk 6 1 3)\n      3.427.677.118</p>\n\n<pre><code>&gt; (muk 6 2 'jerry')\n! exit\n\n&gt; (muk 6 2 'je')\n3.602.081.716\n\n&gt; (met 3 'jerry')\n5\n\n&gt; (met 3 'je')\n2\n\n&gt; (muk 6 5 'jerry')\n1.276.447.489\n\n&gt; (muk 6 15 'jerry')\n2.881.503.571\n\n&gt; =e (cut 3 [0 2] eny)                            :: `eny` is 512 bits of entropy (a random number).\n&gt; e\n44.228\n\n&gt; (muk e 11 10.000)\n246.077.549\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "muk"
        ]
    },
    {
        "doc": "<h2><code>++aor</code></h2>\n\n<p>Alphabetical order</p>\n\n<p>Computes whether <code>a</code> and <code>b</code> are in alphabetical order, producing a flag. Orders atoms before cells, and atoms in ascending LSB order.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  aor\n  ~/  %aor\n  |=  [a=* b=*]\n  ^-  ?\n  ?:  =(a b)  &amp;\n  ?.  ?=(@ a)\n    ?:  ?=(@ b)  |\n    ?:  =(-.a -.b)\n      $(a +.a, b +.b)\n    $(a -.a, b -.b)\n  ?.  ?=(@ b)  &amp;\n  |-\n  =+  [c=(end 3 a) d=(end 3 b)]\n  ?:  =(c d)\n    $(a (rsh 3 a), b (rsh 3 b))\n  (lth c d)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(aor 'a' 'b')\n  %.y\n  (aor 'b' 'a')\n  %.n\n  (aor 'a' 'a')\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(aor 1 2)\n  %.y\n  (aor 2 1)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(aor ['a' ~] 'b')\n  %.n\n  (aor 'b' ['a' ~])\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(aor ['a' ~] ['b' ~])\n  %.y\n  (aor ['b' ~] ['a' ~])\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(aor \"abca\" \"abcz\")\n  %.y\n  (aor \"abcz\" \"abca\")\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(aor 0b1011 0b1010)\n  %.n\n  (aor 0b1010 0b1011)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(aor [1 2] [2 1])\n  %.y\n  (aor [2 1] [1 2])\n  %.n\n  ```</p>\n</blockquote>\n\n<p>Note the possible differences with <code>+dor</code> due to comparing one byte at a time:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(aor 0b1001.0000.0000 0b1000.1000.0000)\n  %.y\n  (dor 0b1001.0000.0000 0b1000.1000.0000)\n  %.n\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>This is different than <a href=\"#dor\">+dor</a> in that it compares atoms one byte at a time, while <code>+dor</code> compares whole atoms at once. Note that because it simply compares bytes, it doesn't account for multi-byte UTF-8 characters and the like.</p>\n\n<hr />\n",
        "keys": [
            "aor"
        ]
    },
    {
        "doc": "<h2><code>++dor</code></h2>\n\n<p>Depth order</p>\n\n<p>Computes whether <code>a</code> and <code>b</code> are in ascending tree depth order, producing a flag. Orders atoms before cells, and atoms in ascending numerical order.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dor\n  ~/  %dor\n  |=  [a=* b=*]\n  ^-  ?\n  ?:  =(a b)  &amp;\n  ?.  ?=(@ a)\n    ?:  ?=(@ b)  |\n    ?:  =(-.a -.b)\n      $(a +.a, b +.b)\n    $(a -.a, b -.b)\n  ?.  ?=(@ b)  &amp;\n  (lth a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dor 1 2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(dor 2 1)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(dor ~[1 2 3] ~[1 2 4])\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(dor ~[1 2 4] ~[1 2 3])\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(dor <code>(list @)</code>~[99 100 10.000] ~[99 101 10.000])\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(dor ~[99 101 10.999] <code>(list @)</code>~[99 100 10.000])\n  %.n\n  ```</p>\n</blockquote>\n\n<p>Note the possible difference with <a href=\"#aor\">+aor</a> due to comparing whole atoms rather than one byte at a time:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(aor 0b1001.0000.0000 0b1000.1000.0000)\n  %.y\n  (dor 0b1001.0000.0000 0b1000.1000.0000)\n  %.n\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>If <code>a</code> and <code>b</code> are both atoms, <code>dor</code> is equivalent to <a href=\"/reference/hoon/stdlib/1a#lte\"><code>lte</code></a>. If they're\ncells, <code>dor</code> recurses on the heads, and then if the heads are the same it checks\nthe tails.</p>\n\n<p>If one sample is a cell and the other is an atom, the cell sample is treated as\n\"greater.\"</p>\n\n<hr />\n",
        "keys": [
            "dor"
        ]
    },
    {
        "doc": "<h2><code>++gor</code></h2>\n\n<p>Mug order</p>\n\n<p>Computes whether of <code>(mug a)</code> and <code>(mug b)</code> are in ascending numeric order,\nproducing a flag. If the <code>mug</code> hashes are equal, <code>a</code> and <code>b</code> are compared by\n<code>dor</code> instead.</p>\n\n<p><a href=\"/reference/hoon/stdlib/2e#mug\"><code>mug</code></a> is the the 31-bit nonzero FNV-1a hash algorithm.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gor\n  ~/  %gor\n  |=  [a=* b=*]\n  ^-  ?\n  =+  [c=(mug a) d=(mug b)]\n  ?:  =(c d)\n    (dor a b)\n  (lth c d)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gor 'd' 'c')\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>'d'\n  'd'\n  'c'\n  'c'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ud</code>'d'\n  100\n  <code>@ud</code>'c'\n  99</p>\n</blockquote>\n\n<blockquote>\n  <p>(mug 'd')\n  1.628.185.714\n  (mug 'c')\n  1.712.073.811</p>\n</blockquote>\n\n<blockquote>\n  <p>(gor 'd' 'c')\n  %.y\n  (gor 'c' 'd')\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gor \"foo\" \"bar\")\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gor (some 10) <code>(list @)</code>[1 2 3 ~])\n  %.n\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>map</code>s use <code>gor</code> on the key for horizontal ordering and <code>mor</code> for\nvertical order. <code>map</code>s only look at the keys (the head of the key-value pair\nelements) for ordering.</p>\n\n<hr />\n",
        "keys": [
            "gor"
        ]
    },
    {
        "doc": "<h2><code>++mor</code></h2>\n\n<p>(more) mug order</p>\n\n<p>Computes whether the double-hashes <code>(mug (mug a))</code> and <code>(mug (mug b))</code> are in\nascending numeric order, producing a flag. If the double-<code>mug</code> hashes are\nequal, <code>a</code> and <code>b</code> are compared by <code>dor</code> instead.</p>\n\n<p><a href=\"/reference/hoon/stdlib/2e#mug\"><code>mug</code></a> is the the 31-bit nonzero FNV-1a hash algorithm.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun</p>\n\n<p><code>b</code> is a noun</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mor\n  ~/  %mor\n  |=  [a=* b=*]\n  ^-  ?\n  =+  [c=(mug (mug a)) d=(mug (mug b))]\n  ?:  =(c d)\n    (dor a b)\n  (lth c d)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mor 'f' 'g')\n      %.y</p>\n\n<pre><code>&gt; [(mug 'f') (mug 'g')]\n[1.661.740.952 1.644.963.335]\n\n&gt; [(mug (mug 'f')) (mug (mug 'g'))]\n[261.421.509 1.861.258.547]\n\n&gt; (mor 'a' 'z')\n%.n\n\n&gt; (mor 43.326 41.106)\n%.n\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Maps, sets, and queues all use <code>mor</code> to check for vertical ordering. Maps and\nsets also use <code>gor</code> for horizontal order, but queues use\nvertical ordering alone.</p>\n\n<p>Since hashing removes correlation, double-<code>mug</code>ging with <code>mor</code> removes\ncorrelation with single-<code>mug</code>ged <code>gor</code>. Vertical order becomes uncorrelated\nwith horizontal order.</p>\n\n<hr />\n",
        "keys": [
            "mor"
        ]
    },
    {
        "doc": "<h2><code>++pow</code></h2>\n\n<p>Computes <code>a</code> raised to the power of <code>b</code>, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pow\n  ~/  %pow\n  |=  [a=@ b=@]\n  ?:  =(b 0)  1\n  |-  ?:  =(b 1)  a\n  =+  c=$(b (div b 2))\n  =+  d=(mul c c)\n  ?~  (dis b 1)  d  (mul d a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(pow 2 6)\n      64</p>\n\n<pre><code>&gt; (pow 6 2)\n36\n\n&gt; (pow 7 (add 2 2))\n2.401\n\n&gt; (pow 2 0)\n1\n\n&gt; `@ux`(pow 0x1b 2)\n0x2d9\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pow"
        ]
    },
    {
        "doc": "<h2><code>++sqt</code></h2>\n\n<p>Computes the square root of <code>a</code> and its remainder.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of atoms.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt\n  ~/  %sqt\n  |=  a=@  ^-  [p=@ q=@]\n  ?~  a  [0 0]\n  =+  [q=(div (dec (xeb a)) 2) r=0]\n  =-  [-.b (sub a +.b)]\n  ^=  b  |-\n  =+  s=(add r (bex q))\n  =+  t=(mul s s)\n  ?:  =(q 0)\n    ?:((lte t a) [s t] [r (mul r r)])\n  ?:  (lte t a)\n    $(r s, q (dec q))\n  $(q (dec q))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sqt 4)\n      [p=2 q=0]</p>\n\n<pre><code>&gt; (sqt 6)\n[p=2 q=2]\n\n&gt; (sqt 2)\n[p=1 q=1]\n\n&gt; (sqt 0b1101)\n[p=3 q=4]\n\n&gt; `@ux`(sqt 0b1101)\n! exit\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sqt"
        ]
    },
    {
        "doc": "<h2><code>++in</code></h2>\n\n<p>Set operations</p>\n\n<p>Core whose arms contain a variety of functions that operate on <code>set</code>s. Its\nsample accepts the input <code>set</code> to be manipulated.</p>\n\n<h4>Accepts</h4>\n\n<p>A <code>set</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n  ~/  %in\n  =|  a=(tree)\n  |@\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(. in (sy \"asd\"))\n  &lt;16.ufw [a=?(%~ [?(n=@tD n=#1) l=nlr(?(@tD #1)) r=nlr(?(@tD ^#1.?(@tD #1)))]) &lt;123.zao 46.hgz 1.pnw %140>]&gt;\n  ```</p>\n</blockquote>\n\n<h3><code>++all:in</code></h3>\n\n<p>Logical AND</p>\n\n<p>Computes the logical AND on every element in <code>a</code> slammed with <code>b</code>, producing a\nflag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>set</code>, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a gate that accepts a noun and produces a flag.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  all\n  ~/  %all\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    &amp;\n  ?&amp;((b n.a) $(a l.a) $(a r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(all in (silt ~[1 2 3 4])) |=(a=@ (lth a 5)))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(all in (silt ~[1 2 3 4 5])) |=(a=@ (lth a 5)))\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++any:in</code></h3>\n\n<p>Logical OR</p>\n\n<p>Computes the logical OR on every element of <code>a</code> slammed with <code>b</code>, producing a\nflag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>set</code>, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a gate that accepts a noun and produces a flag.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  any\n  ~/  %any\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    |\n  ?|((b n.a) $(a l.a) $(a r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(any in (silt ~[2 3 4 5])) |=(a=@ (lth a 3)))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(any in (silt ~[3 4 5])) |=(a=@ (lth a 3)))\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++apt:in</code></h3>\n\n<p>Check correctness</p>\n\n<p>Computes whether <code>a</code> has a correct horizontal order and a correct vertical\norder, producing a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  apt\n  =&lt;  $\n  ~/  %apt\n  =|  [l=(unit) r=(unit)]\n  |.  ^-  ?\n  ?~  a   &amp;\n  ?&amp;  ?~(l &amp; (gor n.a u.l))\n      ?~(r &amp; (gor u.r n.a))\n      ?~(l.a &amp; ?&amp;((mor n.a n.l.a) $(a l.a, l `n.a)))\n      ?~(r.a &amp; ?&amp;((mor n.a n.r.a) $(a r.a, r `n.a)))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(apt in ~)\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (silt ~[1 2 3])\n  a\n  [n=2 l={1} r={3}]\n  ~(apt in a)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>=z ?~(a ~ a(n 10))\n  z\n  [n=10 l={1} r={3}]\n  ~(apt in z)\n  %.n\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See section <a href=\"/reference/hoon/stdlib/2f\"><code>2f</code></a> for more information on noun ordering.</p>\n\n<hr />\n\n<h3><code>++bif:in</code></h3>\n\n<p>Bifurcate</p>\n\n<p>Splits set <code>a</code> into sets <code>l</code> and <code>r</code>, which contain the items either side of <code>b</code> but not including <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of two sets.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bif\n  ~/  %bif\n  |*  b=*\n  ^+  [l=a r=a]\n  =&lt;  +\n  |-  ^+  a\n  ?~  a\n    [b ~ ~]\n  ?:  =(b n.a)\n    a\n  ?:  (gor b n.a)\n    =+  c=$(a l.a)\n    ?&gt;  ?=(^ c)\n    c(r a(l r.c))\n  =+  c=$(a r.a)\n  ?&gt;  ?=(^ c)\n  c(l a(r l.c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(set @)</code>(silt (gulf 1 20))\n  a\n  {17 8 20 13 11 5 19 7 15 10 18 14 6 12 9 1 2 3 16 4}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(bif in a) 10)\n  [l=[n=11 l={17 8 20 13} r={5 19 7 15}] r=[n=12 l={18 14 6} r={9 1 2 3 16 4}]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>[(set @) (set @)]</code>(~(bif in a) 10)\n  [{17 8 20 13 11 5 19 7 15} {18 14 6 12 9 1 2 3 16 4}]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Note that <code>set</code>s are horizontally ordered by the <a href=\"/reference/hoon/stdlib/2e#mug\">mug</a> hash of their items and vertically ordered by the double-<code>mug</code> hash of their items. This means bifurcating the set of numbers <code>(silt ~[10 20 30 40 50])</code> at <code>30</code> will not produce <code>[{10 20} {40 50}]</code>, but rather <code>[{20} {10 40 50}]</code> due to the tree structure resulting from their <code>mug</code> hashes.</p>\n\n<hr />\n\n<h3><code>++del:in</code></h3>\n\n<p>Remove noun</p>\n\n<p>Removes <code>b</code> from the <code>set</code> <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  del\n  ~/  %del\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    ~\n  ?.  =(b n.a)\n    ?:  (gor b n.a)\n      a(l $(a l.a))\n    a(r $(a r.a))\n  |-  ^-  [$?(~ _a)]\n  ?~  l.a  r.a\n  ?~  r.a  l.a\n  ?:  (mor n.l.a n.r.a)\n    l.a(r $(l.a r.l.a))\n  r.a(l $(r.a l.r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(set @)</code>(~(del in (silt ~[1 2 3 4 5])) 3)\n  {5 1 2 4}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(set @t)</code>(~(del in (silt ~['foo' 'bar' 'baz'])) 'bar')\n  {'baz' 'foo'}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(set @)</code>(~(del in (silt ~[1 2 3 4 5])) 10)\n  {5 1 2 3 4}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(set @)</code>(~(del in ~) 10)\n  {}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dif:in</code></h3>\n\n<p>Difference</p>\n\n<p>Computes the difference between <code>a</code> and <code>b</code>, producing the set of items in <code>a</code>\nthat are not in <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a set.</p>\n\n<h4>Produces</h4>\n\n<p>A set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dif\n  ~/  %dif\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      a\n    =+  c=(bif n.b)\n    ?&gt;  ?=(^ c)\n    =+  d=$(a l.c, b l.b)\n    =+  e=$(a r.c, b r.b)\n    |-  ^-  [$?(~ _a)]\n    ?~  d  e\n    ?~  e  d\n    ?:  (mor n.d n.e)\n      d(r $(d r.d))\n    e(l $(e l.e))\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (silt ~[1 2 3 4 5])\n  =b (silt ~[3 4])</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @)</code>(~(dif in a) b)\n  {5 1 2}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dig:in</code></h3>\n\n<p>Address b in a</p>\n\n<p>Produce the tree address of <code>b</code> within <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>The <code>unit</code> of an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dig\n  |=  b=*\n  =+  c=1\n  |-  ^-  (unit @)\n  ?~  a  ~\n  ?:  =(b n.a)  [~ u=(peg c 2)]\n  ?:  (gor b n.a)\n    $(a l.a, c (peg c 6))\n  $(a r.a, c (peg c 7))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (silt ~[1 2 3 4 5 6 7])</p>\n</blockquote>\n\n<blockquote>\n  <p>-.a\n  n=6</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dig in a) 7)\n  [~ 12]</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dig in a) 2)\n  [~ 60]</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dig in a) 6)\n  [~ 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dig in a) 10)\n  ~\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>For more on the tree addressing system, see section <a href=\"/reference/hoon/stdlib/1b\">1b</a>.</p>\n\n<hr />\n\n<h3><code>++gas:in</code></h3>\n\n<p>Concatenate</p>\n\n<p>Insert the elements of a <code>list</code> <code>b</code> into a <code>set</code> <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>set</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gas\n  ~/  %gas\n  |=  b=(list _?&gt;(?=(^ a) n.a))\n  |-  ^+  a\n  ?~  b\n    a\n  $(b t.b, a (put i.b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (silt ~['foo' 'bar' 'baz'])\n  <code>(set @t)</code>a\n  {'bar' 'baz' 'foo'}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @t)</code>(~(gas in a) ~['foo' 'foo' 'foo' 'foo'])\n  {'bar' 'baz' 'foo'}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @t)</code>(~(gas in a) ~['abc' 'xyz' '123'])\n  {'xyz' 'bar' 'baz' 'foo' 'abc' '123'}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++has:in</code></h3>\n\n<p>b in a?</p>\n\n<p>Checks if <code>b</code> is an element of <code>a</code>, producing a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  has\n  ~/  %has\n  |*  b=*\n  ^-  ?\n  %.  [~ b]\n  |=  b=(unit _?&gt;(?=(^ a) n.a))\n  =&gt;  .(b ?&gt;(?=(^ b) u.b))\n  |-  ^-  ?\n  ?~  a\n    |\n  ?:  =(b n.a)\n    &amp;\n  ?:  (gor b n.a)\n    $(a l.a)\n  $(a r.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (silt ~[1 2 3 4 5])</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(has in a) 2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(has in a) 6)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++int:in</code></h3>\n\n<p>Intersection</p>\n\n<p>Produces a set of the intersection between two sets of the same type,\n<code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a set.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>set</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  int\n  ~/  %int\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      ~\n    ?~  a\n      ~\n    ?.  (mor n.a n.b)\n      $(a b, b a)\n    ?:  =(n.b n.a)\n      a(l $(a l.a, b l.b), r $(a r.a, b r.b))\n    ?:  (gor n.b n.a)\n      %-  uni(a $(a l.a, r.b ~))  $(b r.b)\n    %-  uni(a $(a r.a, l.b ~))  $(b l.b)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(set @tD)</code>(~(int in (silt \"foobar\")) (silt \"bar\"))\n  {'r' 'b' 'a'}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @tD)</code>(~(int in (silt \"foobar\")) ~)\n  {}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @tD)</code>(~(int in (silt \"foobar\")) (silt \"baz\"))\n  {'b' 'a'}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++put:in</code></h3>\n\n<p>Put b in a</p>\n\n<p>Add an element <code>b</code> to the set <code>a</code>, producing a set.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>set</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  put\n  ~/  %put\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    [b ~ ~]\n  ?:  =(b n.a)\n    a\n  ?:  (gor b n.a)\n    =+  c=$(a l.a)\n    ?&gt;  ?=(^ c)\n    ?:  (mor n.a n.c)\n      a(l c)\n    c(r a(l r.c))\n  =+  c=$(a r.a)\n  ?&gt;  ?=(^ c)\n  ?:  (mor n.a n.c)\n    a(r c)\n  c(l a(r l.c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(set @)</code>(~(put in (silt ~[1 2 3])) 4)\n  {1 2 3 4}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @)</code>(~(put in <code>(set @)</code>~) 42)\n  {42}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rep:in</code></h3>\n\n<p>Accumulate</p>\n\n<p>Accumulate the elements of <code>a</code> using binary gate <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>set</code>, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rep\n  ~/  %rep\n  |*  b=_=&gt;(~ |=([* *] +&lt;+))\n  |-\n  ?~  a  +&lt;+.b\n  $(a r.a, +&lt;+.b $(a l.a, +&lt;+.b (b n.a +&lt;+.b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(rep in (silt ~[1 2 3 4 5])) add)\n  b=15\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(~(rep in (silt ~['foo' 'bar' 'baz'])) |=(a=[@ @] (cat 3 a)))\n  'foobarbaz'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++run:in</code></h3>\n\n<p>Apply gate to set</p>\n\n<p>Produce a <code>set</code> containing the products of gate <code>b</code> applied to each element\nin <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>set</code>.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  run\n  ~/  %run\n  |*  b=gate\n  =+  c=`(set _?&gt;(?=(^ a) (b n.a)))`~\n  |-  ?~  a  c\n  =.  c  (~(put in c) (b n.a))\n  =.  c  $(a l.a, c c)\n  $(a r.a, c c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=s (silt ~[\"a\" \"A\" \"b\" \"c\"])\n  <code>(set tape)</code>s\n  {\"A\" \"a\" \"c\" \"b\"}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(run in s) cuss)\n  {\"A\" \"C\" \"B\"}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tap:in</code></h3>\n\n<p>Set to list</p>\n\n<p>Flattens the <code>set</code> <code>a</code> into a <code>list</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an set.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tap\n  =&lt;  $\n  ~/  %tap\n  =+  b=`(list _?&gt;(?=(^ a) n.a))`~\n  |.  ^+  b\n  ?~  a\n    b\n  $(a r.a, b [n.a $(a l.a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(tap in (silt \"foobar\"))\n  \"oafbr\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(tap in (silt ~[1 2 3 4 5]))\n  ~[4 3 2 1 5]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++uni:in</code></h3>\n\n<p>Union</p>\n\n<p>Produces a set of the union between two sets of the same type, <code>a</code> and\n<code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a set, and is the sample of <code>+in</code>.</p>\n\n<p><code>b</code> is a set.</p>\n\n<h4>Produces</h4>\n\n<p>A set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  uni\n  ~/  %uni\n  =+  b=a\n  |@\n  ++  $\n    ?:  =(a b)  a\n    |-  ^+  a\n    ?~  b\n      a\n    ?~  a\n      b\n    ?:  =(n.b n.a)\n      b(l $(a l.a, b l.b), r $(a r.a, b r.b))\n    ?:  (mor n.a n.b)\n      ?:  (gor n.b n.a)\n        $(l.a $(a l.a, r.b ~), b r.b)\n      $(r.a $(a r.a, l.b ~), b l.b)\n    ?:  (gor n.a n.b)\n      $(l.b $(b l.b, r.a ~), a r.a)\n    $(r.b $(b r.b, l.a ~), a l.a)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (silt ~[1 2 3 4 5])\n  =b (silt ~[4 5 6 7 8])</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @)</code>(~(uni in a) b)\n  {8 5 7 6 1 2 3 4}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @)</code>(~(uni in a) ~)\n  {5 1 2 3 4}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @)</code>(~(uni in <code>(set @)</code>~) b)\n  {8 5 7 6 4}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++wyt:in</code></h3>\n\n<p>Set size</p>\n\n<p>Produces the number of elements in set <code>a</code> as an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an set.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p>```hoon\n++  wyt\n  =&lt;  $\n  ~%  %wyt  +  ~\n  |.  ^-  @</p>\n\n<h2>  ?~(a 0 +((add $(a l.a) $(a r.a))))</h2>\n\n<p>```</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(wyt in (silt ~[1 2 3 4]))\n  4\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(wyt in <code>(set @)</code>~)\n  0\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "in"
        ]
    },
    {
        "doc": "<h2><code>++by</code></h2>\n\n<p>Map operations</p>\n\n<p>Container arm for map operation arms. A map is a set of key-value pairs. The\ncontained arms inherit its sample map, <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  by\n  ~/  %by\n  =|  a=(tree (pair))  ::  (map)\n  =*  node  ?&gt;(?=(^ a) n.a)\n  |@\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(. by (malt (limo ~[a+1 b+2 c+3])))\n  &lt; 27.jus\n    [   a\n      ?(\n        %~\n        [ n=[?(p=%a p=%b p=%c) q=@ud]\n          l=nlr([p=?(%a %b %c) q=@ud])\n          r=nlr([p=?(%a %b %c) q=@ud])\n        ]\n      )\n      &lt;123.zao 46.hgz 1.pnw %140>\n    ]</p>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++all:by</code></h3>\n\n<p>Logical AND</p>\n\n<p>Computes the logical AND on the results of slamming every element in map <code>a</code>\nwith gate <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  all\n  ~/  %all\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    &amp;\n  ?&amp;((b q.n.a) $(a l.a) $(a r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (malt (limo ~[a+1 b+[2 3]]))</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(all by a) |=(a=* ?@(a &amp; |)))\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (malt (limo ~[a+1 b+2 c+3 d+4 e+5]))</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(all by a) |=(a=@ (lte a 6)))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(all by a) |=(a=@ (lte a 4)))\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++any:by</code></h3>\n\n<p>Logical OR</p>\n\n<p>Computes the logical OR on the results of slamming every element with\ngate <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a wet gate.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  any\n  ~/  %any\n  |*  b=$-(* ?)\n  |-  ^-  ?\n  ?~  a\n    |\n  ?|((b q.n.a) $(a l.a) $(a r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (malt (limo ~[a+1 b+[2 3]]))</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(any by a) |=(a=* ?@(a &amp; |)))\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (malt (limo ~[a+1 b+2 c+3 d+4 e+5]))</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(any by a) |=(a=@ (lte a 4)))\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++apt:by</code></h3>\n\n<p>Check correctness</p>\n\n<p>Computes whether <code>a</code> has a correct horizontal order and a correct vertical\norder, producing a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  apt\n  =&lt;  $\n  ~/  %apt\n  =|  [l=(unit) r=(unit)]\n  |.  ^-  ?\n  ?~  a   &amp;\n  ?&amp;  ?~(l &amp; &amp;((gor p.n.a u.l) !=(p.n.a u.l)))\n      ?~(r &amp; &amp;((gor u.r p.n.a) !=(u.r p.n.a)))\n      ?~  l.a   &amp;\n      &amp;((mor p.n.a p.n.l.a) !=(p.n.a p.n.l.a) $(a l.a, l `p.n.a))\n      ?~  r.a   &amp;\n      &amp;((mor p.n.a p.n.r.a) !=(p.n.a p.n.r.a) $(a r.a, r `p.n.a))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (malt <code>(list [@tas @])</code>~[a+1 b+2 c+3 d+4 e+5])</p>\n</blockquote>\n\n<blockquote>\n  <p>~(apt by a)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>=z ?~(a ~ a(p.n <code>@tas</code>%z))</p>\n</blockquote>\n\n<blockquote>\n  <p>z\n  [n=[p=%z q=2] l={[p=%e q=5]} r={[p=%d q=4] [p=%a q=1] [p=%c q=3]}]</p>\n</blockquote>\n\n<blockquote>\n  <p>~(apt by z)\n  %.n\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See section <a href=\"/reference/hoon/stdlib/2f\"><code>2f</code></a> for more information on noun ordering.</p>\n\n<h3><code>++bif:by</code></h3>\n\n<p>Bifurcate</p>\n\n<p>Splits map <code>a</code> into two maps <code>l</code> and <code>r</code>, which contain the items either side of key <code>b</code> with value <code>c</code> but not including <code>b</code>-<code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<p><code>c</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of two maps.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bif\n  ~/  %bif\n  |*  [b=* c=*]\n  ^+  [l=a r=a]\n  =&lt;  +\n  |-  ^+  a\n  ?~  a\n    [[b c] ~ ~]\n  ?:  =(b p.n.a)\n    ?:  =(c q.n.a)\n      a\n    a(n [b c])\n  ?:  (gor b p.n.a)\n    =+  d=$(a l.a)\n    ?&gt;  ?=(^ d)\n    d(r a(l r.d))\n  =+  d=$(a r.a)\n  ?&gt;  ?=(^ d)\n  d(l a(r l.d))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (malt <code>(list [@tas @])</code>~[a+1 b+2 c+3 d+4 e+5])</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(bif by a) b+2)\n  [l=[n=[p=%e q=5] l=~ r=~] r=[n=[p=%d q=4] l=~ r=[n=[p=%c q=3] l={[p=%a q=1]} r={}]]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>[(map @tas @) (map @tas @)]</code>(~(bif by a) b+2)\n  [{[p=%e q=5]} {[p=%d q=4] [p=%a q=1] [p=%c q=3]}]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Note that <code>map</code>s are horizontally ordered by the <a href=\"/reference/hoon/stdlib/2e#mug\">mug</a> hash of their keys and vertically ordered by the double-<code>mug</code> hash of their keys. This means bifurcating the map <code>(malt ~[10^10 20^20 30^30 40^40 50^50])</code> at <code>30^30</code> will not produce <code>[{10^10 20^20} {40^40 50^50}]</code>, but rather <code>[{20^20} {10^10 40^40 50^50}]</code> due to the tree structure resulting from their <code>mug</code> hashes.</p>\n\n<hr />\n\n<h3><code>++del:by</code></h3>\n\n<p>Delete</p>\n\n<p>Produces map <code>a</code> with the element located at key <code>b</code> removed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a key as a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  del\n  ~/  %del\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    ~\n  ?.  =(b p.n.a)\n    ?:  (gor b p.n.a)\n      a(l $(a l.a))\n    a(r $(a r.a))\n  |-  ^-  [$?(~ _a)]\n  ?~  l.a  r.a\n  ?~  r.a  l.a\n  ?:  (mor p.n.l.a p.n.r.a)\n    l.a(r $(l.a r.l.a))\n  r.a(l $(r.a l.r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(del by a) %z)\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(del by a) %b)\n  {[p=%d q=4] [p=%a q=1] [p=%c q=3]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dif:by</code></h3>\n\n<p>Difference</p>\n\n<p>Computes the difference between <code>a</code> and <code>b</code>, producing the map of key-value pairs in <code>a</code> whose keys are not in <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>map</code>, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a <code>map</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>map</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dif\n  ~/  %dif\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      a\n    =+  c=(bif p.n.b q.n.b)\n    ?&gt;  ?=(^ c)\n    =+  d=$(a l.c, b l.b)\n    =+  e=$(a r.c, b r.b)\n    |-  ^-  [$?(~ _a)]\n    ?~  d  e\n    ?~  e  d\n    ?:  (mor p.n.d p.n.e)\n      d(r $(d r.d))\n    e(l $(e l.e))\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  =b <code>(map @tas @)</code>(malt (limo ~[c+3 d+4 e+5 f+6]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n  b\n  {[p=%e q=5] [p=%d q=4] [p=%f q=6] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(dif by a) b)\n  {[p=%b q=2] [p=%a q=1]}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  =b <code>(map @tas @)</code>(malt (limo ~[a+2 e+4 f+5]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n  b\n  {[p=%e q=4] [p=%f q=5] [p=%a q=2]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(dif by a) b)\n  {[p=%b q=2] [p=%d q=4] [p=%c q=3]}\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>This only compares keys, so if both maps contain the same key with different values, that key-value pair is not considered a difference and will not be included in the resulting map.</p>\n\n<hr />\n\n<h3><code>++dig:by</code></h3>\n\n<p>Address of key</p>\n\n<p>Produce the address of key <code>b</code> within map <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a key as a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A unit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dig\n  |=  b=*\n  =+  c=1\n  |-  ^-  (unit @)\n  ?~  a  ~\n  ?:  =(b p.n.a)  [~ u=(peg c 2)]\n  ?:  (gor b p.n.a)\n    $(a l.a, c (peg c 6))\n  $(a r.a, c (peg c 7))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dig by a) %a)\n  [~ 252]</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dig by a) %b)\n  [~ 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dig by a) %e)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gas:by</code></h3>\n\n<p>Concatenate</p>\n\n<p>Insert a list of key-value pairs <code>b</code> into map <code>a</code>. For a key which exists in both <code>a</code> and <code>b</code>, the value is replaced with the value in <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a list of cells of key-value nouns <code>p</code> and <code>q</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gas\n  ~/  %gas\n  |*  b=(list [p=* q=*])\n  =&gt;  .(b `(list _?&gt;(?=(^ a) n.a))`b)\n  |-  ^+  a\n  ?~  b\n    a\n  $(b t.b, a (put p.i.b q.i.b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(gas by a) ~[e+5 f+6 g+7])\n  {[p=%e q=5] [p=%b q=2] [p=%d q=4] [p=%f q=6] [p=%g q=7] [p=%a q=1] [p=%c q=3]}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2]))\n  a\n  {[p=%b q=2] [p=%a q=1]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(gas by a) ~[a+100 b+200])\n  {[p=%b q=200] [p=%a q=100]}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(gas by <code>(map @tas @)</code>~) ~[a+100 b+200])\n  {[p=%b q=200] [p=%a q=100]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++get:by</code></h3>\n\n<p>Grab unit value</p>\n\n<p>Produce the unit value of the value located at key <code>b</code> within map <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a key as a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A unit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  get\n  ~/  %get\n  |*  b=*\n  =&gt;  .(b `_?&gt;(?=(^ a) p.n.a)`b)\n  |-  ^-  (unit _?&gt;(?=(^ a) q.n.a))\n  ?~  a\n    ~\n  ?:  =(b p.n.a)\n    (some q.n.a)\n  ?:  (gor b p.n.a)\n    $(a l.a)\n  $(a r.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(get by a) %a)\n  [~ 1]</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(get by a) %b)\n  [~ 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(get by a) %z)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++got:by</code></h3>\n\n<p>Assert</p>\n\n<p>Produce the value located at key <code>b</code> within map <code>a</code>. Crash if key <code>b</code> does not\nexist.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a key as a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  got\n  |*  b=*\n  (need (get b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(got by a) %a)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(got by a) %b)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(got by a) %z)\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gut:by</code></h3>\n\n<p>Grab value with default</p>\n\n<p>Produce the value located at key <code>b</code> within map <code>a</code>. Use default value <code>c</code> if\nkey does not exist.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a key as a noun.</p>\n\n<p><code>c</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gut\n  |*  [b=* c=*]\n  (fall (get b) c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(gut by a) %a 9.999)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(gut by a) %b 9.999)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(gut by a) %z 9.999)\n  9.999\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++has:by</code></h3>\n\n<p>Key existence check</p>\n\n<p>Checks whether map <code>a</code> contains an element with key <code>b</code>, producing a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a key as a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  has\n  ~/  %has\n  |*  b=*\n  !=(~ (get b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(has by a) %a)\n  %.y\n  (~(has by a) %z)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++int:by</code></h3>\n\n<p>Intersection</p>\n\n<p>Produces a map of the (key) intersection between two maps of the same type, <code>a</code>\nand <code>b</code>. If both maps have an identical key that point to different values, the\nelement from map <code>b</code> is used.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a map.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  int\n  ~/  %int\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      ~\n    ?~  a\n      ~\n    ?:  (mor p.n.a p.n.b)\n      ?:  =(p.n.b p.n.a)\n        b(l $(a l.a, b l.b), r $(a r.a, b r.b))\n      ?:  (gor p.n.b p.n.a)\n        %-  uni(a $(a l.a, r.b ~))  $(b r.b)\n      %-  uni(a $(a r.a, l.b ~))  $(b l.b)\n    ?:  =(p.n.a p.n.b)\n      b(l $(b l.b, a l.a), r $(b r.b, a r.a))\n    ?:  (gor p.n.a p.n.b)\n      %-  uni(a $(b l.b, r.a ~))  $(a r.a)\n    %-  uni(a $(b r.b, l.a ~))  $(a l.a)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  =b <code>(map @tas @)</code>(malt (limo ~[c+3 d+4 e+5 f+6]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}\n  b\n  {[p=%e q=5] [p=%d q=4] [p=%f q=6] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(int by a) b)\n  {[p=%d q=4] [p=%c q=3]}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2]))\n  =b <code>(map @tas @)</code>(malt (limo ~[a+100 b+200]))\n  a\n  {[p=%b q=2] [p=%a q=1]}\n  b\n  {[p=%b q=200] [p=%a q=100]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(int by a) b)\n  {[p=%b q=200] [p=%a q=100]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++jab:by</code></h3>\n\n<p>Transform value</p>\n\n<p>Produce map <code>a</code> with the value at key <code>b</code> transformed by gate <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>map</code>, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a noun, and a key in <code>a</code>.</p>\n\n<p><code>c</code> is a <code>gate</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>map</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  jab\n  ~/  %jab\n  |*  [key=_?&gt;(?=(^ a) p.n.a) fun=$-(_?&gt;(?=(^ a) q.n.a) _?&gt;(?=(^ a) q.n.a))]\n  ^+  a\n  ::\n  ?~  a  !!\n  ::\n  ?:  =(key p.n.a)\n    a(q.n (fun q.n.a))\n  ::\n  ?:  (gor key p.n.a)\n    a(l $(a l.a))\n  ::\n  a(r $(a r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(jab by a) %d |=(x=@ (pow x 2)))\n  {[p=%b q=2] [p=%d q=16] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(jab by a) %z |=(x=@ (pow x 2)))\n  dojo: hoon expression failed</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(jab by a) %d |=(a=@ [a a]))\n  -need.?(%~ [n=[p=@tas q=@] l=nlr([p=@tas q=@]) r=nlr([p=@tas q=@])])\n  -have.[n=[p=@tas q=[@ @]] l=nlr([p=@tas q=@]) r=nlr([p=@tas q=@])]\n  nest-fail\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++key:by</code></h3>\n\n<p>Set of keys</p>\n\n<p>Produces a set of all keys in map <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  key\n  =&lt;  $\n  ~/  %key\n  =+  b=`(set _?&gt;(?=(^ a) p.n.a))`~\n  |.  ^+  b\n  ?~  a   b\n  $(a r.a, b $(a l.a, b (~(put in b) p.n.a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))</p>\n</blockquote>\n\n<blockquote>\n  <p>~(key by a)\n  {%b %d %a %c}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mar:by</code></h3>\n\n<p>Add with validation</p>\n\n<p>Produces map <code>a</code> with the addition of key-value pair <code>b</code> and <code>c</code>, where the value is a\nnonempty unit.</p>\n\n<p>Accept a noun and a unit of a noun of the type of the map's keys and values,\nrespectively. Validate that the value is not null and put the pair in the map.\nIf the value is null, delete the key.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>map</code>, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<p><code>c</code> is a <code>unit</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mar\n  |*  [b=* c=(unit *)]\n  ?~  c\n    (del b)\n  (put b u.c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(mar by a) %e (some 5))\n  {[p=%e q=5] [p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(mar by a) %a (some 10))\n  {[p=%b q=2] [p=%d q=4] [p=%a q=10] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(mar by a) %a ~)\n  {[p=%b q=2] [p=%d q=4] [p=%c q=3]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++put:by</code></h3>\n\n<p>Add key-value pair</p>\n\n<p>Produces <code>a</code> with the addition of the key-value pair of <code>b</code> and <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a key of the same type as the keys in <code>a</code>.</p>\n\n<p><code>c</code> is a value of the same type of the values in <code>a</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  put\n  ~/  %put\n  |*  [b=* c=*]\n  |-  ^+  a\n  ?~  a\n    [[b c] ~ ~]\n  ?:  =(b p.n.a)\n    ?:  =(c q.n.a)\n      a\n    a(n [b c])\n  ?:  (gor b p.n.a)\n    =+  d=$(a l.a)\n    ?&gt;  ?=(^ d)\n    ?:  (mor p.n.a p.n.d)\n      a(l d)\n    d(r a(l r.d))\n  =+  d=$(a r.a)\n  ?&gt;  ?=(^ d)\n  ?:  (mor p.n.a p.n.d)\n    a(r d)\n  d(l a(r l.d))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3]))\n  a\n  {[p=%b q=2] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(put by a) %d 4)\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @tas @)</code>(~(put by a) %a 10)\n  {[p=%b q=2] [p=%a q=10] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(put by a) 42 'foo')\n  mull-grow\n  mull-nice\n  -need.?(%~ [n=[p=@tas q=@] l=nlr([p=@tas q=@]) r=nlr([p=@tas q=@])])\n  -have.[[@ud @t] %~ %~]\n  nest-fail\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rep:by</code></h3>\n\n<p>Reduce to product</p>\n\n<p>Accumulate elements of map <code>a</code> using gate <code>b</code>, producing a noun.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rep\n  ~/  %rep\n  |*  b=_=&gt;(~ |=([* *] +&lt;+))\n  |-\n  ?~  a  +&lt;+.b\n  $(a r.a, +&lt;+.b $(a l.a, +&lt;+.b (b n.a +&lt;+.b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @tas @)</code>(malt (limo ~[a+1 b+2 c+3 d+4]))\n  a\n  {[p=%b q=2] [p=%d q=4] [p=%a q=1] [p=%c q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(rep by a) |=([p=[@tas @] q=@] ~&amp;([p q] (add +.p q))))\n  [[%b 2] 0]\n  [[%d 4] 2]\n  [[%c 3] 6]\n  [[%a 1] 9]\n  q=10\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>The gate will iteratively be fed a cell whose head is a key-value pair from the map and whose tail is an accumulator, producing the final value of the accumulator.</p>\n\n<hr />\n\n<h3><code>++rib:by</code></h3>\n\n<p>Transform + product</p>\n\n<p><code>c</code> is a gate with a sample like <code>[[key value] accumulator]</code> and a product like <code>[accumulator [key value]]</code>. Each key-value pair in map <code>a</code> is passed to <code>c</code> and replaced with the key-value pair <code>c</code> produced. The final value of the accumulator and the modified map are returned. <code>b</code> is the initial value of the accumulator.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a noun, and is the initial value of the accumulator.</p>\n\n<p><code>c</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of a noun and a map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rib\n  |*  [b=* c=gate]\n  |-  ^+  [b a]\n  ?~  a  [b ~]\n  =+  d=(c n.a b)\n  =.  n.a  +.d\n  =+  e=$(a l.a, b -.d)\n  =+  f=$(a r.a, b -.e)\n  [-.f a(l +.e, r +.f)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>In this example, all values less than three are changed to zero, and a list of their keys are produced along with the modified map.</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @t @)</code>(malt ~[['a' 1] ['b' 2] ['c' 3] ['d' 4] ['e' 5]])\n  a\n  {[p='e' q=5] [p='b' q=2] [p='d' q=4] [p='a' q=1] [p='c' q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>=c |=  [[k=@t v=@] acc=(list @t)]\n       ?:  (lth v 3)\n         [[k acc] [k 0]]\n       [acc [k v]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>[(list @t) (map @t @)]</code>(~(rib by a) *(list @t) c)\n  [&lt;|a b|&gt; {[p='e' q=5] [p='b' q=0] [p='d' q=4] [p='a' q=0] [p='c' q=3]}]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Key-value pairs in the map are transformed in their existing tree location. This means if you change the key, you'd likely produce a map with an incorrect order, so typically you should only change the value.</p>\n\n<hr />\n\n<h3><code>++run:by</code></h3>\n\n<p>Transform values</p>\n\n<p>Iterates over every value in map <code>a</code> using gate <code>b</code>, producing a map.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  run\n  ~/  %run\n  |*  b=gate\n  |-\n  ?~  a  a\n  [n=[p=p.n.a q=(b q.n.a)] l=$(a l.a) r=$(a r.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @t @)</code>(malt ~[['a' 1] ['b' 2] ['c' 3] ['d' 4] ['e' 5]])</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @t @)</code>(~(run by a) dec)\n  {[p='e' q=4] [p='b' q=1] [p='d' q=3] [p='a' q=0] [p='c' q=2]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rut:by</code></h3>\n\n<p>Transform nodes</p>\n\n<p>Applies a gate <code>b</code> to nodes in map <code>a</code>. The sample of gate <code>b</code> is a key-value pair, and it produces a new value.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rut\n  |*  b=gate\n  |-\n  ?~  a  a\n  [n=[p=p.n.a q=(b p.n.a q.n.a)] l=$(a l.a) r=$(a r.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @ @)</code>(malt ~[[1 1] [2 2] [3 3] [4 4] [5 5]])</p>\n</blockquote>\n\n<blockquote>\n  <p>=b |=  [k=@ v=@]\n       ?:  (gth v 2)\n         (mul k v)\n       v</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @ @)</code>(~(rut by a) b)\n  {[p=5 q=25] [p=1 q=1] [p=2 q=2] [p=3 q=9] [p=4 q=16]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tap:by</code></h3>\n\n<p>Listify pairs</p>\n\n<p>Produces the list of all elements in map <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tap\n  =&lt;  $\n  ~/  %tap\n  =+  b=`(list _?&gt;(?=(^ a) n.a))`~\n  |.  ^+  b\n  ?~  a\n    b\n  $(a r.a, b [n.a $(a l.a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @ @)</code>(malt ~[[1 1] [2 2] [3 3] [4 4] [5 5]])</p>\n</blockquote>\n\n<blockquote>\n  <p>~(tap by a)\n  ~[[p=4 q=4] [p=3 q=3] [p=2 q=2] [p=1 q=1] [p=5 q=5]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++uni:by</code></h3>\n\n<p>Union, merge</p>\n\n<p>Produces a map of the union between the keys of <code>a</code> and <code>b</code>. If <code>b</code> shares a\nkey with <code>a</code>, the tuple from <code>b</code> is preserved.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample <code>+by</code>.</p>\n\n<p><code>b</code> is a map.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  uni\n  ~/  %uni\n  =+  b=a\n  |@\n  ++  $\n    |-  ^+  a\n    ?~  b\n      a\n    ?~  a\n      b\n    ?:  =(p.n.b p.n.a)\n      b(l $(a l.a, b l.b), r $(a r.a, b r.b))\n    ?:  (mor p.n.a p.n.b)\n      ?:  (gor p.n.b p.n.a)\n        $(l.a $(a l.a, r.b ~), b r.b)\n      $(r.a $(a r.a, l.b ~), b l.b)\n    ?:  (gor p.n.a p.n.b)\n      $(l.b $(b l.b, r.a ~), a r.a)\n    $(r.b $(b r.b, l.a ~), a l.a)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @ @)</code>(malt ~[[1 1] [2 2] [3 3]])\n  =b <code>(map @ @)</code>(malt ~[[3 300] [4 400] [5 500]])\n  a\n  {[p=1 q=1] [p=2 q=2] [p=3 q=3]}\n  b\n  {[p=5 q=500] [p=3 q=300] [p=4 q=400]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @ @)</code>(~(uni by a) b)\n  {[p=5 q=500] [p=1 q=1] [p=2 q=2] [p=3 q=300] [p=4 q=400]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++uno:by</code></h3>\n\n<p>General union</p>\n\n<p>Produces a map of the union between the keys of <code>a</code> and <code>b</code>. If <code>b</code> shares a key with <code>a</code>, gate <code>meg</code> is applied to both and its product is used as the new value of the key in question.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>map</code>, and is the sample of <code>+by</code>.</p>\n\n<p><code>b</code> is a <code>map</code>, and is the sample of <code>~(uno by a)</code>.</p>\n\n<p><code>meg</code> is a gate, and is the sample of <code>(~(uno by a) b)</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>map</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  uno\n  =+  b=a\n  |@\n  ++  $\n    |=  meg=$-([_p:node _q:node _q:node] _q:node)\n    |-  ^+  a\n    ?~  b\n      a\n    ?~  a\n      b\n    ?:  =(p.n.b p.n.a)\n      :+  [p.n.a (meg p.n.a q.n.a q.n.b)]\n        $(b l.b, a l.a)\n      $(b r.b, a r.a)\n    ?:  (mor p.n.a p.n.b)\n      ?:  (gor p.n.b p.n.a)\n        $(l.a $(a l.a, r.b ~), b r.b)\n      $(r.a $(a r.a, l.b ~), b l.b)\n    ?:  (gor p.n.a p.n.b)\n      $(l.b $(b l.b, r.a ~), a r.a)\n    $(r.b $(b r.b, l.a ~), a l.a)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @ @)</code>(malt ~[[1 1] [2 2] [3 3]])\n  =b <code>(map @ @)</code>(malt ~[[3 3] [4 4] [5 5]])\n  a\n  {[p=1 q=1] [p=2 q=2] [p=3 q=3]}\n  b\n  {[p=5 q=5] [p=3 q=3] [p=4 q=4]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(map @ @)</code>((~(uno by a) b) |=([k=@ v=@ w=@] (add v w)))\n  {[p=5 q=5] [p=1 q=1] [p=2 q=2] [p=3 q=6] [p=4 q=4]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++urn:by</code></h3>\n\n<p>Turn (with key)</p>\n\n<p>Iterates over every value in map <code>a</code> using gate <code>b</code>, which accepts both\nthe key and the value of each element as its sample.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map.</p>\n\n<p><code>b</code> is a gate that accepts two nouns.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>map</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  urn\n  ~/  %urn\n  |*  b=$-([* *] *)\n  |-\n  ?~  a  ~\n  a(n n.a(q (b p.n.a q.n.a)), l $(a l.a), r $(a r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @ @)</code>(malt ~[[1 1] [2 2] [3 3]])\n  a\n  {[p=1 q=1] [p=2 q=2] [p=3 q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(urn by a) |=([k=@ v=@] (pow v 2)))\n  {[p=1 q=1] [p=2 q=4] [p=3 q=9]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++wyt:by</code></h3>\n\n<p>Depth</p>\n\n<p>Produce the size of the tree map <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map, and is the sample of <code>+by</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wyt\n  =&lt;  $\n  ~%  %wyt  +  ~\n  |.  ^-  @\n  ?~(a 0 +((add $(a l.a) $(a r.a))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @ @)</code>(malt ~[[1 1] [2 2] [3 3]])\n  =b <code>(map @ @)</code>(malt ~[[1 1] [2 2] [3 3] [4 4] [5 5]])\n  a\n  {[p=1 q=1] [p=2 q=2] [p=3 q=3]}\n  b\n  {[p=5 q=5] [p=1 q=1] [p=2 q=2] [p=3 q=3] [p=4 q=4]}</p>\n</blockquote>\n\n<blockquote>\n  <p>~(wyt by a)\n  3</p>\n</blockquote>\n\n<blockquote>\n  <p>~(wyt by b)\n  5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++val:by</code></h3>\n\n<p>List of values</p>\n\n<p>Produces a list of all values in map <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a map.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  val\n  =+  b=`(list _?&gt;(?=(^ a) q.n.a))`~\n  |-  ^+  b\n  ?~  a   b\n  $(a r.a, b [q.n.a $(a l.a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(map @t @)</code>(malt ~[['a' 1] ['b' 2] ['c' 3]])\n  a\n  {[p='b' q=2] [p='a' q=1] [p='c' q=3]}</p>\n</blockquote>\n\n<blockquote>\n  <p>~(val by a)\n  ~[3 1 2]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "by"
        ]
    },
    {
        "doc": "<h2><code>++ja</code></h2>\n\n<p>Jar engine</p>\n\n<p>A container arm for <code>jar</code> operation arms. A <code>jar</code> is a <code>map</code> of\n<code>list</code>s. The contained arms inherit the sample jar.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a jar.</p>\n\n<h4>Produces</h4>\n\n<p>A core.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ja\n  =|  a=(tree (pair * (list)))  ::  (jar)\n  |@\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(. ja (my [a+1 b+2 ~]))\n  &lt; 2.ngd\n    [   a\n      ?(\n        %~\n        [ n=[?(p=%a p=%b) q=@ud]\n          l=nlr([p=?(%a %b) q=@ud])\n          r=nlr([p=?(%a %b) q=@ud])\n        ]\n      )\n      &lt;123.zao 46.hgz 1.pnw %140>\n    ]</p>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++get:ja</code></h3>\n\n<p>Grab value by key</p>\n\n<p>Produces the list at key <code>b</code> in jar <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>jar</code>, and is the sample of <code>+ja</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  get\n  |*  b=*\n  =+  c=(~(get by a) b)\n  ?~(c ~ u.c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=j <code>(jar @t @ud)</code>(malt ~[['a' <code>(list @ud)</code>~[1 2 3]] ['b' <code>(list @ud)</code>~[4 5 6]]])\n  j\n  {[p='b' q=~[4 5 6]] [p='a' q=~[1 2 3]]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(list @ud)</code>(~(get ja j) 'a')\n  ~[1 2 3]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(list @ud)</code>(~(get ja j) 'b')\n  ~[4 5 6]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(list @ud)</code>(~(get ja j) 'c')\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++add:ja</code></h3>\n\n<p>Prepend to list</p>\n\n<p>Adds <code>c</code> to the head of the list at key <code>b</code> in jar <code>a</code>. If <code>b</code> does not exist in <code>a</code>, a new key-value pair is added with a list containing <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>jar</code>, and is the sample of <code>+ja</code>.</p>\n\n<p><code>b</code> is a noun of the same type as the keys in <code>a</code>.</p>\n\n<p><code>c</code> is a noun of the same type the lists in <code>a</code> contain.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>jar</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add\n  |*  [b=* c=*]\n  =+  d=(get b)\n  (~(put by a) b [c d])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=j <code>(jar @t @ud)</code>(malt ~[['a' <code>(list @ud)</code>~[1 2 3]] ['b' <code>(list @ud)</code>~[4 5 6]]])\n  j\n  {[p='b' q=~[4 5 6]] [p='a' q=~[1 2 3]]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jar @t @ud)</code>(~(add ja j) 'b' 7)\n  {[p='b' q=~[7 4 5 6]] [p='a' q=~[1 2 3]]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jar @t @ud)</code>(~(add ja j) 'c' 8)\n  {[p='b' q=~[4 5 6]] [p='a' q=~[1 2 3]] [p='c' q=~[8]]}\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ja"
        ]
    },
    {
        "doc": "<h2><code>++ju</code></h2>\n\n<p>Jug operations</p>\n\n<p>Container arm for jug operation arms. A <code>jug</code> is a <code>map</code> of\n<code>set</code>s. The contained arms inherit its sample jug, <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>jug</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A core.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ju\n  =|  a=(tree (pair * (tree)))  ::  (jug)\n  |@\n</code></p>\n\n<h4>Example</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=j <code>(jug @t @ud)</code>(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n  j\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p>~(. ju j)\n  &lt;5.cws [a=nlr([p=@t q=nlr(@ud)]) &lt;123.zao 46.hgz 1.pnw %140>]&gt;\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++del:ju</code></h3>\n\n<p>Remove</p>\n\n<p>Produces jug <code>a</code> with value <code>c</code> removed from set located at key <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a jug, and is the sample of <code>+ju</code>.</p>\n\n<p><code>b</code> is a noun of the same type as the keys in <code>a</code>.</p>\n\n<p><code>c</code> is a noun of the same type as the sets in <code>a</code> contain.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  del\n  |*  [b=* c=*]\n  ^+  a\n  =+  d=(get b)\n  =+  e=(~(del in d) c)\n  ?~  e\n    (~(del by a) b)\n  (~(put by a) b e)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>j\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(~(del ju j) 'b' 6)\n  {[p='b' q={5 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(~(del ju j) 'b' 10)\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(~(del ju j) 'c' 10)\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gas:ju</code></h3>\n\n<p>Concatenate</p>\n\n<p>Add each of the key-value pairs in list <code>b</code> to jug <code>a</code>. The values in <code>b</code> are the type the sets in <code>a</code> contain. For keys in <code>b</code> that exist in <code>a</code>, the values will be added to their sets. For keys in <code>b</code> that don't exist in <code>a</code>, new keys and sets will be added.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>jug</code>, and is the sample of <code>+ju</code>.</p>\n\n<p><code>b</code> is a <code>(list [p q])</code>, where:</p>\n\n<ul>\n<li><code>p</code> is a noun, the type of the keys in <code>a</code>.</li>\n<li><code>q</code> is a noun, the type the sets in <code>a</code> contain.</li>\n</ul>\n\n<h4>Produces</h4>\n\n<p>A <code>jug</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gas\n  |*  b=(list [p=* q=*])\n  =&gt;  .(b `(list _?&gt;(?=([[* ^] ^] a) [p=p q=n.q]:n.a))`b)\n  |-  ^+  a\n  ?~  b\n    a\n  $(b t.b, a (put p.i.b q.i.b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=j <code>(jug @t @ud)</code>(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n  j\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(~(gas ju j) ~[['a' 10] ['a' 42] ['b' 999] ['c' 7]])\n  {[p='b' q={5 6 4 999}] [p='a' q={10 42 1 2 3}] [p='c' q={7}]}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++get:ju</code></h3>\n\n<p>Retrieve set</p>\n\n<p>Produces a set retrieved from jug <code>a</code> using key <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a jug, and the sample of <code>+ju</code>.</p>\n\n<p><code>b</code> is key, a noun of the same type as the keys in <code>a</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>set</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  get\n  |*  b=*\n  =+  c=(~(get by a) b)\n  ?~(c ~ u.c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=j <code>(jug @t @ud)</code>(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n  j\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @ud)</code>(~(get ju j) 'a')\n  {1 2 3}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @ud)</code>(~(get ju j) 'b')\n  {5 6 4}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(set @ud)</code>(~(get ju j) 'c')\n  {}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++has:ju</code></h3>\n\n<p>Check contents</p>\n\n<p>Computes whether a value <code>c</code> exists within the set located at key <code>b</code>\nwith jug <code>a</code>, producing a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>jug</code>, and the sample of <code>+ju</code>.</p>\n\n<p><code>b</code> is a noun of the same type as the keys in <code>a</code>.</p>\n\n<p><code>c</code> is a noun of the same type as the sets in <code>a</code> contain.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>?</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  has\n  |*  [b=* c=*]\n  ^-  ?\n  (~(has in (get b)) c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=j <code>(jug @t @ud)</code>(malt ~[['a' (silt ~[1 2 3])] ['b' (silt ~[4 5 6])]])\n  j\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(has ju j) 'b' 5)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(has ju j) 'b' 10)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(has ju j) 'c' 10)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++put:ju</code></h3>\n\n<p>Add key-set pair</p>\n\n<p>Produces jug <code>a</code> with <code>c</code> added to the set located at key <code>b</code>. If <code>b</code> isn't a key in <code>a</code>, it will be added and a new set created containing <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>jug</code>.</p>\n\n<p><code>b</code> is a noun, the type of the keys in <code>a</code>.</p>\n\n<p><code>c</code> is a noun, the type the sets in <code>a</code> contain.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>jug</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  put\n  |*  [b=* c=*]\n  ^+  a\n  =+  d=(get b)\n  (~(put by a) b (~(put in d) c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>j\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(~(put ju j) 'c' 5)\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}] [p='c' q={5}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(~(put ju j) 'a' 4)\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3 4}]}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(~(put ju j) 'a' 1)\n  {[p='b' q={5 6 4}] [p='a' q={1 2 3}]}\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ju"
        ]
    },
    {
        "doc": "<h2><code>++to</code></h2>\n\n<p>Queue operations</p>\n\n<p>Container arm for queue operation arms. The contained arms inherit <code>a</code>, its\nsample queue.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a tree.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  to\n  =|  a=(tree)  ::  (qeu)\n  |@\n</code></p>\n\n<h4>Discussion</h4>\n\n<p><code>tree</code> is the generic tree-shape mold. Maps, sets, and queues all share that\nshape, but they put their elements in different places and have different\ninterfaces. <code>to</code> is the interface core for <code>qeu</code>; it's not generic across all\nthe different containers that use <code>tree</code>.</p>\n\n<hr />\n\n<h3><code>+apt:to</code></h3>\n\n<p>Check correctness</p>\n\n<p>Test whether queue <code>a</code> is correctly ordered, producing a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>que</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>?</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  apt\n  |-  ^-  ?\n  ?~  a  &amp;\n  ?&amp;  ?~(l.a &amp; ?&amp;((mor n.a n.l.a) $(a l.a)))\n      ?~(r.a &amp; ?&amp;((mor n.a n.r.a) $(a r.a)))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=bad <code>(qeu @ud)</code>[1 ~ 2 ~ 3 ~ ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>~(apt to bad)\n  %.n\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=good <code>(qeu @ud)</code>(~(gas to <code>(qeu @ud)</code>~) ~[1 2 3])</p>\n</blockquote>\n\n<blockquote>\n  <p>~(apt to good)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bal:to</code></h3>\n\n<p>Balance</p>\n\n<p>Vertically rebalances queue <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>qeu</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>qeu</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bal\n  |-  ^+  a\n  ?~  a  ~\n  ?.  |(?=(~ l.a) (mor n.a n.l.a))\n    $(a l.a(r $(a a(l r.l.a))))\n  ?.  |(?=(~ r.a) (mor n.a n.r.a))\n    $(a r.a(l $(a a(r l.r.a))))\n  a\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(qeu @ud)</code>[1 ~ 2 ~ 3 ~ ~]\n  a\n  {1 2 3}\n  <code>*</code>a\n  [1 0 2 0 3 0 0]\n  ~(apt to a)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>=z <code>(qeu @ud)</code>~(bal to a)\n  z\n  {1 2 3}\n  <code>*</code>z\n  [2 [1 0 0] 3 0 0]\n  ~(apt to z)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dep:to</code></h3>\n\n<p>Maximum Depth</p>\n\n<p>Produces the maximum depth of leaves (<code>r.a</code> and <code>l.a</code>) in queue <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dep\n  |-  ^-  @\n  ?~  a  0\n  +((max $(a l.a) $(a r.a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) <code>(list @)</code>[1 2 3 4 5 6 7 ~])\n  ~(dep to a)\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) <code>(list @)</code>[1 2 3 4 ~])\n  ~(dep to a)\n  3</p>\n</blockquote>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) <code>(list @)</code>[1 2 ~])\n  ~(dep to a)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>~(dep to <code>(qeu tape)</code>[\"a\" ~ \"b\" ~ \"c\" ~ \"d\" ~ \"e\" ~ \"f\" ~ \"g\" ~ ~])\n  7</p>\n</blockquote>\n\n<blockquote>\n  <p>~(dep to ~(bal to <code>(qeu tape)</code>[\"a\" ~ \"b\" ~ \"c\" ~ \"d\" ~ \"e\" ~ \"f\" ~ \"g\" ~ ~]))\n  4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gas:to</code></h3>\n\n<p>Push list</p>\n\n<p>Push all elements of list <code>b</code> into the queue <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue, and is the sample of <code>+to</code>.</p>\n\n<p><code>b</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A queue.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gas\n  |=  b=(list _?&gt;(?=(^ a) n.a))\n  |-  ^+  a\n  ?~(b a $(b t.b, a (put i.b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(qeu)</code>(~(gas to <code>(qeu @)</code>~) [1 2 3 ~])\n  {3 2 1}</p>\n</blockquote>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) [1 2 3 ~])\n  =b [4 5 6 ~]\n  <code>(qeu)</code>(~(gas to a) b)\n  {6 5 4 3 2 1}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++get:to</code></h3>\n\n<p>Head-tail pair</p>\n\n<p>Produces the head and tail queue of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of the last element in <code>a</code> along with the rest of queue <code>a</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  get\n  |-  ^+  ?&gt;(?=(^ a) [p=n.a q=*(tree _n.a)])\n  ?~  a\n    !!\n  ?~  r.a\n    [n.a l.a]\n  =+  b=$(a r.a)\n  :-  p.b\n  ?:  |(?=(~ q.b) (mor n.a n.q.b))\n    a(r q.b)\n  a(n n.q.b, l a(r l.q.b), r r.q.b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=s (~(gas to *(tree @)) <code>(list @)</code>~[1 2 3])\n  ~(get to s)\n  [n=2 l={3} r={1}]</p>\n</blockquote>\n\n<blockquote>\n  <p>~(get to ~)\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++nap:to</code></h3>\n\n<p>Remove head</p>\n\n<p>Removes the head of queue <code>a</code>, producing the resulting queue.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue.</p>\n\n<h4>Produces</h4>\n\n<p>A queue.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  nap\n  ?&gt;  ?=(^ a)\n  ?:  =(~ l.a)  r.a\n  =+  b=get(a l.a)\n  bal(n.a p.b, l.a q.b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) <code>(list @)</code>[1 2 3 4 5 6 ~])\n  -.a\n  n=6</p>\n</blockquote>\n\n<blockquote>\n  <p>=b ~(nap to a)\n  -.b\n  n=2</p>\n</blockquote>\n\n<blockquote>\n  <p>a\n  [n=6 l={} r={5 4 3 2 1}]</p>\n</blockquote>\n\n<blockquote>\n  <p>b\n  [n=2 l=[n=4 l={5} r={3}] r=[n=1 l={} r={}]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(qeu)</code>b\n  {5 4 3 2 1}</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(qeu)</code>a\n  {6 5 4 3 2 1}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++nip:to</code></h3>\n\n<p>Removes the root of queue <code>a</code>, producing the resulting queue.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue.</p>\n\n<h4>Produces</h4>\n\n<p>A queue.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  nip\n  |-  ^+  a\n  ?~  a  ~\n  ?~  l.a  r.a\n  ?~  r.a  l.a\n  ?:  (mor n.l.a n.r.a)\n    l.a(r $(l.a r.l.a))\n  r.a(l $(r.a l.r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) <code>(list @)</code>[1 2 3 4 5 6 ~])\n  a\n  [n=6 l={} r={5 4 3 2 1}]</p>\n</blockquote>\n\n<blockquote>\n  <p>~(nip to a)\n  [n=2 l=[n=4 l={5} r={3}] r=[n=1 l={} r={}]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++put:to</code></h3>\n\n<p>Insert</p>\n\n<p>Accept noun <code>b</code> and adds to queue <code>a</code> as the head, producing the\nresulting queue.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue, and is the sample of <code>+to</code>.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A queue.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  put\n  |*  b=*\n  |-  ^+  a\n  ?~  a\n    [b ~ ~]\n  bal(l.a $(a l.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) <code>(list @)</code>[3 1 2 4 5 6 ~])\n  <code>(qeu)</code>(~(put to a) 7)\n  {7 6 5 4 2 1 3}\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tap:to</code></h3>\n\n<p>Queue to list</p>\n\n<p>Produces queue <code>a</code> as a list from front to back.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tap\n  =+  b=`(list _?&gt;(?=(^ a) n.a))`~\n  |-  ^+  b\n  =+  0                                   ::  hack for jet match\n  ?~  a\n    b\n  $(a r.a, b [n.a $(a l.a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) [3 1 2 4 5 6 ~])\n  <code>*</code>a\n  [6 0 2 [4 [5 0 0] 0] 1 0 3 0 0]</p>\n</blockquote>\n\n<blockquote>\n  <p>~(tap to a)\n  ~[3 1 2 4 5 6]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++top:to</code></h3>\n\n<p>Produce head</p>\n\n<p>Produces the head of queue <code>a</code> as a <code>unit</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a queue.</p>\n\n<h4>Produces</h4>\n\n<p>A unit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  top\n  |-  ^-  (unit _?&gt;(?=(^ a) n.a))\n  ?~  a  ~\n  ?~(r.a [~ n.a] $(a r.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (~(gas to <code>(qeu @)</code>~) <code>(list @)</code>[1 2 3 4 5 6 ~])\n  ~(top to a)\n  [~ u=1]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>An empty queue has no head.</p>\n\n<hr />\n",
        "keys": [
            "to"
        ]
    },
    {
        "doc": "<h2><code>++malt</code></h2>\n\n<p>Map from list</p>\n\n<p>Produces a map from a list <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  malt                                                ::  map from list\n  |*  a=(list)\n  (molt `(list [p=_-&lt;.a q=_-&gt;.a])`a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(malt [['ok' 'no'] ['a' 'b'] ['x' 'y'] ~])\n      [n=[p='x' q='y'] l={[p='a' q='b'] [p='ok' q='no']} r={}]</p>\n\n<pre><code>&gt; (malt ~[[1 2 3] [4 5 6] [7 8 9]])\n[n=[p=1 q=[2 3]] l={[p=4 q=[5 6]] [p=7 q=[8 9]]} r={}]\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "malt"
        ]
    },
    {
        "doc": "<h2><code>++molt</code></h2>\n\n<p>Map from pair list</p>\n\n<p>Produces a map from a list of pairs <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list of pairs.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  molt\n      |*  a=(list (pair))\n      (~(gas by `(tree [p=_p.i.-.a q=_q.i.-.a})`~) a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>(list (pair))</code>[[1 2] [4 3] [11 0] ~]\n  a\n  ~[[p=1 q=2] [p=4 q=3] [p=11 q=0]]</p>\n\n<pre><code>&gt; (molt a)\n[n=[p=11 q=0] l={[p=4 q=3] [p=1 q=2]} r={}]\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Only used internally as a helper to <code>malt</code>.</p>\n\n<hr />\n",
        "keys": [
            "molt"
        ]
    },
    {
        "doc": "<h2><code>++silt</code></h2>\n\n<p>Set from list</p>\n\n<p>Produces a set from a list <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a list.</p>\n\n<h4>Produces</h4>\n\n<p>A set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  silt\n      |*  a=(list)\n      =+  b=*(tree _?&gt;(?=(^ a) i.a))\n      (~(gas in b) a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(silt <code>(list @t)</code>['c' 'hoon' 'javascript' 'python' ~])\n      [n='javascript' l={} r={'python' 'hoon' 'c'}]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "silt"
        ]
    },
    {
        "doc": "<h2><code>++ly</code></h2>\n\n<p>List from raw noun</p>\n\n<p>Takes a null-terminated noun and produces a <code>list</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a null-terminated noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>list</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  ly\n      le:nl\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ly [1 2 3 ~])\n      ~[1 2 3]</p>\n\n<pre><code>&gt; (ly \"abc\")\n~['a' 'b' 'c']\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>ly</code> is an alias for <code>le:nl</code>.</p>\n\n<hr />\n",
        "keys": [
            "ly"
        ]
    },
    {
        "doc": "<h2><code>++my</code></h2>\n\n<p>Map from raw noun</p>\n\n<p>Takes a null-terminated noun and produces a <code>map.</code></p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun composed of ordered pairs and terminated with <code>~</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>map</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  my\n      my:nl\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(my [['a' 1] ['b' 2] ~])\n      [n=[p='b' q=2] l={[p='a' q=1]} r={}]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>my</code> is an alias for <code>my:nl</code>.</p>\n\n<hr />\n",
        "keys": [
            "my"
        ]
    },
    {
        "doc": "<h2><code>++sy</code></h2>\n\n<p>Set from raw noun</p>\n\n<p>Takes a null-terminated noun and produces a <code>set</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a null-terminated noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>set</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  sy\n      si:nl\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sy [1 2 3 ~])\n      [n=2 l={1 3} r={}]</p>\n\n<pre><code>&gt; (sy (ly [1 2 3 ~]))\n[n=2 l={1 3} r={}]\n\n&gt; (sy \"abc\")\n[n='b' l={'a' 'c'} r={}]\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>sy</code> is an alias for <code>si:nl</code>.</p>\n\n<hr />\n",
        "keys": [
            "sy"
        ]
    },
    {
        "doc": "<h2><code>++nl</code></h2>\n\n<p>Noun-to-container operations</p>\n\n<p>Core whose arms contain functions that create various typed nouns from raw\nnouns.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  nl\n      |%\n</code></p>\n\n<hr />\n\n<h3><code>++le:nl</code></h3>\n\n<p>Construct list</p>\n\n<p>Takes a null-terminated noun and produces a <code>list</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a null-terminated noun.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  le\n  |*  a=(list)\n  ^+  =&lt;  $\n    |@  ++  $  ?:(*? ~ [i=(snag 0 a) t=$])\n    --\n  a\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(le:nl [1 2 3 ~])\n      ~[1 2 3]</p>\n\n<pre><code>&gt; (le:nl \"abc\")\n~['a' 'b' 'c']\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++my:nl</code></h3>\n\n<p>Construct map</p>\n\n<p>Takes a null-terminated noun and produces a <code>map</code> of the same type of the <code>p</code>\nand <code>q</code> passed in.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun composed of ordered pairs and terminated with <code>~</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A map.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  my\n  |*  a=(list (pair))\n  =&gt;  .(a ^+((le a) a))\n  (~(gas by `(map _p.i.-.a _q.i.-.a)`~) a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(my:nl [['a' 1] ['b' 2] ~])\n      [n=[p='b' q=2] l={[p='a' q=1]} r={}]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++si:nl</code></h3>\n\n<p>Construct set</p>\n\n<p>Takes a null-terminated noun and produces a <code>set</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a null-terminated noun.</p>\n\n<h4>Produces</h4>\n\n<p>A set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  si\n  |*  a=(list)\n  =&gt;  .(a ^+((le a) a))\n  (~(gas in `(set _i.-.a)`~) a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(si:nl <code>(list [@t *])</code>[['a' 1] ['b' [2 3]] ~])\n      [n=['b' [2 3]] l={['a' 1]} r={}]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++snag:nl</code></h3>\n\n<p>Index</p>\n\n<p>Produces the element at the index <code>a</code> of null-terminated noun <code>b</code> and failing if\nthe noun is null. Lists are 0-indexed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun.</p>\n\n<p><code>b</code> is a null-terminated noun.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Sources</h4>\n\n<p><code>hoon\n++  snag\n  |*  [a=@ b=(list)]\n  ?~  b\n    ~_  leaf+\"snag-fail\"\n    !!\n  ?:  =(0 a)  i.b\n  $(b t.b, a (dec a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=b [[2 3] [1 4] ~]\n  (snag:nl 0 b)\n      [2 3]</p>\n\n<pre><code>&gt; (snag:nl 2 b)\n! snag-fail\n! exit\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++weld:nl</code></h3>\n\n<p>Concatenate</p>\n\n<p>Produces a list that is the concatenation of null-terminated nouns <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a null-terminated noun.</p>\n\n<p><code>b</code> is a null-terminated noun.</p>\n\n<h4>Produces</h4>\n\n<p>A list.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  weld\n  |*  [a=(list) b=(list)]\n  =&gt;  .(a ^+((le a) a), b ^+((le b) b))\n  =+  42\n  |-\n  ?~  a  b\n  [i=i.a t=$(a t.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=b [[2 3] [1 4] ~]</p>\n\n<pre><code>&gt; (weld:nl b [8 9 ~])\n[i=[2 3] t=[i=[1 4] t=~[8 9]]]\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "nl"
        ]
    },
    {
        "doc": "<h2><code>++aftr</code></h2>\n\n<p>Pair after</p>\n\n<p><code>+aftr</code> first takes gate <code>a</code>, producing a wet gate. The new wet gate then takes <code>b</code>, producing the inverted pair of <code>[b a]</code>. This is the inverted version of <a href=\"#fore\">+fore</a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a gate, and the sample of <code>+aftr</code>.</p>\n\n<p><code>b</code> is a gate, and the sample of <code>(aftr a)</code>.</p>\n\n<h4>Produces</h4>\n\n<p><code>(pair b a)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  aftr  |*(a=$-(* *) |*(b=$-(* *) (pair b a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (aftr @ud)\n  <code>(a @t)</code>['foo' 42]\n  [p='foo' q=42]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "aftr"
        ]
    },
    {
        "doc": "<h2><code>++cork</code></h2>\n\n<p>Compose forward</p>\n\n<p>Call gate <code>a</code>, then call gate <code>b</code> with its product.</p>\n\n<p>This is a wet gate that takes two gates and produces a new gate.</p>\n\n<p>This is the inverse of <a href=\"#corl\"><code>++corl</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a gate.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cork  |*([a=$-(* *) b=$-(* *)] (corl b a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((cork dec |=(a=@ [a a])) 20)\n  [19 19]</p>\n</blockquote>\n\n<blockquote>\n  <p>((cork dec some) 20)\n  [~ u=19]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cork"
        ]
    },
    {
        "doc": "<h2><code>++corl</code></h2>\n\n<p>Compose backward</p>\n\n<p>Call gate <code>b</code>, then call gate <code>a</code> with its product.</p>\n\n<p>This is a wet gate that takes two gates and produces a new gate.</p>\n\n<p>This is the inverse of <a href=\"#cork\"><code>++cork</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a gate.</p>\n\n<p><code>b</code> is a gate.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  corl\n  |*  [a=$-(* *) b=$-(* *)]\n  =&lt;  +:|.((a (b)))      ::  type check\n  =+  c=+&lt;.b\n  |@  ++  $  (a (b c))\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((corl |=(a=@ [a a]) dec) 20)\n  [19 19]</p>\n</blockquote>\n\n<blockquote>\n  <p>((corl some dec) 20)\n  [~ u=19]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "corl"
        ]
    },
    {
        "doc": "<h2><code>++curr</code> {% #curry %}</h2>\n\n<p>Right curry</p>\n\n<p>Right-curry a gate, binding the tail of its sample</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a gate.</p>\n\n<p><code>c</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A gate.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  curr\n  |*  [a=$-(^ *) c=*]\n  =+  b=+&lt;+.a\n  |@  ++  $  (a b c)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=tep (curr scan sym)\n  <code>@t</code>(tep \"asd\")\n      'asd'</p>\n\n<pre><code>&gt; `@t`(tep \"lek-om\")\n'lek-om'\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "curr"
        ]
    },
    {
        "doc": "<h2><code>++cury</code></h2>\n\n<p>Curry left</p>\n\n<p>Curry a gate, binding the head of its sample</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a gate.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A gate.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cury\n  |*  [a=$-(^ *) b=*]\n  =+  c=+&lt;+.a\n  |@  ++  $  (a b c)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=mol (cury add 2)\n  (mol 4)\n      6</p>\n\n<pre><code>&gt; (mol 7)\n9\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cury"
        ]
    },
    {
        "doc": "<h2><code>++fore</code></h2>\n\n<p>Pair before</p>\n\n<p><code>+fore</code> first takes gate <code>a</code>, producing a wet gate. The new wet gate then takes <code>b</code>, producing the pair of <code>[a b]</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a gate, and is the sample of <code>+fore</code>.</p>\n\n<p><code>b</code> is a gate, and is the sample of <code>(fore a)</code>.</p>\n\n<h4>Produces</h4>\n\n<p><code>(pair a b)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fore  |*(a=$-(* *) |*(b=$-(* *) (pair a b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (fore @ud)\n  <code>(a @t)</code>[42 'foo']\n  [p=42 q='foo']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fore"
        ]
    },
    {
        "doc": "<h2><code>++head</code></h2>\n\n<p>Get head</p>\n\n<p>Produces the head of a cell.</p>\n\n<h4>Accepts</h4>\n\n<p>A cell.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  head  |*(^ ,:+&lt;-)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(head [1 2])\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(head [[1 1] 2])\n  [1 1]</p>\n</blockquote>\n\n<blockquote>\n  <p>(head \"hello\")\n  'h'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "head"
        ]
    },
    {
        "doc": "<h2><code>++same</code></h2>\n\n<p>Identity</p>\n\n<p>Produces the same value that it was given.</p>\n\n<h4>Accepts</h4>\n\n<p>A noun.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  same  |*(* +&lt;)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(same [1 2])\n  [1 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(same [[1 1] 2])\n  [[1 1] 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(same \"hello\")\n  \"hello\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "same"
        ]
    },
    {
        "doc": "<h2><code>++succ</code></h2>\n\n<p>Successor</p>\n\n<p>Increment an atom.</p>\n\n<h4>Accepts</h4>\n\n<p>An <code>atom</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>atom</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  succ  |=(@ +(+&lt;))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(succ 1)\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "succ"
        ]
    },
    {
        "doc": "<h2><code>++tail</code></h2>\n\n<p>Get tail</p>\n\n<p>Produces the tail of a cell.</p>\n\n<h4>Accepts</h4>\n\n<p>A cell.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tail  |*(^ ,:+&lt;+)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(tail [1 2])\n      2</p>\n\n<pre><code>&gt; (tail [[1 1] 2])\n2\n\n&gt; (tail \"hello\")\n\"ello\"\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tail"
        ]
    },
    {
        "doc": "<h2><code>++test</code></h2>\n\n<p>Test for equality</p>\n\n<p>Checks if <code>a</code> and <code>b</code> are equal, producing a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun.</p>\n\n<p><code>b</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  test  |=(^ =(+&lt;- +&lt;+))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(test 1 1)\n      %.y</p>\n\n<pre><code>&gt; (test [2 0] 2)\n%.n\n\n&gt; (test \"hello\" 'hello')\n%.n\n\n&gt; (test \"hello\" ['h' 'e' 'l' 'l' 'o' ~])\n%.y\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "test"
        ]
    },
    {
        "doc": "<h2><code>++lead</code></h2>\n\n<p>Put head</p>\n\n<p><code>(lead a)</code> produces a wet gate, then <code>((lead a) b)</code> produces <code>[a b]</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun, and is the sample of <code>+lead</code>.</p>\n\n<p><code>b</code> is a noun, and is the sample of <code>((lead a) b)</code></p>\n\n<h4>Produces</h4>\n\n<p>A cell of <code>[a b]</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lead  |*(* |*(* [+&gt;+&lt; +&lt;]))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (lead 'foo')\n  (a 'bar')\n  ['foo' 'bar']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lead"
        ]
    },
    {
        "doc": "<h2><code>++late</code></h2>\n\n<p>Put tail</p>\n\n<p><code>(late a)</code> produces a wet gate, then <code>((late a) b)</code> produces the inverted cell <code>[b a]</code>. This is the inverted version of <a href=\"#lead\">+lead</a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun, and is the sample of <code>+late</code>.</p>\n\n<p><code>b</code> is a noun, and is the sample of <code>(late a)</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of <code>[b a]</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  late  |*(* |*(* [+&lt; +&gt;+&lt;]))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a (late 'foo')\n  (a 'bar')\n  ['bar' 'foo']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "late"
        ]
    },
    {
        "doc": "<h2><code>++jar</code></h2>\n\n<p>Mold generator. A <code>jar</code> is a <code>map</code> of <code>list</code>.</p>\n\n<p>Produces the mold of a map from <code>key</code> to lists of <code>value</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>key</code> is a <code>mold</code>, and is the type of the map key</p>\n\n<p><code>value</code> is a <code>mold</code>, and is the type of items in the lists. The lists are the values in the map.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>mold</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  jar  |$  [key value]  (map key (list value))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(jar @t @ud)</code>(malt ~[['foo' ~[1 2 3]] ['bar' ~[4 5 6]]])\n  {[p='bar' q=~[4 5 6]] [p='foo' q=~[1 2 3]]}\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2j#ja\"><code>ja</code></a>, <a href=\"/reference/hoon/stdlib/2i\"><code>by</code></a>, <a href=\"#map\"><code>map</code></a>, <a href=\"/reference/hoon/stdlib/2b\">lists</a></p>\n\n<hr />\n",
        "keys": [
            "jar"
        ]
    },
    {
        "doc": "<h2><code>++jug</code></h2>\n\n<p>Mold generator. A <code>jug</code> is a <code>map</code> of <code>set</code>.</p>\n\n<p>Produces the mold of a map from <code>key</code> to sets of <code>value</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>key</code> is a <code>mold</code>, and is the type of the map key.</p>\n\n<p><code>value</code> is a <code>mold</code>, and is the type of items in the sets. The sets are the values in the map.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>mold</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  jug  |$  [key value]  (map key (set value))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(jug @t @ud)</code>(malt ~[['foo' (silt ~[1 2 3])] ['bar' (silt ~[4 5 6])]])\n  {[p='bar' q={5 6 4}] [p='foo' q={1 2 3}]}\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2j#ju\"><code>ju</code></a>, <a href=\"/reference/hoon/stdlib/2i\"><code>by</code></a>, <a href=\"#map\"><code>map</code></a>, <a href=\"#set\"><code>set</code></a></p>\n\n<hr />\n",
        "keys": [
            "jug"
        ]
    },
    {
        "doc": "<h2><code>++map</code></h2>\n\n<p>Map</p>\n\n<p>Mold generator. A <code>map</code> is a <a href=\"https://en.wikipedia.org/wiki/Treap\">treap</a> of\nkey-value pairs.</p>\n\n<p>Produces the mold of a map from <code>key</code> to <code>value</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>key</code> is a <code>mold</code>.</p>\n\n<p><code>value</code> is a <code>mold</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>mold</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  map\n  |$  [key value]\n  $|  (tree (pair key value))\n  |=(a=(tree (pair)) ?:(=(~ a) &amp; ~(apt by a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>? *(map @t @ud)\n    nlr([p=@t q=@ud])\n  {}\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(map @t @ud)</code>(malt ~[['foo' 1] ['bar' 2] ['baz' 3]])\n  {[p='bar' q=2] [p='baz' q=3] [p='foo' q=1]}\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2i\"><code>by</code></a></p>\n\n<hr />\n",
        "keys": [
            "map"
        ]
    },
    {
        "doc": "<h2><code>++qeu</code></h2>\n\n<p>Queue</p>\n\n<p>Mold generator. An ordered <a href=\"http://en.wikipedia.org/wiki/Treap\">treap</a> of\nitems.</p>\n\n<p>Produces the mold of a queue of <code>item</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>item</code> is a <code>mold</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>mold</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qeu\n  |$  [item]\n  $|  (tree item)\n  |=(a=(tree) ?:(=(~ a) &amp; ~(apt to a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(qeu @ud)</code>(~(gas to *(qeu @ud)) ~[1 2 3 4 5])\n  {5 4 3 2 1}\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2k#to\"><code>+to</code></a></p>\n\n<hr />\n",
        "keys": [
            "qeu"
        ]
    },
    {
        "doc": "<h2><code>++set</code></h2>\n\n<p>Set</p>\n\n<p>Mold generator. A <code>set</code> is an unordered <a href=\"http://en.wikipedia.org/wiki/Treap\">treap</a> of\nitems.</p>\n\n<p>Produces the mold of a set of <code>item</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>item</code> is a <code>mold</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>mold</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  set\n  |$  [item]\n  $|  (tree item)\n  |=(a=(tree) ?:(=(~ a) &amp; ~(apt in a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(set @ud)</code>(silt ~[1 2 3 4 5])\n  {5 1 2 3 4}\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/2h\"><code>+in</code></a></p>\n\n<hr />\n",
        "keys": [
            "set"
        ]
    },
    {
        "doc": "<h2><code>++cue</code> {% #cue %}</h2>\n\n<p>Unpack atom to noun</p>\n\n<p>Produces a noun unpacked from atom <code>a</code>. The inverse of <a href=\"#jam\">+jam</a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cue\n  ~/  %cue\n  |=  a=@\n  ^-  *\n  =+  b=0\n  =+  m=`(map @ *)`~\n  =&lt;  q\n  |-  ^-  [p=@ q=* r=(map @ *)]\n  ?:  =(0 (cut 0 [b 1] a))\n    =+  c=(rub +(b) a)\n    [+(p.c) q.c (~(put by m) b q.c)]\n  =+  c=(add 2 b)\n  ?:  =(0 (cut 0 [+(b) 1] a))\n    =+  u=$(b c)\n    =+  v=$(b (add p.u c), m r.u)\n    =+  w=[q.u q.v]\n    [(add 2 (add p.u p.v)) w (~(put by r.v) b w)]\n  =+  d=(rub c a)\n  [(add 2 p.d) (need (~(get by m) q.d)) m]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(jam [1 2 3])\n  3.426.417</p>\n</blockquote>\n\n<blockquote>\n  <p>(cue 3.426.417)\n  [1 2 3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cue"
        ]
    },
    {
        "doc": "<h2><code>++jam</code> {% #jam %}</h2>\n\n<p>Pack noun to atom</p>\n\n<p>Produces an atom packed from noun <code>a</code>. The inverse of <a href=\"#cue\">+cue</a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  jam\n  ~/  %jam\n  |=  a=*\n  ^-  @\n  =+  b=0\n  =+  m=`(map * @)`~\n  =&lt;  q\n  |-  ^-  [p=@ q=@ r=(map * @)]\n  =+  c=(~(get by m) a)\n  ?~  c\n    =&gt;  .(m (~(put by m) a b))\n    ?:  ?=(@ a)\n      =+  d=(mat a)\n      [(add 1 p.d) (lsh 0 q.d) m]\n    =&gt;  .(b (add 2 b))\n    =+  d=$(a -.a)\n    =+  e=$(a +.a, b (add b p.d), m r.d)\n    [(add 2 (add p.d p.e)) (mix 1 (lsh [0 2] (cat 0 q.d q.e))) r.e]\n  ?:  ?&amp;(?=(@ a) (lte (met 0 a) (met 0 u.c)))\n    =+  d=(mat a)\n    [(add 1 p.d) (lsh 0 q.d) m]\n  =+  d=(mat u.c)\n  [(add 2 p.d) (mix 3 (lsh [0 2] q.d)) m]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(jam 1)\n  12</p>\n</blockquote>\n\n<blockquote>\n  <p>(cue 12)\n  1\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(jam [1 1])\n  817</p>\n</blockquote>\n\n<blockquote>\n  <p>(cue 817)\n  [1 1]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(jam [~ u=19])\n  39.689</p>\n</blockquote>\n\n<blockquote>\n  <p>(cue 39.689)\n  [0 19]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "jam"
        ]
    },
    {
        "doc": "<h2><code>++mat</code></h2>\n\n<p>Length-encode</p>\n\n<p>Produces a cell whose tail <code>q</code> is atom <code>a</code> with a bit representation of\nits length prepended to it (as the least significant bits). The head <code>p</code>\nis the length of <code>q</code> in bits.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of two atoms, <code>p</code> and <code>q</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mat\n  ~/  %mat\n  |=  a=@\n  ^-  [p=@ q=@]\n  ?:  =(0 a)\n    [1 1]\n  =+  b=(met 0 a)\n  =+  c=(met 0 b)\n  :-  (add (add c c) b)\n  (cat 0 (bex c) (mix (end [0 (dec c)] b) (lsh [0 (dec c)] a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mat 0xaaa)\n  [p=20 q=699.024]</p>\n</blockquote>\n\n<blockquote>\n  <p>(met 0 q:(mat 0xaaa))\n  20</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>q:(mat 0xaaa)\n  0b1010.1010.1010.1001.0000</p>\n</blockquote>\n\n<blockquote>\n  <p>=a =-(~&amp;(- -) <code>@ub</code>0xaaa)\n  0b1010.1010.1010</p>\n</blockquote>\n\n<blockquote>\n  <p>=b =-(~&amp;(- -) <code>@ub</code>(xeb a))\n  0b1100</p>\n</blockquote>\n\n<blockquote>\n  <p>=b =-(~&amp;(- -) <code>@ub</code>(met 0 a))\n  0b1100</p>\n</blockquote>\n\n<blockquote>\n  <p>=c =-(~&amp;(- -) (xeb b))\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>[<code>@ub</code>a <code>@ub</code>(end 0 (dec c) b) <code>@ub</code>(bex c)]\n  [0b1010.1010.1010 0b100 0b1.0000]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>mat</code> is only used internally as a helper to <a href=\"#jam\"><code>jam</code></a>.</p>\n\n<hr />\n",
        "keys": [
            "mat"
        ]
    },
    {
        "doc": "<h2><code>++rub</code></h2>\n\n<p>Length-decode</p>\n\n<p>The inverse of <code>mat</code>. Accepts a cell of index <code>a</code> and a bitstring <code>b</code>\nand produces the cell whose tail <code>q</code> is the decoded atom at index <code>a</code>\nand whose head is the length of the encoded atom <code>q</code>, by which the\noffset <code>a</code> is advanced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is a bitstring as an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of two atoms, <code>p</code> and <code>q</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rub\n  ~/  %rub\n  |=  [a=@ b=@]\n  ^-  [p=@ q=@]\n  =+  ^=  c\n      =+  [c=0 m=(met 0 b)]\n      |-  ?&lt;  (gth c m)\n      ?.  =(0 (cut 0 [(add a c) 1] b))\n        c\n      $(c +(c))\n  ?:  =(0 c)\n    [1 0]\n  =+  d=(add a +(c))\n  =+  e=(add (bex (dec c)) (cut 0 [d (dec c)] b))\n  [(add (add c c) e) (cut 0 [(add d (dec c)) e] b)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(jam 0xaaa)\n  0b1.0101.0101.0101.0010.0000</p>\n</blockquote>\n\n<blockquote>\n  <p>(rub 1 0b1.0101.0101.0101.0010.0000)\n  [p=20 q=2.730]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>q:(rub 1 0b1.0101.0101.0101.0010.0000)\n  0xaaa\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>rub</code> is only used internally as a helper to <a href=\"#cue\"><code>cue</code></a>.</p>\n\n<hr />\n",
        "keys": [
            "rub"
        ]
    },
    {
        "doc": "<h2><code>+$axis</code></h2>\n\n<p>Tree address</p>\n\n<p>A Nock axis inside a noun. After the leading 1, in binary, a <code>1</code> signfies\nright and <code>0</code> left.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  axis  @\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=axis <code>axis</code>7\n  axis\n  7\n  <code>@ub</code>axis\n  0b111</p>\n</blockquote>\n\n<blockquote>\n  <p>=noun [[4 5] [6 14 15]]</p>\n</blockquote>\n\n<blockquote>\n  <p>.*(noun [0 axis])\n  [14 15]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$axis"
        ]
    },
    {
        "doc": "<h2><code>+$bean</code></h2>\n\n<p>Boolean</p>\n\n<p><code>0</code>, <code>&amp;</code>, or <code>%.y</code> are true, and <code>1</code>, <code>|</code>, and <code>%.n</code> are false.</p>\n\n<p>Note 1 is false and 0 is true. This is sometimes referred to as \"loobean\".</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  bean  ?\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*bean\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>bean</code>&amp;\n  %.y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>bean</code>|\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$bean"
        ]
    },
    {
        "doc": "<h2><code>+$flag</code></h2>\n\n<p>Boolean</p>\n\n<p>Same as <a href=\"#bean\">$bean</a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  flag  ?\n</code></p>\n\n<hr />\n",
        "keys": [
            "$flag"
        ]
    },
    {
        "doc": "<h2><code>+$char</code></h2>\n\n<p>Character</p>\n\n<p>A single <code>@t</code> character.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  char  @t\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*char\n  ''\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>char</code>'a'\n  'a'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$char"
        ]
    },
    {
        "doc": "<h2><code>+$byts</code></h2>\n\n<p>bytes, LSB first</p>\n\n<p>An atom <code>dat</code> with its byte-length specified in <code>wid</code>. This is to handle leading zeros that are typically ignored.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  byts  [wid=@ud dat=@]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*byts\n  [wid=0 dat=0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a <code>byts</code>[4 2]\n  a\n  [wid=4 dat=2]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(rev 3 a)\n  0x200.0000\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$byts"
        ]
    },
    {
        "doc": "<h2><code>+$date</code></h2>\n\n<p>Parsed date</p>\n\n<p>A boolean designating AD or BC, a year atom, a month atom, and a <code>tarp</code>,\nwhich is a day atom and a time.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  date  [[a=? y=@ud] m=@ud t=tarp]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*date\n  [[a=%.y y=0] m=0 t=[d=0 h=0 m=0 s=0 f=~]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>date</code>(yore ~2014.6.6..21.09.15..0a16)\n  [[a=%.y y=2.014] m=6 t=[d=6 h=21 m=9 s=15 f=~[0xa16]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>now\n  ~2018.5.25..17.55.15..9ad8\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"/reference/hoon/stdlib/3c#year\"><code>year</code></a>, <a href=\"/reference/hoon/stdlib/3c#yore\"><code>yore</code></a></p>\n\n<hr />\n",
        "keys": [
            "$date"
        ]
    },
    {
        "doc": "<h2><code>+$noun</code></h2>\n\n<p>Any noun</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  noun  *\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*noun\n  0\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>noun</code>'foo'\n  7.303.014\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>noun</code>\"foo\"\n  [102 111 111 0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$noun"
        ]
    },
    {
        "doc": "<h2><code>+$path</code></h2>\n\n<p>Like unix path</p>\n\n<p>A path is a list of <a href=\"#knot\"><code>$knot</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  path  (list knot)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*path\n  /\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>path</code>\"foo\"\n  /f/o/o\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>path</code>[~.foo ~.bar ~.baz ~]\n  /foo/bar/baz\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$path"
        ]
    },
    {
        "doc": "<h2><code>+$stud</code></h2>\n\n<p>Standard name</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  stud                    ::  standard name\n          $@  mark=@tas     ::  auth=urbit\n          $:  auth=@tas     ::  standards authority\n              type=path     ::  standard label\n          ==                ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$stud"
        ]
    },
    {
        "doc": "<h2><code>+$tang</code></h2>\n\n<p>Bottom-first error</p>\n\n<p>A list of <a href=\"#tank\"><code>tank</code></a>s. It's for printing types and bottom-up printing of stack\ntraces.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tang  (list tank)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*tang\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>%-  %-  slog\n        ^-  tang\n        :~  'foo'\n            leaf+\"bar\"\n            [%palm [\"|\" \"(\" \"!\" \")\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~]\n            [%rose [\" \" \"[\" \"]\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~]\n        ==\n  foo\n  bar\n  (!foo|bar|baz)\n  [foo bar baz]\n    ~\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$tang"
        ]
    },
    {
        "doc": "<h2><code>+$tank</code></h2>\n\n<p>Formatted print tree</p>\n\n<p>A <code>tank</code> is one of four cases:</p>\n\n<ul>\n<li>just a <code>cord</code>.</li>\n<li><code>%leaf</code> is just a <code>tape</code>.</li>\n<li><code>%palm</code> is a list of <code>tank</code> delimited by the strings in <code>p</code>, with back-steps at new lines.</li>\n<li><code>%rose</code> is a list of <code>tank</code> delimited by the strings in <code>p</code> without back-steps at new lines.</li>\n</ul>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tank\n  $~  leaf/~\n  $@  cord\n  $%  [%leaf p=tape]\n      [%palm p=(qual tape tape tape tape) q=(list tank)]\n      [%rose p=(trel tape tape tape) q=(list tank)]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*tank\n  [%leaf p=\"\"]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ram re 'foobar')\n  \"foobar\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ram re leaf+\"foo\")\n  \"foo\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ram re [%palm [\"|\" \"(\" \"!\" \")\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~])\n  \"(!foo|bar|baz)\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ram re [%rose [\" \" \"[\" \"]\"] leaf+\"foo\" leaf+\"bar\" leaf+\"baz\" ~])\n  \"[foo bar baz]\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$tank"
        ]
    },
    {
        "doc": "<h2><code>+$tour</code></h2>\n\n<p>UTF-32 clusters</p>\n\n<p>A <code>tour</code> is a list of UTF-32 characters.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tour  (list @c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*tour\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tour</code>(tuba \"foobar\")\n  ~[~-f ~-o ~-o ~-b ~-a ~-r]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$tour"
        ]
    },
    {
        "doc": "<h2><code>+$tarp</code></h2>\n\n<p>Parsed time</p>\n\n<p>The time component of a <code>date</code>: day, hour, minute, second and a list of <code>@ux</code>\nfor precision.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tarp  [d=@ud h=@ud m=@ud s=@ud f=(list @ux)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*tarp\n  [d=0 h=0 m=0 s=0 f=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(yell now)\n  [d=106.751.991.821.625 h=22 m=58 s=10 f=~[0x44ff]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tarp</code>(yell ~2014.6.6..21.09.15..0a16)\n  [d=106.751.991.820.172 h=21 m=9 s=15 f=~[0xa16]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(yell ~d20)\n  [d=20 h=0 m=0 s=0 f=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$tarp"
        ]
    },
    {
        "doc": "<h2><code>+$wain</code></h2>\n\n<p>List of strings</p>\n\n<p>A list of <code>cord</code>s. A <code>wain</code> is used instead of a single <code>cord</code> with <code>\\n</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  wain  (list cord)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*wain\n  &lt;||&gt;</p>\n</blockquote>\n\n<blockquote>\n  <p><code>wain</code>/som/del/rok\n  &lt;|som del rok|&gt;\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$wain"
        ]
    },
    {
        "doc": "<h2><code>+$wall</code></h2>\n\n<p>List of list of characters</p>\n\n<p>A list of <code>tape</code>s. <code>wall</code> is used instead of a single <code>tape</code> with <code>\\n</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  wall  (list tape)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*wall\n      &lt;&lt;&gt;&gt;</p>\n\n<pre><code>&gt; `wall`(wash [0 20] leaf+&lt;(bex 256)&gt;)\n&lt;&lt;\n  \"\\\\/115.792.089.237.\\\\/\"\n  \"  316.195.423.570.\"\n  \"  985.008.687.907.\"\n  \"  853.269.984.665.\"\n  \"  640.564.039.457.\"\n  \"  584.007.913.129.\"\n  \"  639.936\"\n  \"\\\\/                \\\\/\"\n&gt;&gt;\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$wall"
        ]
    },
    {
        "doc": "<h2><code>++egcd</code></h2>\n\n<p>Extended Euclidean algorithm</p>\n\n<p>Produces <code>d</code>, the <a href=\"https://en.wikipedia.org/wiki/Greatest_common_divisor\">greatest common\ndivisor</a> of <code>a</code> and <code>b</code>.\nAlso produces <code>u</code> and <code>v</code> such that <code>au + bv = GCD(a, b)</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p><code>d</code>, the greatest common divisor, is an atom.</p>\n\n<p><code>u</code>, the coefficient of <code>a</code>, is a signed integer.</p>\n\n<p><code>v</code>, the coefficient of <code>b</code>, is a signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  egcd\n  |=  [a=@ b=@]\n  =+  si\n  =+  [c=(sun a) d=(sun b)]\n  =+  [u=[c=(sun 1) d=--0] v=[c=--0 d=(sun 1)]]\n  |-  ^-  [d=@ u=@s v=@s]\n  ?:  =(--0 c)\n    [(abs d) d.u d.v]\n  =+  q=(fra d c)\n  %=  $\n    c  (dif d (pro q c))\n    d  c\n    u  [(dif d.u (pro q c.u)) c.u]\n    v  [(dif d.v (pro q c.v)) c.v]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(egcd 11 2)\n  [d=1 u=--1 v=-5]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "egcd"
        ]
    },
    {
        "doc": "<h2><code>++fo</code></h2>\n\n<p>Modulo prime</p>\n\n<p>Container <code>door</code> for modular arithmetic functions.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fo\n  ^|\n  |_  a=@\n</code></p>\n\n<hr />\n\n<h3><code>++dif:fo</code></h3>\n\n<p>Subtraction</p>\n\n<p>Produces the difference between atoms <code>b</code> and <code>c</code>, with <code>a</code> as the modular base.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom, and is the sample of <code>+fo</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dif\n  |=  [b=@ c=@]\n  (sit (sub (add a b) (sit c)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(dif fo 6) 1 2)\n  5</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(dif fo 21) 11 45)\n  8\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++exp:fo</code></h3>\n\n<p>Exponent</p>\n\n<p>Produces the power of <code>c</code> raised to the <code>b</code>, with <code>a</code> as the modular base.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom, and is the sample of <code>+fo</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  exp\n  |=  [b=@ c=@]\n  ?:  =(0 b)\n    1\n  =+  d=$(b (rsh 0 b))\n  =+  e=(pro d d)\n  ?:(=(0 (end 0 b)) e (pro c e))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(exp fo 5) 8 2)\n      1</p>\n\n<pre><code>&gt; (~(exp fo 95) 8 2)\n66\n\n&gt; (~(exp fo 195) 8 2)\n61\n\n&gt; (~(exp fo 995) 8 2)\n256\n</code></pre>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fra:fo</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the quotient of <code>b</code> divided by <code>c</code>, with <code>a</code> as the modular base.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom, and is the sample of <code>+fo</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fra\n  |=  [b=@ c=@]\n  (pro b (inv c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(fra fo 2) 8 2)\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(fra fo 3) 8 2)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(fra fo 4) 8 2)\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(fra fo 5) 8 2)\n  4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++inv:fo</code></h3>\n\n<p>Inverse</p>\n\n<p>Produces an atom by taking the signed modulus of <code>a</code> with the coefficient <code>u</code>;\n<code>u</code> is produced by taking the <a href=\"#egcd\"><code>+egcd</code></a> of <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom, and is the sample of <code>+fo</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  inv\n  |=  b=@\n  =+  c=(dul:si u:(egcd b a) a)\n  c\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(inv fo 11) 2)\n  6</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(inv fo 71) 255)\n  22</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(inv fo 79) 255)\n  22</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(inv fo 78) 255)\n  67</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(inv fo 70) 255)\n  67\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++pro:fo</code></h3>\n\n<p>Multiplication</p>\n\n<p>Produces the multiplication of <code>b</code> and <code>c</code> modulo <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom, and is the sample of <code>+fo</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pro\n  |=  [b=@ c=@]\n  (sit (mul b c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(pro fo 3) 11 4)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(mod 44 3)\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sit:fo</code></h3>\n\n<p>Modulus</p>\n\n<p>Produces the remainder of <code>b</code> modulo <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom, and is the sample of <code>+fo</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sit\n  |=  b=@\n  (mod b a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sit fo 3) 14)\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sum:fo</code></h3>\n\n<p>Modular sum</p>\n\n<p>Produces the remainder of <code>(b + c) mod a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom, and is the sample of <code>+fo</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<p><code>c</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sum\n  |=  [b=@ c=@]\n  (sit (add b c))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(sum fo 3) 14 3)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(mod 17 3)\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fo"
        ]
    },
    {
        "doc": "<h2><code>++si</code></h2>\n\n<p>Signed integer</p>\n\n<p>Container core for signed integer functions.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  si\n  ^?\n  |%\n</code></p>\n\n<h4>Discussion</h4>\n\n<p>The signed-integer type is represented by the <code>@s</code> aura. Positive integers are\nprepended with a <code>--</code>, and negative integers are prepended with a <code>-</code>. For\nexample, <code>--1</code> represents positive one, and <code>-1</code> represents negative one.</p>\n\n<p><a href=\"https://developers.google.com/protocol-buffers/docs/encoding?hl=en#signed-ints\">ZigZag encoding</a>\nis used to convert atoms to signed integers. Positive signed\nintegers correspond to even atoms of twice their absolute value, and negative\nsigned integers correspond to odd atoms of twice their absolute value minus\none. For example:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@</code>--4\n  8\n  <code>@s</code>8\n  --4\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@</code>-4\n  7\n  <code>@s</code>7\n  -4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++abs:si</code></h3>\n\n<p>Absolute value</p>\n\n<p>Produces the absolute value of signed integer <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  abs  |=(a=@s (add (end 0 a) (rsh 0 a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(abs:si -11)\n  11</p>\n</blockquote>\n\n<blockquote>\n  <p>(abs:si --520)\n  520\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dif:si</code></h3>\n\n<p>Subtraction</p>\n\n<p>Produces the difference of <code>a</code> minus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<p><code>b</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dif  |=  [a=@s b=@s]\n         (sum a (new !(syn b) (abs b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(dif:si --3 -2)\n  --5</p>\n</blockquote>\n\n<blockquote>\n  <p>(dif:si -3 --2)\n  -5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dul:si</code></h3>\n\n<p>Modulus</p>\n\n<p>Produces the remainder of <code>b</code> modulo <code>a</code>.</p>\n\n<h4>Examples</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dul  |=  [a=@s b=@]\n         =+(c=(old a) ?:(-.c (mod +.c b) (sub b +.c)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@s</code>(dul:si -1 --5)\n  -5</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@</code>--5\n  10\n  <code>@s</code>(dul:si -1 10)\n  -5</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@s</code>(dul:si -11 -61)\n  --55\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fra:si</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the quotient of <code>b</code> divided by <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<p><code>b</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A signed atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fra  |=  [a=@s b=@s]\n         (new =(0 (mix (syn a) (syn b))) (div (abs a) (abs b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fra:si -1 -1)\n  --1</p>\n</blockquote>\n\n<blockquote>\n  <p>(fra:si -11 --2)\n  -5</p>\n</blockquote>\n\n<blockquote>\n  <p>(fra:si -0 -1)\n  --0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++new:si</code></h3>\n\n<p>Atom to <code>@s</code></p>\n\n<p>Produces a signed integer from an atom <code>b</code>. The product's sign is determined\nby the value of flag <code>a</code>: <code>&amp;</code> will result in a prepending <code>--</code>, and <code>|</code> will\nresult in a prepending <code>-</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a flag.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  new  |=  [a=? b=@]\n         `@s`?:(a (mul 2 b) ?:(=(0 b) 0 +((mul 2 (dec b)))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(new:si | 2)\n  -2</p>\n</blockquote>\n\n<blockquote>\n  <p>(new:si &amp; 2)\n  --2</p>\n</blockquote>\n\n<blockquote>\n  <p>(new:si &amp; -2)\n  --3</p>\n</blockquote>\n\n<blockquote>\n  <p>(new:si &amp; --2)\n  --4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++old:si</code></h3>\n\n<p>Sign and absolute value</p>\n\n<p>Produces a cell composed of a <code>%.y</code> or <code>%.n</code>, depending on whether <code>a</code> is\npositive or negative, and the absolute value of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A cell composed of a <code>?</code> and an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n      ++  old  |=(a=@s [(syn a) (abs a)])\n</code></p>\n\n<p><code>hoon\n++  old  |=(a=@s [(syn a) (abs a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(old:si -2)\n  [%.n 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(old:si --2)\n  [%.y 2]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++pro:si</code></h3>\n\n<p>Multiplication</p>\n\n<p>Produces a signed integer by multiplying <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an unsigned integer.</p>\n\n<p><code>b</code> is an unsigned integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pro  |=  [a=@s b=@s]\n         (new =(0 (mix (syn a) (syn b))) (mul (abs a) (abs b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(pro:si -3 -3)\n  --9</p>\n</blockquote>\n\n<blockquote>\n  <p>(pro:si -3 --3)\n  -9\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rem:si</code></h3>\n\n<p>Remainder</p>\n\n<p>Produces a signed integer that is the remainder of <code>a</code> divided by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<p><code>b</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rem  |=([a=@s b=@s] (dif a (pro b (fra a b))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rem:si -17 -3)\n  -2</p>\n</blockquote>\n\n<blockquote>\n  <p>(rem:si --17 -3)\n  --2</p>\n</blockquote>\n\n<blockquote>\n  <p>(rem:si -17 --3)\n  -2</p>\n</blockquote>\n\n<blockquote>\n  <p>(rem:si --17 --3)\n  --2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sum:si</code></h3>\n\n<p>Addition</p>\n\n<p>Produces an atom by adding <code>a</code> and <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<p><code>b</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sum  |=  [a=@s b=@s]\n         =+  [c=(old a) d=(old b)]\n         ?:  -.c\n           ?:  -.d\n             (new &amp; (add +.c +.d))\n           ?:  (gte +.c +.d)\n             (new &amp; (sub +.c +.d))\n           (new | (sub +.d +.c))\n         ?:  -.d\n           ?:  (gte +.c +.d)\n             (new | (sub +.c +.d))\n           (new &amp; (sub +.d +.c))\n         (new | (add +.c +.d))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sum:si -11 --2)\n  -9</p>\n</blockquote>\n\n<blockquote>\n  <p>(sum:si --2 --2)\n  --4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sun:si</code></h3>\n\n<p><code>@u</code> to <code>@s</code></p>\n\n<p>Multiplies the unsigned integer <code>a</code> by two, producing an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sun  |=(a=@u (mul 2 a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:si 90)\n  180</p>\n</blockquote>\n\n<blockquote>\n  <p>(sun:si --90)\n  360\n  <code>@u</code>--90\n  180</p>\n</blockquote>\n\n<blockquote>\n  <p>(sun:si --89)\n  356\n  <code>@u</code>--89\n  178</p>\n</blockquote>\n\n<blockquote>\n  <p>(sun:si -89)\n  354\n  <code>@u</code>-89\n  177\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++syn:si</code></h3>\n\n<p>Sign test</p>\n\n<p>Tests whether signed atom <code>a</code> is positive or negative. <code>%.y</code> is produced if <code>a</code>\nis positive, and <code>%.n</code> is produced if <code>a</code> is negative.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>?</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  syn  |=(a=@s =(0 (end 0 a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(syn:si -2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(syn:si --2)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++cmp:si</code></h3>\n\n<p>Compare</p>\n\n<p>Compares <code>a</code> and <code>b</code> to see which is greater. If <code>a</code> is greater than <code>b</code>, <code>--1</code>\nis produced. If <code>b</code> is greater than <code>a</code>, <code>-1</code> is produced. If <code>a</code> and <code>b</code> are\nequal, <code>--0</code> is produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<p><code>b</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cmp  |=  [a=@s b=@s]\n         ^-  @s\n         ?:  =(a b)\n           --0\n         ?:  (syn a)\n           ?:  (syn b)\n             ?:  (gth a b)\n               --1\n             -1\n           --1\n        ?:  (syn b)\n          -1\n        ?:  (gth a b)\n          -1\n        --1\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cmp:si -2 --1)\n  -1</p>\n</blockquote>\n\n<blockquote>\n  <p>(cmp:si -2 --1)\n  -1</p>\n</blockquote>\n\n<blockquote>\n  <p>(cmp:si --2 --1)\n  --1</p>\n</blockquote>\n\n<blockquote>\n  <p>(cmp:si --2 --2)\n  --0</p>\n</blockquote>\n\n<blockquote>\n  <p>(cmp:si --2 --5)\n  -1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "si"
        ]
    },
    {
        "doc": "<h2><code>++fn</code></h2>\n\n<p>Float</p>\n\n<p>A mold for the floating-point arithmetic using the base of two, the formula is\n<code>(-1)^s * a * 2^e</code>.</p>\n\n<p>Produces either a float (<code>%f</code>), an infinity of other sign (<code>%i</code>),\nor not-a-number (<code>%n</code>). <code>s</code> refers to sign, the <code>flag</code>s <code>&amp;</code> or <code>|</code>; <code>e</code> to\nexponent, a signed decimal; and <code>a</code> to the significand, an unsigned integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fn\n  $%  [%f s=? e=@s a=@u]\n      [%i s=?]\n      [%n ~]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*fn\n  [%n ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(add:fl [%f &amp; --33 2] [%f | --23 2])\n  [%f s=%.y e=-79 a=10.374.452.512.267.829.421.849.019.032.797.184]</p>\n</blockquote>\n\n<blockquote>\n  <p>(add:fl [%i &amp;] [%i &amp;])\n  [%i s=%.y]</p>\n</blockquote>\n\n<blockquote>\n  <p>(add:fl [%n ~] [%i |])\n  [%n ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(sun:fl 961.193.554.848.514.048.973.893.027.381.506.219.443)\n  [%f s=%.y e=--17 a=7.333.324.850.834.000.007.430.214.137.126.970]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fn"
        ]
    },
    {
        "doc": "<h2><code>++dn</code></h2>\n\n<p>Decimal float</p>\n\n<p>A mold for the floating-point arithmetic using the base of 10; the formula is\n<code>(-1)^s * a *10^e</code>.</p>\n\n<p>Valid values are a float (<code>%d</code>), an infinity (<code>%i</code>), or a not-a-number (<code>%n</code>).\n<code>s</code> refers to sign, the <code>flag</code>s <code>&amp;</code> or <code>|</code>; <code>e</code> to exponent, a signed decimal;\nand <code>a</code> to the significand, an unsigned integer.</p>\n\n<p><code>hoon\n++  dn\n  $%  [%d s=? e=@s a=@u]\n      [%i s=?]\n      [%n ~]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>dn</code>[%d &amp; --0 17.163.091.968]\n  [%d s=%.y e=--0 a=17.163.091.968]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>dn</code>[%i s=%.y]\n  [%i s=%.y]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>dn</code>[%n ~]\n  [%n ~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dn"
        ]
    },
    {
        "doc": "<h2><code>++rn</code></h2>\n\n<p>Parsed decimal float</p>\n\n<p>A mold for the floating-point arithmetic using the base of 10; the formula is\n<code>(-1)^s * a *10^e</code>.</p>\n\n<p>Produces either a parsed float (<code>%d</code>), infinity of either sign (<code>%i</code>), or\nnot-a-number (<code>%n</code>).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rn\n  $%  [%d a=? b=[c=@ [d=@ e=@] f=? i=@]]\n      [%i a=?]\n      [%n ~]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>rn</code>[%d | [2 [3 4] | 17.163]]\n  [%d a=%.n b=[c=2 [d=3 e=4] f=%.n i=17.163]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rn"
        ]
    },
    {
        "doc": "<h2><code>++fl</code></h2>\n\n<p>Arbitrary-precision floating-point</p>\n\n<p>Container arm for floating-point arithmetic functions.</p>\n\n<ul>\n<li>Precision (<code>p</code>): number of bits in the significand; must be at least 2.\nDefault is 113.</li>\n<li>Minimum exponent (<code>v</code>): minimum value of e. Default is -16.494.</li>\n<li>Width (<code>w</code>): Max value of <code>e</code> minus min value of <code>e</code>. 0 is for fixed-point.\nDefault is 32.765.</li>\n<li>Rounding mode (<code>r</code>): Possible modes are nearest (<code>%n</code>), up (<code>%u</code>),\ndown (<code>%d</code>), to zero (<code>%z</code>), and away from zero (<code>%a</code>). Default value is <code>%n</code>.</li>\n<li>Behavior (<code>d</code>): return denormals (<code>%d</code>), flush denormals to zero (<code>%z</code>),\ninfinite exponent range (<code>%i</code>). Default value is <code>%d</code>.</li>\n</ul>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fl\n  =/  [[p=@u v=@s w=@u] r=$?(%n %u %d %z %a) d=$?(%d %f %i)]\n    [[113 -16.494 32.765] %n %d]\n  =&gt;\n    ~%  %cofl  +&gt;  ~\n    |%\n</code></p>\n\n<hr />\n\n<h3><code>^rou:fl</code></h3>\n\n<p>Round</p>\n\n<p>Rounds <code>a</code> to a the nearest float that can be represented with a 113-bit\nsignificand. There is no term to sign the significand, meaning that a positive\nsign will always be produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rou\n  |=  [a=[e=@s a=@u]]  ^-  fn  (rau a &amp;)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a 10.161.487.211.429.486.882.397.572.894.294.017.777\n  (^rou:fl [--12 a])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]</p>\n</blockquote>\n\n<blockquote>\n  <p>(^rou:fl [--12 (add a 1)])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]</p>\n</blockquote>\n\n<blockquote>\n  <p>(^rou:fl [--12 (add a 300)])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]</p>\n</blockquote>\n\n<blockquote>\n  <p>(^rou:fl [--12 (add a 1.000)])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.003]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rau:fl</code></h3>\n\n<p>Various roundings</p>\n\n<p>Rounds <code>a</code> based on what the state of of <code>r</code> in the core contained in <code>fl</code>. <code>t</code>\nis a sticky bit that represents a value less than ULP(a) = 2^(e.a) when passed\nto <code>lug:fl</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>t</code> is a <code>flag</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rau\n  |=  [a=[e=@s a=@u] t=?]  ^-  fn\n  ?-  r\n    %z  (lug %fl a t)  %d  (lug %fl a t)\n    %a  (lug %ce a t)  %u  (lug %ce a t)\n    %n  (lug %ne a t)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rau:fl [-18 342.602.577] &amp;)\n  [%f s=%.y e=-102 a=6.626.897.619.228.945.634.459.505.846.648.832]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See <a href=\"#lugfl\"><code>lug:fl</code></a> for possible rounding operations.</p>\n\n<hr />\n\n<h3><code>^add:fl</code></h3>\n\n<p>Add</p>\n\n<p>Produces the sum of <code>a</code> and <code>b</code>. <code>e</code> is used to choose between an exact result\n(any-sized significand) or a rounded result (113-bit significand).</p>\n\n<p>There is no term to sign the significands, so a positive sign will always be\nproduced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code></p>\n\n<p><code>e</code> is a <code>flag</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u] e=?]  ^-  fn\n  =+  q=(dif:si e.a e.b)\n  |-  ?.  (syn:si q)  $(b a, a b, q +(q))\n  ?:  e\n    [%f &amp; e.b (^add (lsh [0 (abs:si q)] a.a) a.b)]\n  =+  [ma=(met 0 a.a) mb=(met 0 a.b)]\n  =+  ^=  w  %+  dif:si  e.a  %-  sun:si\n    ?:  (gth prc ma)  (^sub prc ma)  0\n  =+  ^=  x  %+  sum:si  e.b  (sun:si mb)\n  ?:  =((cmp:si w x) --1)\n    ?-  r\n      %z  (lug %fl a &amp;)  %d  (lug %fl a &amp;)\n      %a  (lug %lg a &amp;)  %u  (lug %lg a &amp;)\n      %n  (lug %na a &amp;)\n    ==\n  (rou [e.b (^add (lsh [0 (abs:si q)] a.a) a.b)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^add:fl [--33 2.718] [--23 11] %.y)\n  [%f s=%.y e=--23 a=2.783.243]</p>\n</blockquote>\n\n<blockquote>\n  <p>(^add:fl [--33 2.718] [--23 11] %.n)\n  [%f s=%.y e=-68 a=6.890.975.897.521.519.304.902.126.405.156.864]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>^sub:fl</code></h3>\n\n<p>Subtract</p>\n\n<p>Produces the difference of <code>a</code> minus <code>b.</code> <code>e</code> is used to choose between an exact\nresult (any-sized significand) or a rounded result (113-bit significand).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>b</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>e</code> is a <code>flag</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u] e=?]  ^-  fn\n  =+  q=(dif:si e.a e.b)\n  |-  ?.  (syn:si q)\n    (fli $(b a, a b, q +(q), r swr))\n  =+  [ma=(met 0 a.a) mb=(met 0 a.b)]\n  =+  ^=  w  %+  dif:si  e.a  %-  sun:si\n    ?:  (gth prc ma)  (^sub prc ma)  0\n  =+  ^=  x  %+  sum:si  e.b  (sun:si +(mb))\n  ?:  &amp;(!e =((cmp:si w x) --1))\n    ?-  r\n      %z  (lug %sm a &amp;)  %d  (lug %sm a &amp;)\n      %a  (lug %ce a &amp;)  %u  (lug %ce a &amp;)\n      %n  (lug %nt a &amp;)\n    ==\n  =+  j=(lsh [0 (abs:si q)] a.a)\n  |-  ?.  (gte j a.b)\n    (fli $(a.b j, j a.b, r swr))\n  =+  i=(^sub j a.b)\n  ?~  i  [%f &amp; zer]\n  ?:  e  [%f &amp; e.b i]  (rou [e.b i])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^sub:fl [--33 2.718] [--23 11] %.y)\n  [%f s=%.y e=--23 a=2.783.221]</p>\n</blockquote>\n\n<blockquote>\n  <p>(^sub:fl [--33 2.718] [--63 11] %.y)\n  [%f s=%.n e=--33 a=11.811.157.346]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>^mul:fl</code></h3>\n\n<p>Multiply</p>\n\n<p>Produces the product of <code>a</code> multiplied by <code>b</code>. There is no term to sign the\nsignificands, so a positive sign will always be produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>b</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mul\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  fn\n  (rou (sum:si e.a e.b) (^mul a.a a.b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^mul:fl [--3 2.718] [--23 11])\n  [%f s=%.y e=-72 a=9.475.054.411.405.900.661.487.108.108.582.912]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>^div:fl</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the quotient of <code>a</code> divided by <code>b</code>. There is no term to sign the\nsignificands, so a positive sign will always be produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>b</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  fn\n  =+  [ma=(met 0 a.a) mb=(met 0 a.b)]\n  =+  v=(dif:si (sun:si ma) (sun:si +((^add mb prc))))\n  =.  a  ?:  (syn:si v)  a\n  a(e (sum:si v e.a), a (lsh [0 (abs:si v)] a.a))\n  =+  [j=(dif:si e.a e.b) q=(dvr a.a a.b)]\n  (rau [j p.q] =(q.q 0))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^div:fl [--13 2.718] [--23 11])\n  [%f s=%.y e=-115 a=10.023.198.055.040.952.765.870.659.817.343.907]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>^sqt:fl</code></h3>\n\n<p>Square root</p>\n\n<p>Produces the square root of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt\n  |=  [a=[e=@s a=@u]]  ^-  fn\n  =.  a\n    =+  [w=(met 0 a.a) x=(^mul +(prc) 2)]\n    =+  ?:((^lth w x) (^sub x w) 0)\n    =+  ?:  =((dis - 1) (dis (abs:si e.a) 1))  -\n      (^add - 1)\n    a(e (dif:si e.a (sun:si -)), a (lsh [0 -] a.a))\n  =+  [y=(^sqt a.a) z=(fra:si e.a --2)]\n  (rau [z p.y] =(q.y 0))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^sqt:fl [-18 342.602.577])\n  [%f s=%.y e=-107 a=5.865.903.143.604.945.574.132.671.852.050.553]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>^lth:fl</code></h3>\n\n<p>Less than</p>\n\n<p>Tests if <code>a</code> is less than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>b</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  ?\n  ?:  =(e.a e.b)  (^lth a.a a.b)\n  =+  c=(cmp:si (ibl a) (ibl b))\n  ?:  =(c -1)  &amp;  ?:  =(c --1)  |\n  ?:  =((cmp:si e.a e.b) -1)\n    (^lth (rsh [0 (abs:si (dif:si e.a e.b))] a.a) a.b)\n  (^lth (lsh [0 (abs:si (dif:si e.a e.b))] a.a) a.b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^lth:fl [-4 684] [--0 35])\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(^lth:fl [-4 684] [--0 90])\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>^equ:fl</code></h3>\n\n<p>Equals</p>\n\n<p>Tests if <code>a</code> is equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>b</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  equ\n  |=  [a=[e=@s a=@u] b=[e=@s a=@u]]  ^-  ?\n  ?.  =((ibl a) (ibl b))  |\n  ?:  =((cmp:si e.a e.b) -1)\n    =((lsh [0 (abs:si (dif:si e.a e.b))] a.b) a.a)\n  =((lsh [0 (abs:si (dif:si e.a e.b))] a.a) a.b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^equ:fl [-4 480] [-0 50])\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(^equ:fl [-4 480] [-0 30])\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ibl:fl</code></h3>\n\n<p>Integer binary logarithm</p>\n\n<p>Produces the lowest power to which the number 2 must be raised to obtain <code>a</code> or\ngreater.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ibl\n  |=  [a=[e=@s a=@u]]  ^-  @s\n  (sum:si (sun:si (dec (met 0 a.a))) e.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ibl:fl [-18 342.602.577])\n  --10\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++uni:fl</code></h3>\n\n<p>Change representation to odd</p>\n\n<p>Produces another representation of the floating point <code>a</code> where the significand\nis odd. Every floating-point number has a unique representation of this kind. If\nthe significand of <code>a</code> is already odd, nothing changes.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of a signed integer and an unsigned integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  uni\n  |=  [a=[e=@s a=@u]]\n  |-  ?:  =((end 0 a.a) 1)  a\n  $(a.a (rsh 0 a.a), e.a (sum:si e.a --1))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(uni:fl [-8 342.602.578])\n  [e=-7 a=171.301.289]</p>\n</blockquote>\n\n<blockquote>\n  <p>(uni:fl [-8 342.602.577])\n  [e=-8 a=342.602.577]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++xpd:fl</code></h3>\n\n<p>Expand</p>\n\n<p>Produces the fully precise form of <code>a</code>, or the denormalized form of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of a signed integer and an unsigned integer.</p>\n\n<h4>Sources</h4>\n\n<p><code>hoon\n++  xpd\n  |=  [a=[e=@s a=@u]]\n  =+  ma=(met 0 a.a)\n  ?:  (gte ma prc)  a\n  =+  ?:  =(den %i)  (^sub prc ma)\n      =+  ^=  q\n        =+  w=(dif:si e.a emn)\n        ?:  (syn:si w)  (abs:si w)  0\n      (min q (^sub prc ma))\n  a(e (dif:si e.a (sun:si -)), a (lsh [0 -] a.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xpd:fl [--3 12])\n  [e=-106 a=7.788.445.287.802.241.442.795.744.493.830.144]</p>\n</blockquote>\n\n<blockquote>\n  <p>(xpd:fl [-8 342.602.577])\n  [e=-92 a=6.626.897.619.228.945.634.459.505.846.648.832]</p>\n</blockquote>\n\n<blockquote>\n  <p>(xpd:fl [-92 6.626.897.619.228.945.634.459.505.846.648.832])\n  [e=-92 a=6.626.897.619.228.945.634.459.505.846.648.832]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lug:fl</code></h3>\n\n<p>Central rounding mechanism</p>\n\n<p>Performs various rounding operations on <code>a</code>. An operation is chosen based on the\nvalue selected for <code>t</code>. <code>s</code> is a sticky bit that represents a value less than\nULP(a) = 2^(e.a)</p>\n\n<p>Possible rounding operations:</p>\n\n<ul>\n<li>Floor (<code>%fl</code>)</li>\n<li>Ceiling (<code>%ce</code>)</li>\n<li>Smaller (<code>%sm</code>)</li>\n<li>Larger (<code>%lg</code>)</li>\n<li>Nearest (<code>%ne</code>) -- Rounds ties away from 0 if the number is even, rounds\ntoward 0 if the number is odd.</li>\n</ul>\n\n<h4>Accepts</h4>\n\n<p><code>t</code> is one of the following: <code>%fl</code>, <code>%ce</code>, <code>%sm</code>, <code>%lg</code>, <code>%ne</code>, <code>%na</code>, or <code>%nt</code>.</p>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<p><code>s</code> is a flag.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lug\n  ~/  %lug\n  |=  [t=$?(%fl %ce %sm %lg %ne %na %nt) a=[e=@s a=@u] s=?]  ^-  fn\n  ?&lt;  =(a.a 0)\n  =-\n    ?.  =(den %f)  -                                ::  flush denormals\n    ?.  ?=([%f *] -)  -\n    ?:  =((met 0 -&gt;+&gt;) prc)  -  [%f &amp; zer]\n  ::\n  =+  m=(met 0 a.a)\n  ?&gt;  |(s (gth m prc))                              ::  require precision\n  =+  ^=  q  %+  max\n      ?:  (gth m prc)  (^sub m prc)  0              ::  reduce precision\n    %-  abs:si  ?:  =(den %i)  --0                  ::  enforce min. exp\n    ?:  =((cmp:si e.a emn) -1)  (dif:si emn e.a)  --0\n  =^  b  a  :-  (end [0 q] a.a)\n    a(e (sum:si e.a (sun:si q)), a (rsh [0 q] a.a))\n  ::\n  ?~  a.a\n    ?&lt;  =(den %i)\n    ?-  t\n      %fl  [%f &amp; zer]\n      %sm  [%f &amp; zer]\n      %ce  [%f &amp; spd]\n      %lg  [%f &amp; spd]\n      %ne  ?:  s  [%f &amp; ?:((lte b (bex (dec q))) zer spd)]\n           [%f &amp; ?:((^lth b (bex (dec q))) zer spd)]\n      %nt  ?:  s  [%f &amp; ?:((lte b (bex (dec q))) zer spd)]\n           [%f &amp; ?:((^lth b (bex (dec q))) zer spd)]\n      %na  [%f &amp; ?:((^lth b (bex (dec q))) zer spd)]\n    ==\n  ::\n  =.  a  (xpd a)\n  ::\n  =.  a\n    ?-  t\n      %fl  a\n      %lg  a(a +(a.a))\n      %sm  ?.  &amp;(=(b 0) s)  a\n           ?:  &amp;(=(e.a emn) !=(den %i))  a(a (dec a.a))\n           =+  y=(dec (^mul a.a 2))\n           ?.  (lte (met 0 y) prc)  a(a (dec a.a))\n           [(dif:si e.a --1) y]\n      %ce  ?:  &amp;(=(b 0) s)  a  a(a +(a.a))\n      %ne  ?~  b  a\n           =+  y=(bex (dec q))\n           ?:  &amp;(=(b y) s)                          ::  round halfs to even\n             ?~  (dis a.a 1)  a  a(a +(a.a))\n           ?:  (^lth b y)  a  a(a +(a.a))\n      %na  ?~  b  a\n           =+  y=(bex (dec q))\n           ?:  (^lth b y)  a  a(a +(a.a))\n      %nt  ?~  b  a\n           =+  y=(bex (dec q))\n           ?:  =(b y)  ?:  s  a  a(a +(a.a))\n           ?:  (^lth b y)  a  a(a +(a.a))\n    ==\n  ::\n  =.  a  ?.  =((met 0 a.a) +(prc))  a\n    a(a (rsh 0 a.a), e (sum:si e.a --1))\n  ?~  a.a  [%f &amp; zer]\n  ::\n  ?:  =(den %i)  [%f &amp; a]\n  ?:  =((cmp:si emx e.a) -1)  [%i &amp;]  [%f &amp; a]      ::  enforce max. exp\n</code></p>\n\n<hr />\n\n<h3><code>^drg:fl</code></h3>\n\n<p>Get printable decimal</p>\n\n<p>Produces the decimal form of <code>a</code> using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of a signed integer and an unsigned integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drg                                             ::  dragon4; get\n  ~/  %drg                                          ::  printable decimal;\n  |=  [a=[e=@s a=@u]]  ^-  [@s @u]                  ::  guaranteed accurate\n  ?&lt;  =(a.a 0)                                      ::  for rounded floats\n  =.  a  (xpd a)\n  =+  r=(lsh [0 ?:((syn:si e.a) (abs:si e.a) 0)] a.a)\n  =+  s=(lsh [0 ?.((syn:si e.a) (abs:si e.a) 0)] 1)\n  =+  mn=(lsh [0 ?:((syn:si e.a) (abs:si e.a) 0)] 1)\n  =+  mp=mn\n  =&gt;  ?.\n        ?&amp;  =(a.a (bex (dec prc)))                  ::  if next smallest\n            |(!=(e.a emn) =(den %i))                ::  float is half ULP,\n        ==                                          ::  tighten lower bound\n      .\n    %=  .\n      mp  (lsh 0 mp)\n      r  (lsh 0 r)\n      s  (lsh 0 s)\n    ==\n  =+  [k=--0 q=(^div (^add s 9) 10)]\n  |-  ?:  (^lth r q)\n    %=  $\n      k  (dif:si k --1)\n      r  (^mul r 10)\n      mn  (^mul mn 10)\n      mp  (^mul mp 10)\n    ==\n  |-  ?:  (gte (^add (^mul r 2) mp) (^mul s 2))\n    $(s (^mul s 10), k (sum:si k --1))\n  =+  [u=0 o=0]\n  |-                                                ::  r/s+o = a*10^-k\n  =+  v=(dvr (^mul r 10) s)\n  =&gt;  %=  .\n      k  (dif:si k --1)\n      u  p.v\n      r  q.v\n      mn  (^mul mn 10)\n      mp  (^mul mp 10)\n    ==\n  =+  l=(^lth (^mul r 2) mn)                        ::  in lower bound\n  =+  ^=  h                                         ::  in upper bound\n    ?|  (^lth (^mul s 2) mp)\n        (gth (^mul r 2) (^sub (^mul s 2) mp))\n    ==\n  ?:  &amp;(!l !h)\n    $(o (^add (^mul o 10) u))\n  =+  q=&amp;(h |(!l (gth (^mul r 2) s)))\n  =.  o  (^add (^mul o 10) ?:(q +(u) u))\n  [k o]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:fl 218.116)\n  [%f s=%.y e=-95 a=8.640.464.947.480.640.129.276.716.135.743.488]\n  (^drg:fl [e=-95 a=8.640.464.947.480.640.129.276.716.135.743.488])\n  [--0 218.116]</p>\n</blockquote>\n\n<blockquote>\n  <p>(sun:fl 102.057.673.128.349)\n  [%f s=%.y e=-66 a=7.530.527.107.827.833.883.675.587.233.447.936]\n  (^drg:fl [e=-66 a=7.530.527.107.827.833.883.675.587.233.447.936])\n  [--0 102.057.673.128.349]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>^toj:fl</code></h3>\n\n<p>Round to integer</p>\n\n<p>Rounds float <code>a</code> to the nearest decimal float with an exponent of 0.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a cell of a signed integer and an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toj\n  |=  [a=[e=@s a=@u]]  ^-  fn\n  ?.  =((cmp:si e.a --0) -1)  [%f &amp; a]\n  =+  x=(abs:si e.a)\n  =+  y=(rsh [0 x] a.a)\n  ?:  |(=(r %d) =(r %z))  [%f &amp; --0 y]\n  =+  z=(end [0 x] a.a)\n  ?:  |(=(r %u) =(r %a))  [%f &amp; --0 ?~(z y +(y))]\n  =+  i=(bex (dec x))\n  ?:  &amp;(=(z i) =((dis y 1) 0))  [%f &amp; --0 y]\n  ?:  (^lth z i)  [%f &amp; --0 y]  [%f &amp; --0 +(y)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(^toj:fl [-11 7.530.107.827.833.587])\n  [%f s=%.y e=--0 a=3.676.810.462.809]</p>\n</blockquote>\n\n<blockquote>\n  <p>(^toj:fl [-11 7.530.107.827.833.589])\n  [%f s=%.y e=--0 a=3.676.810.462.809]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ned:fl</code></h3>\n\n<p>Require float</p>\n\n<p>Produces <code>a</code> if <code>a</code> is a is of floating-point representation. If <code>a</code> is another\ncase of <code>fn</code>, such as infinity or not-a-number, a crash is produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of a signed integer and an unsigned integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ned\n  |=  [a=fn]  ^-  [%f s=? e=@s a=@u]\n  ?:  ?=([%f *] a)  a\n  ~_  leaf+\"need-float\"\n  !!\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ned:fl [%f s=%.y e=-11 a=7.530.107.827.833.587])\n  [%f s=%.y e=-11 a=7.530.107.827.833.587]</p>\n</blockquote>\n\n<blockquote>\n  <p>(ned:fl [%n ~])\n  ! need-float\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(ned:fl [%i |])\n  ! need-float\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++shf:fl</code></h3>\n\n<p>Shift power</p>\n\n<p>Multiplies <code>a</code> by 2 to the <code>b</code> power without rounding. This results in shifting\nthe exponent term by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shf\n  |=  [a=fn b=@s]\n  ?:  |(?=([%n *] a) ?=([%i *] a))  a\n  a(e (sum:si e.a b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(shf:fl [[%f &amp; -2 7] --2])\n  [%f s=%.y e=--0 a=7]</p>\n</blockquote>\n\n<blockquote>\n  <p>(shf:fl [[%f &amp; -2 7] -2])\n  [%f s=%.y e=-4 a=7]</p>\n</blockquote>\n\n<blockquote>\n  <p>(shf:fl [%f &amp; -11 7.530.107.827.833.587] --5)\n  [%f s=%.y e=-6 a=7.530.107.827.833.587]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fli:fl</code></h3>\n\n<p>Flip sign</p>\n\n<p>Produces <code>a</code> with its signed changed from positive to negative, or vice versa.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fli\n  |=  [a=fn]  ^-  fn\n  ?-(-.a %f a(s !s.a), %i a(s !s.a), %n a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fli:fl [%f %.y -2 7])\n  [%f s=%.n e=-2 a=7]</p>\n</blockquote>\n\n<blockquote>\n  <p>(fli:fl [%f %.n --2 30.617])\n  [%f s=%.y e=--2 a=30.617]</p>\n</blockquote>\n\n<blockquote>\n  <p>(fli:fl [%f | --2 30.617])\n  [%f s=%.y e=--2 a=30.617]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++swr:fl</code></h3>\n\n<p>Switch rounding</p>\n\n<p>Switches the rounding mode of <code>r:fl</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  swr  ?+(r r %d %u, %u %d)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>r:fl\n  %n\n  swr:fl\n  %n</p>\n</blockquote>\n\n<blockquote>\n  <p>=new-fl fl                              ::  new fl core with changed state\n  =new-fl new-fl(r %u)\n  swr:new-fl\n  %d\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++prc:fl</code></h3>\n\n<p>Force precision of 2 or greater</p>\n\n<p>Produces <code>p</code>, the core's precision, if <code>p</code> is greater than or equal to 2.\nOtherwise, a crash is produced.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  prc  ?&gt;((gth p 1) p)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>prc:fl\n  113</p>\n</blockquote>\n\n<blockquote>\n  <p>=new-fl fl\n  =new-fl new-fl(p 1)\n  prc:new-fl\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>=new-fl new-fl(p 2)\n  prc:new-fl\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++den:fl</code></h3>\n\n<p>Behavior</p>\n\n<p>Produces <code>d:fl</code>. Denormalizes if <code>d:fl</code> is <code>%d</code>. Flushes denormals to zero if\n<code>d:fl</code> is <code>%f</code>.</p>\n\n<ul>\n<li>Denormalizes if <code>d:fl</code> is <code>%d</code>.</li>\n<li>Flushes denormals to zero if <code>d:fl</code> is <code>%f</code>.</li>\n<li>Infinite exponent range if <code>%d</code> is <code>%i</code>.</li>\n</ul>\n\n<p>The default value of <code>d</code> is <code>%d</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  den  d\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>den:fl\n  %d</p>\n</blockquote>\n\n<blockquote>\n  <p>=new-fl fl\n  =new-fl new-fl(d %f)\n  den:new-fl\n  %f\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++emn:fl</code></h3>\n\n<p>Minimum exponent</p>\n\n<p>Produces <code>v:fl</code>, the minimum exponent. The default minimum exponent is -16.494.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  emn  v\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>emn:fl\n  -16.494\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++emx:fl</code></h3>\n\n<p>Maximum exponent</p>\n\n<p>Returns the maximum exponent of <code>fl</code>. The default maximum exponent is --16.271.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  emx  (sum:si emn (sun:si w))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>emx:fl\n  --16.271</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@u</code>emx:fl\n  32.542\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++spd:fl</code></h3>\n\n<p>Smallest denormal</p>\n\n<p>Produces the smallest possible denormalized float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  spd  [e=emn a=1]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>spd:fl\n  [e=-16.494 a=1]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++spn:fl</code></h3>\n\n<p>Smallest normal</p>\n\n<p>Produces the smallest representable normal float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  spn  [e=emn a=(bex (dec prc))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>spn:fl\n  [e=-16.494 a=5.192.296.858.534.827.628.530.496.329.220.096]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lfn:fl</code></h3>\n\n<p>Largest normal</p>\n\n<p>Produces the largest representable normal float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lfn  [e=emx a=(fil 0 prc 1)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>lfn:fl\n  [e=--16.271 a=10.384.593.717.069.655.257.060.992.658.440.191]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lfe:fl</code></h3>\n\n<p>Maximum</p>\n\n<p>Produces the sum of <code>emx:fl</code> plus <code>prc:fl</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lfe  (sum:si emx (sun:si prc))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>lfe:fl\n  --16.384\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zer:fl</code></h3>\n\n<p>Zero</p>\n\n<p>Produces zero represented as a float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zer  [e=--0 a=0]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>zer:fl\n  [e=--0 a=0]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rou:fl</code></h3>\n\n<p>Round</p>\n\n<p>Rounds <code>a</code>. The way in which <code>a</code> is rounded depends on the value of <code>r:fl</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produes</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rou\n  |=  [a=fn]  ^-  fn\n  ?.  ?=([%f *] a)  a\n  ?~  a.a  [%f s.a zer]\n  ?:  s.a  (^rou +&gt;.a)\n  =.(r swr (fli (^rou +&gt;.a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=a 10.161.487.211.429.486.882.397.572.894.294.017.777\n  (rou:fl [%f &amp; --12 a])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rou:fl [%f &amp; --12 (add a 1)])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rou:fl [%f &amp; --12 (add a 300)])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.002]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rou:fl [%f &amp; --12 (add a 1.000)])\n  [%f s=%.y e=--22 a=9.923.327.354.911.608.283.591.379.779.584.003]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++syn:fl</code></h3>\n\n<p>Get sign</p>\n\n<p>Produces the sign of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produes</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  syn\n  |=  [a=fn]  ^-  ?\n  ?-(-.a %f s.a, %i s.a, %n &amp;)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(syn:fl (sun:fl 106))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(syn:fl [%f | --0 106])\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++abs:fl</code></h3>\n\n<p>Absolute value</p>\n\n<p>Produces the absolute value of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produes</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Sources</h4>\n\n<p><code>hoon\n++  abs\n  |=  [a=fn]  ^-  fn\n  ?:  ?=([%f *] a)  [%f &amp; e.a a.a]\n  ?:  ?=([%i *] a)  [%i &amp;]  [%n ~]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(abs:fl [%f | --0 106])\n  [%f s=%.y e=--0 a=106]</p>\n</blockquote>\n\n<blockquote>\n  <p>(abs:fl [%f &amp; --0 106])\n  [%f s=%.y e=--0 a=106]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++add:fl</code></h3>\n\n<p>Add</p>\n\n<p>Produces the sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  |(?=([%i *] a) ?=([%i *] b))\n    ?:  &amp;(?=([%i *] a) ?=([%i *] b))\n      ?:  =(a b)  a  [%n ~]\n    ?:  ?=([%i *] a)  a  b\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?.  &amp;(=(a.a 0) =(a.b 0))  %-  rou  ?~(a.a b a)\n    [%f ?:(=(r %d) &amp;(s.a s.b) |(s.a s.b)) zer]\n  %-  |=  [a=fn]\n      ?.  ?=([%f *] a)  a\n      ?.  =(a.a 0)  a\n      [%f !=(r %d) zer]\n  ?:  =(s.a s.b)\n    ?:  s.a  (^add +&gt;.a +&gt;.b |)\n    =.(r swr (fli (^add +&gt;.a +&gt;.b |)))\n  ?:  s.a  (^sub +&gt;.a +&gt;.b |)\n  (^sub +&gt;.b +&gt;.a |)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add:fl [%f &amp; --0 106] [%f | --3 55])\n  [%f s=%.n e=-104 a=6.774.324.807.619.657.921.598.381.929.529.344]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ead:fl</code></h3>\n\n<p>Exact add</p>\n\n<p>Produces the exact sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ead\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  |(?=([%i *] a) ?=([%i *] b))\n    ?:  &amp;(?=([%i *] a) ?=([%i *] b))\n      ?:  =(a b)  a  [%n ~]\n    ?:  ?=([%i *] a)  a  b\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?.  &amp;(=(a.a 0) =(a.b 0))  ?~(a.a b a)\n    [%f ?:(=(r %d) &amp;(s.a s.b) |(s.a s.b)) zer]\n  %-  |=  [a=fn]\n      ?.  ?=([%f *] a)  a\n      ?.  =(a.a 0)  a\n      [%f !=(r %d) zer]\n  ?:  =(s.a s.b)\n    ?:  s.a  (^add +&gt;.a +&gt;.b &amp;)\n    (fli (^add +&gt;.a +&gt;.b &amp;))\n  ?:  s.a  (^sub +&gt;.a +&gt;.b &amp;)\n  (^sub +&gt;.b +&gt;.a &amp;)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ead:fl [%f &amp; --0 106] [%f | --3 55])\n  [%f s=%.n e=--0 a=334]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sub:fl</code></h3>\n\n<p>Subtract</p>\n\n<p>Produces the difference of <code>a</code> minus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub\n  |=  [a=fn b=fn]  ^-  fn  (add a (fli b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub:fl [%f &amp; --13 2.718] [%f &amp; --23 11])\n  [%f s=%.n e=-86 a=5.416.671.014.775.224.232.595.412.796.571.648]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mul:fl</code></h3>\n\n<p>Multiply</p>\n\n<p>Produces the product of <code>a</code> multiplied by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mul\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  ?=([%i *] a)\n    ?:  ?=([%i *] b)\n      [%i =(s.a s.b)]\n    ?:  =(a.b 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  ?=([%i *] b)\n    ?:  =(a.a 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  |(=(a.a 0) =(a.b 0))  [%f =(s.a s.b) zer]\n  ?:  =(s.a s.b)  (^mul +&gt;.a +&gt;.b)\n  =.(r swr (fli (^mul +&gt;.a +&gt;.b)))\n</code></p>\n\n<hr />\n\n<h3><code>++emu:fl</code></h3>\n\n<p>Exact multiply</p>\n\n<p>Produces the exact product of <code>a</code> multiplied by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Examples</h4>\n\n<p><code>hoon\n++  emu\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  ?=([%i *] a)\n    ?:  ?=([%i *] b)\n      [%i =(s.a s.b)]\n    ?:  =(a.b 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  ?=([%i *] b)\n    ?:  =(a.a 0)  [%n ~]  [%i =(s.a s.b)]\n  ?:  |(=(a.a 0) =(a.b 0))  [%f =(s.a s.b) zer]\n  [%f =(s.a s.b) (sum:si e.a e.b) (^^mul a.a a.b)]\n</code></p>\n\n<hr />\n\n<h3><code>++div:fl</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the quotient of <code>a</code> divided by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div\n  |=  [a=fn b=fn]  ^-  fn\n  ?:  |(?=([%n *] a) ?=([%n *] b))  [%n ~]\n  ?:  ?=([%i *] a)\n    ?:  ?=([%i *] b)  [%n ~]  [%i =(s.a s.b)]\n  ?:  ?=([%i *] b)  [%f =(s.a s.b) zer]\n  ?:  =(a.a 0)  ?:  =(a.b 0)  [%n ~]  [%f =(s.a s.b) zer]\n  ?:  =(a.b 0)  [%i =(s.a s.b)]\n  ?:  =(s.a s.b)  (^div +&gt;.a +&gt;.b)\n  =.(r swr (fli (^div +&gt;.a +&gt;.b)))\n</code></p>\n\n<hr />\n\n<h3><code>++fma:fl</code></h3>\n\n<p>Fused multiply-add</p>\n\n<p>Produces the sum of <code>c</code> plus the product of <code>a</code> multiplied by <code>b</code>;\n<code>(a * b) + c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<p><code>c</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fma\n  |=  [a=fn b=fn c=fn]  ^-  fn\n  (add (emu a b) c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fma:fl [%f &amp; --13 2.718] [%f &amp; --23 11] [%f &amp; --13 2.718])\n  [%f s=%.y e=-62 a=9.475.054.514.089.037.465.004.673.635.188.736]=\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sqt:fl</code></h3>\n\n<p>Square root</p>\n\n<p>Produces the square root of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt\n  |=  [a=fn]  ^-  fn\n  ?:  ?=([%n *] a)  [%n ~]\n  ?:  ?=([%i *] a)  ?:(s.a a [%n ~])\n  ?~  a.a  [%f s.a zer]\n  ?:  s.a  (^sqt +&gt;.a)  [%n ~]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sqt:fl [%f s=%.y e=-18 a=342.602.577])\n  [%f s=%.y e=-107 a=5.865.903.143.604.945.574.132.671.852.050.553]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++inv:fl</code></h3>\n\n<p>Inverse</p>\n\n<p>Produces the inverse of <code>a</code> by dividing <code>1</code> by <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  inv\n  |=  [a=fn]  ^-  fn\n  (div [%f &amp; --0 1] a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(inv:fl [%f s=%.y e=--0 a=10])\n  [%f s=%.y e=-116 a=8.307.674.973.655.724.205.648.794.126.752.154]\n  (drg:fl [%f s=%.y e=-116 a=8.307.674.973.655.724.205.648.794.126.752.154])\n  [%d s=%.y e=-1 a=1]</p>\n</blockquote>\n\n<blockquote>\n  <p>(inv:fl [%f s=%.y e=--1 a=10])\n  [%f s=%.y e=-117 a=8.307.674.973.655.724.205.648.794.126.752.154]\n  (drg:fl [%f s=%.y e=-117 a=8.307.674.973.655.724.205.648.794.126.752.154])\n  [%d s=%.y e=-2 a=5]</p>\n</blockquote>\n\n<blockquote>\n  <p>(inv:fl [%f s=%.y e=--2 a=10])\n  [%f s=%.y e=-118 a=8.307.674.973.655.724.205.648.794.126.752.154]\n  (drg:fl [%f s=%.y e=-118 a=8.307.674.973.655.724.205.648.794.126.752.154])\n  [%d s=%.y e=-3 a=25]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sun:fl</code></h3>\n\n<p>Unsigned integer to float</p>\n\n<p>Produces <code>a</code> in floating-point representation.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sun\n  |=  [a=@u]  ^-  fn\n  (rou [%f &amp; --0 a])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:fl 0)\n  [%f s=%.y e=--0 a=0]</p>\n</blockquote>\n\n<blockquote>\n  <p>(sun:fl 5.048.729)\n  [%f s=%.y e=-90 a=6.250.023.776.601.238.669.911.180.544.311.296]</p>\n</blockquote>\n\n<blockquote>\n  <p>(sun:fl -100)\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++san:fl</code></h3>\n\n<p>Signed integer to float</p>\n\n<p>Produces the floating-point representation of <code>a</code>, a signed integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  san\n  |=  [a=@s]  ^-  fn\n  =+  b=(old:si a)\n  (rou [%f -.b --0 +.b])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(san:fl --100)\n  [%f s=%.y e=-106 a=8.112.963.841.460.668.169.578.900.514.406.400]</p>\n</blockquote>\n\n<blockquote>\n  <p>(san:fl -100)\n  [%f s=%.n e=-106 a=8.112.963.841.460.668.169.578.900.514.406.400]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lth:fl</code></h3>\n\n<p>Less than</p>\n\n<p>Tests if <code>a</code> is less than <code>b</code>. Returns <code>~</code> in the event of <code>a</code> or <code>b</code> being a\nNaN (<code>[%n ~]</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth\n  |=  [a=fn b=fn]  ^-  (unit ?)\n  ?:  |(?=([%n *] a) ?=([%n *] b))  ~  :-  ~\n  ?:  =(a b)  |\n  ?:  ?=([%i *] a)  !s.a  ?:  ?=([%i *] b)  s.b\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?:  &amp;(=(a.a 0) =(a.b 0))  |\n    ?:  =(a.a 0)  s.b  !s.a\n  ?:  !=(s.a s.b)  s.b\n  ?:  s.a  (^lth +&gt;.a +&gt;.b)  (^lth +&gt;.b +&gt;.a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth:fl (sun:fl 116) (sun:fl 4.820))\n  [~ u=%.y]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:fl (sun:fl 218.116) (sun:fl 4.820))\n  [~ u=%.n]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:fl (sun:fl 218.116) [%n ~])\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lte:fl</code></h3>\n\n<p>Less than or equal</p>\n\n<p>Tests whether <code>a</code> is less than or equal to <code>b</code>. Returns <code>~</code> in the event of <code>a</code>\nor <code>b</code> being a NaN (<code>[%n ~]</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lte\n  |=  [a=fn b=fn]  ^-  (unit ?)\n  %+  bind  (lth b a)  |=  a=?  !a\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte:fl (sun:fl 102) [%f %.y -5 973.655.724])\n  [~ u=%.y]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:fl (sun:fl 102) [%f %.y -24 973.655.724])\n  [~ u=%.n]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:fl [%f %.y --2 25] (sun:fl 100))\n  [~ u=%.y]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:fl [%f %.y --2 25] [%f %.y --3 2])\n  [~ u=%.n]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:fl [%f %.y --2 25] [%n ~])\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++equ:fl</code></h3>\n\n<p>Equals</p>\n\n<p>Tests if <code>a</code> is equal to <code>b</code>. Returns <code>~</code> in the event of <code>a</code> or <code>b</code> being a NaN\n(<code>[%n ~]</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>unit</code> of <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  equ\n  |=  [a=fn b=fn]  ^-  (unit ?)\n  ?:  |(?=([%n *] a) ?=([%n *] b))  ~  :-  ~\n  ?:  =(a b)  &amp;\n  ?:  |(?=([%i *] a) ?=([%i *] b))  |\n  ?:  |(=(a.a 0) =(a.b 0))\n    ?:  &amp;(=(a.a 0) =(a.b 0))  &amp;  |\n  ?:  |(=(e.a e.b) !=(s.a s.b))  |\n  (^equ +&gt;.a +&gt;.b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(equ:fl [%f %.y --2 25] (sun:fl 100))\n  [~ u=%.y]</p>\n</blockquote>\n\n<blockquote>\n  <p>(equ:fl [%f %.y --2 25] (sun:fl 101))\n  [~ u=%.n]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gte:fl</code></h3>\n\n<p>Greater or equal than</p>\n\n<p>Tests whether <code>a</code> is greater than or equal to <code>b</code>. Returns <code>~</code> in the event of\n<code>a</code> or <code>b</code> being a NaN (<code>[%n ~]</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>unit</code> of <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gte\n  |=  [a=fn b=fn]  ^-  (unit ?)  (lte b a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte:fl [%f %.y --2 25] (sun:fl 100))\n  [~ u=%.y]</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:fl [%f %.y --6 73.989] [%f %.y --5 919.599])\n  [~ u=%.n]</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:fl [%f %.y --6 73.989] [%n ~])\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gth:fl</code></h3>\n\n<p>Greater than</p>\n\n<p>Tests whether <code>a</code> is greater than <code>b</code>. Returns <code>~</code> in the event of <code>a</code> or <code>b</code>\nbeing a NaN (<code>[%n ~]</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<p><code>b</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>unit</code> of <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gth\n  |=  [a=fn b=fn]  ^-  (unit ?)  (lth b a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth:fl [%f %.y --2 25] (sun:fl 100))\n  [~ u=%.n]</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:fl [%f %.y --6 73.989] [%f %.y --5 119.599])\n  [~ u=%.y]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++drg:fl</code></h3>\n\n<p>Float to decimal</p>\n\n<p>Produces the decimal form of <code>a</code> using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drg\n  |=  [a=fn]  ^-  dn\n  ?:  ?=([%n *] a)  [%n ~]\n  ?:  ?=([%i *] a)  [%i s.a]\n  ?~  a.a  [%d s.a --0 0]\n  [%d s.a (^drg +&gt;.a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(drg:fl [%f | --6 73.989])\n  [%d s=%.n e=--0 a=4.735.296]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++grd:fl</code></h3>\n\n<p>Decimal to float</p>\n\n<p>Converts decimal <code>a</code> to <code>fn</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  grd\n  |=  [a=dn]  ^-  fn\n  ?:  ?=([%n *] a)  [%n ~]\n  ?:  ?=([%i *] a)  [%i s.a]\n  =&gt;  .(r %n)\n  =+  q=(abs:si e.a)\n  ?:  (syn:si e.a)\n    (mul [%f s.a --0 a.a] [%f &amp; e.a (pow 5 q)])\n  (div [%f s.a --0 a.a] [%f &amp; (sun:si q) (pow 5 q)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(grd:fl [%d s=%.n e=--0 a=73.989])\n  [%f s=%.n e=-96 a=5.862.012.516.267.904.074.208.723.341.410.304]</p>\n</blockquote>\n\n<blockquote>\n  <p>(grd:fl [%d s=%.n e=--0 a=100])\n  [%f s=%.n e=-106 a=8.112.963.841.460.668.169.578.900.514.406.400]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++toi:fl</code></h3>\n\n<p>Round to signed integer</p>\n\n<p>Rounds <code>a</code> to the nearest signed integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toi\n  |=  [a=fn]  ^-  (unit @s)\n  =+  b=(toj a)\n  ?.  ?=([%f *] b)  ~  :-  ~\n  =+  c=(^^mul (bex (abs:si e.b)) a.b)\n  (new:si s.b c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(toi:fl [%f s=%.y e=-78 a=8.112.963.841.460.668.169.578.900.514.406.400])\n  [~ u=--26.843.545.600]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++toj:fl</code></h3>\n\n<p>Round to integer fn</p>\n\n<p>Rounds <code>a</code> to the nearest decimal integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toj\n  |=  [a=fn]  ^-  fn\n  ?.  ?=([%f *] a)  a\n  ?~  a.a  [%f s.a zer]\n  ?:  s.a  (^toj +&gt;.a)\n  =.(r swr (fli (^toj +&gt;.a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(toj:fl [%f s=%.y e=-78 a=8.112.963.841.460.668.169.578.900.514.406.400])\n  [%f s=%.y e=--0 a=26.843.545.600]</p>\n</blockquote>\n\n<blockquote>\n  <p>(toj:fl [%f s=%.y e=-78 a=8.112.963.841.460.668.169.578.900.514])\n  [%f s=%.y e=--0 a=26.844]</p>\n</blockquote>\n\n<blockquote>\n  <p>(toj:fl [%f s=%.y e=-78 a=8.112.963.841.460])\n  [%f s=%.y e=--0 a=0]</p>\n</blockquote>\n\n<blockquote>\n  <p>(toj:fl [%f s=%.y e=-9 a=9.002])\n  [%f s=%.y e=--0 a=16]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fl"
        ]
    },
    {
        "doc": "<h2><code>++ff</code></h2>\n\n<p>IEEE-754 Formatting</p>\n\n<p>Container core for IEEE-754 formatting operations.</p>\n\n<ul>\n<li><code>w</code> is width: The number of bits in the exponent field.</li>\n<li><code>p</code> is precision: The number of bits in the significand field.</li>\n<li><code>w</code> is bias: Added to exponent when storing.</li>\n<li><code>r</code> is rounding mode: Possible modes are nearest (<code>%n</code>), up (<code>%u</code>),\ndown (<code>%d</code>), to zero (<code>%z</code>), and away from zero (<code>%a</code>). Default value is <code>%a</code>.</li>\n</ul>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ff\n  |_  [[w=@u p=@u b=@s] r=$?(%n %u %d %z %a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=ffcore ~(. ff [8 8 0] %n)\n  ffcore\n  &lt;24.ull [[[@ud @ud @ud] r=%n] &lt;51.qbt 123.ppa 46.hgz 1.pnw %140>]&gt;\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h4>Discussion</h4>\n\n<p><code>++ff</code> has no use outside of the functionality provided to other cores: <code>++rd</code>,\n<code>++rs</code>, <code>++rq</code>, and <code>++rh</code>. It's not intended to be used directly; it's just\nmeant to power those cores.</p>\n\n<hr />\n\n<h3><code>++sb:ff</code></h3>\n\n<p>Sign bit</p>\n\n<p>Produces the sign bit of <code>++ff</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sb  (bex (^add w p))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>sb:ff\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++me:ff</code></h3>\n\n<p>Minimum exponent</p>\n\n<p>Produces the minimum possible exponent of <code>ff</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  me  (dif:si (dif:si --1 b) (sun:si p))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>me:ff\n  --1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++pa:ff</code></h3>\n\n<p>Initialize <code>fl</code></p>\n\n<p>Instantiates the core <code>fl</code>, giving values to its samples based on the\nconfiguration of the <code>ff</code> core.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pa\n  %*(. fl p +(p), v me, w (^sub (bex w) 3), d %d, r r)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(pa ff [11 52 --1.023] %n)\n  &lt; 23.qzd\n    28.btz\n    { {{p/@ v/@s w/@} r/?($n $u $a $d $z) d/$d}\n      &lt;54.tyv 119.wim 31.ohr 1.jmk $143>\n    }</p>\n  \n  <p>```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>++pa</code> exists exclusively for internal use of <code>++ff</code>, and <code>++ff</code> exists for\ninternal use in other cores.</p>\n\n<hr />\n\n<h3><code>++sea:ff</code></h3>\n\n<p><code>@r</code> to <code>fn</code></p>\n\n<p>Converts <code>a</code> from <code>@r</code> to <code>fn</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sea\n  |=  [a=@r]  ^-  fn\n  =+  [f=(cut 0 [0 p] a) e=(cut 0 [p w] a)]\n  =+  s=(sig a)\n  ?:  =(e 0)\n    ?:  =(f 0)  [%f s --0 0]  [%f s me f]\n  ?:  =(e (fil 0 w 1))\n    ?:  =(f 0)  [%i s]  [%n ~]\n  =+  q=:(sum:si (sun:si e) me -1)\n  =+  r=(^add f (bex p))\n  [%f s q r]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sea:ff <code>@r</code>0x8)\n  [%f s=%.y e=--0 a=0]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bit:ff</code></h3>\n\n<p><code>fn</code> to <code>@r</code>, rounding</p>\n\n<p>Converts <code>a</code> from <code>fn</code> to <code>@r</code> and applies rounding.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bit  |=  [a=fn]  (bif (rou:pa a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bit:ma:rd [%f | -6 202])\n  0xc009400000000000\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bif:ff</code></h3>\n\n<p><code>fn</code> to <code>@r</code>, no rounding</p>\n\n<p>Converts <code>a</code> from <code>fn</code> to <code>@r</code>. No rounding is applied.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bif\n  |=  [a=fn]  ^-  @r\n  ?:  ?=([%i *] a)\n    =+  q=(lsh [0 p] (fil 0 w 1))\n    ?:  s.a  q  (^add q sb)\n  ?:  ?=([%n *] a)  (lsh [0 (dec p)] (fil 0 +(w) 1))\n  ?~  a.a  ?:  s.a  `@r`0  sb\n  =+  ma=(met 0 a.a)\n  ?.  =(ma +(p))\n    ?&gt;  =(e.a me)\n    ?&gt;  (^lth ma +(p))\n    ?:  s.a  `@r`a.a  (^add a.a sb)\n  =+  q=(sum:si (dif:si e.a me) --1)\n  =+  r=(^add (lsh [0 p] (abs:si q)) (end [0 p] a.a))\n  ?:  s.a  r  (^add r sb)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bif:ma:rd *fn)\n  0x7ff8000000000000\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sig:ff</code></h3>\n\n<p>Get sign</p>\n\n<p>Produces the sign of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sig\n  |=  [a=@r]  ^-  ?\n  =(0 (cut 0 [(^add p w) 1] a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sig:ff <code>@r</code>5)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++exp:ff</code></h3>\n\n<p>Get exponent</p>\n\n<p>Produces the exponent of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  exp\n  |=  [a=@r]  ^-  @s\n  (dif:si (sun:si (cut 0 [p w] a)) b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(exp:ff <code>@r</code>5)\n  --0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++add:ff</code></h3>\n\n<p>Add</p>\n\n<p>Produces the sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add\n  |=  [a=@r b=@r]\n  (bif (add:pa (sea a) (sea b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add:ma:rd <code>@r</code>5 <code>@r</code>11)\n  0x10\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sub:ff</code></h3>\n\n<p>Sub</p>\n\n<p>Produces the sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub\n  |=  [a=@r b=@r]\n  (bif (sub:pa (sea a) (sea b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub:ma:rd <code>@r</code>5 <code>@r</code>11)\n  0x8000000000000006\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mul:ff</code></h3>\n\n<p>Multiply</p>\n\n<p>Produces the product of <code>a</code> multiplied by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Multiply</h4>\n\n<p><code>hoon\n++  mul\n  |=  [a=@r b=@r]\n  (bif (mul:pa (sea a) (sea b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mul:ma:rd <code>@r</code>11 <code>@r</code>2)\n  0x0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++div:ff</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the quotient of <code>a</code> divided by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div\n  |=  [a=@r b=@r]\n  (bif (div:pa (sea a) (sea b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div:ma:rd <code>@r</code>175 <code>@r</code>26)\n  0x401aec4ec4ec4ec4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fma:ff</code></h3>\n\n<p>Fused multiply-add</p>\n\n<p>Produces the sum of <code>c</code> plus the product of <code>a</code> multiplied by <code>b</code>;\n<code>(a * b) + c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>c</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fma\n  |=  [a=@r b=@r c=@r]\n  (bif (fma:pa (sea a) (sea b) (sea c)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fma:ma:rd <code>@r</code>175 <code>@r</code>26 <code>@r</code>100)\n  0x64\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sqt:ff</code></h3>\n\n<p>Square root</p>\n\n<p>Produces the square root of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt\n  |=  [a=@r]\n  (bif (sqt:pa (sea a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sqt:ma:rd <code>@r</code>175)\n  0x1e9a751f9447b724\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lth:ff</code></h3>\n\n<p>Less than</p>\n\n<p>Tests whether <code>a</code> is less than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth\n  |=  [a=@r b=@r]  (fall (lth:pa (sea a) (sea b)) |)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth:ma:rd <code>@rd</code>1 <code>@rd</code>2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:ma:rd <code>@rd</code>10 <code>@rd</code>2)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lte:ff</code></h3>\n\n<p>Less than or equal to</p>\n\n<p>Tests whether <code>a</code> is less than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lte\n  |=  [a=@r b=@r]  (fall (lte:pa (sea a) (sea b)) |)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte:ma:rd <code>@rd</code>10 <code>@rd</code>2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:ma:rd <code>@rd</code>10 <code>@rd</code>10)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++equ:ff</code></h3>\n\n<p>Equals</p>\n\n<p>Tests whether <code>a</code> is equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  equ\n  |=  [a=@r b=@r]  (fall (equ:pa (sea a) (sea b)) |)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(equ:ma:rd <code>@rd</code>10 <code>@rd</code>2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(equ:ma:rd <code>@rd</code>10 <code>@rd</code>10)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gte:ff</code></h3>\n\n<p>Greater or equal than</p>\n\n<p>Tests whether <code>a</code> is greater than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gte\n  |=  [a=@r b=@r]  (fall (gte:pa (sea a) (sea b)) |)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte:ma:rd <code>@rd</code>10 <code>@rd</code>10)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:ma:rd <code>@rd</code>10 <code>@rd</code>11)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gth:ff</code></h3>\n\n<p>Greater than</p>\n\n<p>Tests whether <code>a</code> is greater than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gth\n  |=  [a=@r b=@r]  (fall (gth:pa (sea a) (sea b)) |)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth:ma:rd <code>@rd</code>10 <code>@rd</code>10)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:ma:rd <code>@rd</code>10 <code>@rd</code>9)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sun:ff</code></h3>\n\n<p>Unsigned integer to <code>@r</code></p>\n\n<p>Converts <code>a</code> from an unsigned integer (<code>@u</code>) to <code>@r</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is <code>@u</code>, unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sun\n  |=  [a=@u]  (bit [%f &amp; --0 a])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:ma:rd 658.149.282)\n  0x41c39d47d1000000\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++san:ff</code></h3>\n\n<p>Signed integer to <code>@r</code></p>\n\n<p>Converts <code>a</code> from a signed integer to <code>@r</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is <code>@s</code>, a signed integer</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  san\n  |=  [a=@s]  (bit [%f (syn:si a) --0 (abs:si a)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(san:ma:rd --10)\n  0x4024000000000000\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++toi:ff</code></h3>\n\n<p>Round to integer</p>\n\n<p>Rounds <code>a</code> to the nearest signed integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toi\n  |=  [a=@r]  (toi:pa (sea a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(toi:ma:rd <code>@r</code>0x4af)\n  [~ u=--0]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++drg:ff</code></h3>\n\n<p><code>@r</code> to decimal float</p>\n\n<p>Converts <code>a</code> from <code>@r</code> to <code>dn</code> using the Dragon4 algorithm.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@r</code>, an IEEE float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drg\n  |=  [a=@r]  (drg:pa (sea a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(drg:ma:rd <code>@r</code>0x41c0)\n  [%d s=%.y e=-323 a=8.316]</p>\n</blockquote>\n\n<blockquote>\n  <p>(drg:ma:rd (sun:ma:rd 658.149.282))\n  [%d s=%.y e=--0 a=658.149.282]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++grd:ff</code></h3>\n\n<p>Decimal float to <code>@r</code></p>\n\n<p>Converts <code>a</code> from <code>dn</code> to <code>@r</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@r</code>, an IEEE float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  grd\n  |=  [a=dn]  (bif (grd:pa a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(grd:ma:rd [%d s=%.y e=--0 a=658.149.282])\n  0x41c39d47d1000000\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ff"
        ]
    },
    {
        "doc": "<h2><code>++rlyd</code></h2>\n\n<p>Prep <code>@rd</code> for print</p>\n\n<p>Converts <code>a</code> from a double-precision binary float to decimal64.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rlyd  |=  a=@rd  ^-  dn  (drg:rd a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rlyd .~2.4703e-320)\n  [%d s=%.y e=-324 a=24.703]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rlyd"
        ]
    },
    {
        "doc": "<h2><code>++rlys</code></h2>\n\n<p>Prep @rs for print</p>\n\n<p>Converts <code>a</code> from a single-precision binary float to decimal32.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rlys  |=  a=@rs  ^-  dn  (drg:rs a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rlys .1.681557e-39)\n  [%d s=%.y e=-45 a=1.681.557]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rlys"
        ]
    },
    {
        "doc": "<h2><code>++rlyh</code></h2>\n\n<p>Prep <code>@rh</code> for print</p>\n\n<p>Converts <code>a</code> from a half-precision binary float to decimal16.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rlyh  |=  a=@rh  ^-  dn  (drg:rh a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rlyh .~~3e1)\n  [%d s=%.y e=--1 a=3]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rlyh"
        ]
    },
    {
        "doc": "<h2><code>++rlyq</code></h2>\n\n<p>Prep <code>@rq</code> for print</p>\n\n<p>Converts <code>a</code> from a quad-precision binary float to decimal128.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rlyq  |=  a=@rq  ^-  dn  (drg:rq a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rlyq .~~~2.2628017865927756787440310766086816e-4343)\n  [%d s=%.y e=-4.377 a=22.628.017.865.927.756.787.440.310.766.086.816]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rlyq"
        ]
    },
    {
        "doc": "<h2><code>++ryld</code></h2>\n\n<p>Finish parsing <code>@rd</code></p>\n\n<p>Converts <code>a</code> from a decimal float to a double-precision binary float.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ryld  |=  a=dn  ^-  @rd  (grd:rd a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ryld [%d s=%.y e=-324 a=24.703])\n  .~2.4703e-320\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ryld"
        ]
    },
    {
        "doc": "<h2><code>++ryls</code></h2>\n\n<p>Finish parsing <code>@rs</code></p>\n\n<p>Converts <code>a</code> from a decimal float to a single-precision binary float.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A a <code>@rs</code>, a single-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ryls  |=  a=dn  ^-  @rs  (grd:rs a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ryls [%d s=%.y e=-324 a=24.703])\n  .0</p>\n</blockquote>\n\n<blockquote>\n  <p>(ryls [%d s=%.y e=-32 a=24.703])\n  .2.4703e-28\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ryls"
        ]
    },
    {
        "doc": "<h2><code>++rylh</code></h2>\n\n<p>Finish parsing <code>@rh</code></p>\n\n<p>Converts <code>a</code> from a decimal float to a half-precision binary float.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rylh  |=  a=dn  ^-  @rh  (grd:rh a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rylh [%d s=%.y e=--1 a=703])\n  .~~7.032e3</p>\n</blockquote>\n\n<blockquote>\n  <p>(rylh [%d s=%.y e=--3 a=56])\n  .~~5.6e4</p>\n</blockquote>\n\n<blockquote>\n  <p>(rylh [%d s=%.y e=--4 a=56])\n  .~~inf\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rylh"
        ]
    },
    {
        "doc": "<h2><code>++rylq</code></h2>\n\n<p>Finish parsing <code>@rq</code></p>\n\n<p>Converts <code>a</code> from a decimal float to a quad-precision binary float.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rylq  |=  a=dn  ^-  @rq  (grd:rq a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rylq [%d s=%.y e=-324 a=24.703])\n  .~~~2.4703e-320\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rylq"
        ]
    },
    {
        "doc": "<h2><code>++rd</code></h2>\n\n<p>Double-precision fp</p>\n\n<p>A container core for operations related to double-precision binary floats.</p>\n\n<p><code>++rd</code> has four rounding modes: round to nearest (<code>%n</code>), round up (<code>%u</code>), round\ndown (<code>%d</code>), and round to zero (<code>%z</code>). The default rounding mode is <code>%z</code>. If\nyou need a different rounding mode, you'd do something like <code>=/  rd-n  ~(. rd\n%n)</code> and then call the arms of your modified version instead.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rd\n  ^|\n  ~%  %rd  +&gt;  ~\n  |_  r=$?(%n %u %d %z)\n</code></p>\n\n<hr />\n\n<h3><code>++ma:rd</code></h3>\n\n<p>Initialize <code>ff</code></p>\n\n<p>Instantiates the core <code>ff</code>, giving values to its samples based on the\nconfiguration of the <code>rd</code> core. <strong>This arm is used internally by <code>++rd</code>, you\nwould not normally call this directly.</strong></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ma\n  %*(. ff w 11, p 52, b --1.023, r r)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ma rd %n)\n  &lt; 24.ltg\n    {{{w/@ud p/@ud b/@sd} r/?($n $u $d $z)} &lt;54.tyv 119.wim 31.ohr 1.jmk $143>}</p>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sea:rd</code></h3>\n\n<p><code>@rd</code> to <code>fn</code></p>\n\n<p>Converts <code>a</code> from a double-precision binary float to <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sea\n  |=  [a=@rd]  (sea:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sea:rd .~4.94066e-319)\n  [%f s=%.y e=-1.074 a=100.000]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bit:rd</code></h3>\n\n<p><code>fn</code> to <code>@rd</code></p>\n\n<p>Converts <code>a</code> from <code>fn</code> to a double-precision binary float.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>, a double-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bit\n  |=  [a=fn]  ^-  @rd  (bit:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bit:rd [%f s=%.y e=-1.074 a=100.000])\n  .~4.94066e-319\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++add:rd</code></h3>\n\n<p>Add</p>\n\n<p>Produces the sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add  ~/  %add\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (add:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add:rd .~3.94066e12 .~9.2846e11)\n  .~4.86912e12\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sub:rd</code></h3>\n\n<p>Subtract</p>\n\n<p>Produces the difference of <code>a</code> minus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub  ~/  %sub\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (sub:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub:rd .~7.94069e2 .~1.2846e3)\n  .~-4.9053099999999995e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mul:rd</code></h3>\n\n<p>Multiply</p>\n\n<p>Produces the product of <code>a</code> times <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mul  ~/  %mul\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (mul:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mul:rd .~7.94069e2 .~1.2246e3)\n  .~9.724168973999998e5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++div:rd</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the quotient of <code>a</code> divided by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div  ~/  %div\n  |=  [a=@rd b=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (div:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div:rd .~7.94099e2 .~1.2246e3)\n  .~6.484558223093255e-1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fma:rd</code></h3>\n\n<p>Fused multiply-add</p>\n\n<p>Produces the sum of <code>c</code> plus the product of <code>a</code> multiplied by <code>b</code>;\n<code>(a * b) + c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, an IEEE float.</p>\n\n<p><code>b</code> is a <code>@rd</code>.</p>\n\n<p><code>c</code> is a <code>@rd</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fma  ~/  %fma\n  |=  [a=@rd b=@rd c=@rd]  ^-  @rd\n  ~_  leaf+\"rd-fail\"\n  (fma:ma a b c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fma:rd .~7.94099e2 .~1.2246e3 .~3.94066e3)\n  .~9.763942954e5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sqt:rd</code></h3>\n\n<p>Square root</p>\n\n<p>Produces the square root of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rd]  ^-  @rd  ~_  leaf+\"rd-fail\"\n  (sqt:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sqt:rd .~3.94066e3)\n  .~6.2774676422901614e1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lth:rd</code></h3>\n\n<p>Less than</p>\n\n<p>Test whether <code>a</code> is less than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth  ~/  %lth\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (lth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth:rd .~7.94099e2 .~1.2246e3)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:rd .~7.94099e2 .~1.2246e2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:rd .~1.2246e2 .~1.2246e2)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lte:rd</code></h3>\n\n<p>Less than or equal</p>\n\n<p>Test whether <code>a</code> is less than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lte  ~/  %lte\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (lte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte:rd .~7.94099e2 .~1.2246e3)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:rd .~7.94099e2 .~1.2246e2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:rd .~1.2246e2 .~1.2246e2)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++equ:rd</code></h3>\n\n<p>Equals</p>\n\n<p>Test whether <code>a</code> is equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  equ  ~/  %equ\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (equ:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(equ:rd .~7.94099e2 .~1.2246e3)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(equ:rd .~7.94099e2 .~1.2246e2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(equ:rd .~1.2246e2 .~1.2246e2)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gte:rd</code></h3>\n\n<p>Greater than or equal</p>\n\n<p>Test whether <code>a</code> is greater than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gte  ~/  %gte\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (gte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte:rd .~7.94099e2 .~1.2246e3)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:rd .~7.94099e2 .~1.2246e2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:rd .~1.2246e2 .~1.2246e2)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gth:rd</code></h3>\n\n<p>Greater than</p>\n\n<p>Test whether <code>a</code> is greater <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<p><code>b</code> is a <code>@rd</code>, a double-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gth  ~/  %gth\n  |=  [a=@rd b=@rd]\n  ~_  leaf+\"rd-fail\"\n  (gth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth:rd .~7.94099e2 .~1.2246e3)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rd .~7.94099e2 .~1.2246e2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rd .~1.2246e2 .~1.2246e2)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sun:rd</code></h3>\n\n<p>Unsigned integer to <code>@rd</code></p>\n\n<p>Converts an unsigned integer <code>a</code> to <code>@rd</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@u</code>, an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sun  |=  [a=@u]  ^-  @rd  (sun:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:rd 511)\n  .~5.11e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++san:rd</code></h3>\n\n<p>Signed integer to <code>@rd</code></p>\n\n<p>Converts a signed integer <code>a</code> to <code>@rd</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@s</code>, a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  san  |=  [a=@s]  ^-  @rd  (san:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(san:rd -511)\n  .~-5.11e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sig:rd</code></h3>\n\n<p>Get sign</p>\n\n<p>Produces the sign of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sig  |=  [a=@rd]  ^-  ?  (sig:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sig:rd .~1.2246e3)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++exp:rd</code></h3>\n\n<p>Get exponent</p>\n\n<p>Produces the exponent of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  exp  |=  [a=@rd]  ^-  @s  (exp:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(exp:rd .~1.2246e3)\n  --10\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++toi:rd</code></h3>\n\n<p>Round to integer</p>\n\n<p>Rounds <code>a</code> to the nearest integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toi  |=  [a=@rd]  ^-  (unit @s)  (toi:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(toi:rd .~1.2246e3)\n  [~ u=--1.224]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++drg:rd</code></h3>\n\n<p><code>@rd</code> to decimal float</p>\n\n<p>Produces the decimal form of <code>a</code> using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rd</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drg  |=  [a=@rd]  ^-  dn  (drg:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(drg:rd .~1.2246e3)\n  [%d s=%.y e=-1 a=12.246]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++grd:rd</code></h3>\n\n<p>Decimal float to <code>@rd</code></p>\n\n<p>Converts <code>a</code> from decimal float to <code>@rd</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@dn</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  grd  |=  [a=dn]  ^-  @rd  (grd:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(grd:rd [%d s=%.y e=-1 a=12.246])\n  .~1.2246e3\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rd"
        ]
    },
    {
        "doc": "<h2><code>++rs</code></h2>\n\n<p>Single-precision fp</p>\n\n<p>A container core for operations related to single-precision binary floats.</p>\n\n<p><code>++rs</code> has four rounding modes: round to nearest (<code>%n</code>), round up (<code>%u</code>), round\ndown (<code>%d</code>), and round to zero (<code>%z</code>). The default rounding mode is <code>%z</code>. If\nyou need a different rounding mode, you'd do something like <code>=/  rs-n  ~(. rs\n%n)</code> and then call the arms of your modified version instead.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rs\n  ~%  %rs  +&gt;  ~\n  ^|\n  |_  r=$?(%n %u %d %z)\n</code></p>\n\n<hr />\n\n<h3><code>++ma:rs</code></h3>\n\n<p>Initialize <code>ff</code></p>\n\n<p>Instantiates the core <code>ff</code>, giving values to its samples based on the\nconfiguration of the <code>rs</code> core. <strong>This arm is used internally by <code>++rs</code>, you\nwould not normally call this directly.</strong></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ma\n  %*(. ff w 8, p 23, b --127, r r)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ma rs %n)\n  &lt; 24.ltg\n    {{{w/@ud p/@ud b/@sd} r/?($n $u $d $z)} &lt;54.tyv 119.wim 31.ohr 1.jmk $143>}</p>\n  \n  <p>```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sea:rs</code></h3>\n\n<p><code>@rs</code> to <code>fn</code></p>\n\n<p>Converts <code>a</code> from <code>@rs</code> to <code>fn</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, an single-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sea\n  |=  [a=@rs]  (sea:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sea:rs .1.4e-43)\n  [%f s=%.y e=-149 a=100]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bit:rs</code></h3>\n\n<p><code>fn</code> to <code>@rs</code></p>\n\n<p>Converts <code>a</code> from <code>fn</code> to <code>@rs</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>, a single-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bit\n  |=  [a=fn]  ^-  @rs  (bit:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bit:rs [%f &amp; -2 1.000])\n  .2.5e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++add:rs</code></h3>\n\n<p>Add</p>\n\n<p>Produces the sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add  ~/  %add\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (add:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add:rs .2.5e1 .2.5e2)\n  .2.75e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sub:rs</code></h3>\n\n<p>Subtract</p>\n\n<p>Subtracts <code>a</code> from <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub  ~/  %sub\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (sub:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub:rs .2.5e1 .2.5e2)\n  .-2.25e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mul:rs</code></h3>\n\n<p>Multiply</p>\n\n<p>Produces the product of <code>a</code> multiplied by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mul  ~/  %mul\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (mul:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mul:rs .2.5e1 .2.5e2)\n  .6.25e3\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++div:rs</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the quotient of <code>a</code> divided by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div  ~/  %div\n  |=  [a=@rs b=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (div:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div:rs .4.5e1 .2.2e2)\n  .2.0454545e-1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fma:rs</code></h3>\n\n<p>Fused multiply-add</p>\n\n<p>Produces the sum of <code>c</code> plus the product of <code>a</code> multiplied by <code>b</code>;\n<code>(a * b) + c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<p><code>c</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fma  ~/  %fma\n  |=  [a=@rs b=@rs c=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (fma:ma a b c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fma:rs .2.5e1 .2.5e2 .8.2e1)\n  .6.332e3\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sqt:rs</code></h3>\n\n<p>Square root</p>\n\n<p>Produces the square root of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rs]  ^-  @rs\n  ~_  leaf+\"rs-fail\"\n  (sqt:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sqt:rs .2.5e2)\n  .1.5811388e1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lth:rs</code></h3>\n\n<p>Less than</p>\n\n<p>Test whether <code>a</code> is less than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth  ~/  %lth\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (lth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth:rs .9.9e1 .1.1e2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:rs .9.9e1 .9.9e1)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lte:rs</code></h3>\n\n<p>Less than or equal</p>\n\n<p>Test whether <code>a</code> is less than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lte  ~/  %lte\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (lte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte:rs .9.9e1 .1.1e2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:rs .9.9e1 .9.9e1)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++equ:rs</code></h3>\n\n<p>Equals</p>\n\n<p>Test whether <code>a</code> is equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  equ  ~/  %equ\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (equ:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(equ:rs .9.9e1 .1.1e2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(equ:rs .9.9e1 .9.9e1)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gte:rs</code></h3>\n\n<p>Greater than or equal</p>\n\n<p>Test whether <code>a</code> is greater than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gte  ~/  %gte\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (gte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte:rs .9.9e1 .9.9e1)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:rs .9.9e1 .9.2e2)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gth:rs</code></h3>\n\n<p>Greater than</p>\n\n<p>Test whether <code>a</code> is greater than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<p><code>b</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gth  ~/  %gth\n  |=  [a=@rs b=@rs]\n  ~_  leaf+\"rs-fail\"\n  (gth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth:rs .9.9e1 .9.2e2)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rs .9.9e1 .9.9e1)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rs .9.9e1 .1.9e1)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sun:rs</code></h3>\n\n<p>Unsigned integer to <code>@rs</code></p>\n\n<p>Converts <code>a</code> from an unsigned integer to <code>@rs</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sun  |=  [a=@u]  ^-  @rs  (sun:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:rs 343)\n  .3.43e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++san:rs</code></h3>\n\n<p>Signed integer to <code>@rs</code></p>\n\n<p>Converts <code>a</code> from a signed integer to <code>@rs</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  san  |=  [a=@s]  ^-  @rs  (san:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(san:rs -343)\n  .-3.43e2'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sig:rs</code></h3>\n\n<p>Get sign</p>\n\n<p>Produces the sign of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sig  |=  [a=@rs]  ^-  ?  (sig:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sig:rs .3.43e2)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(sig:rs .-3.43e2)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++exp:rs</code></h3>\n\n<p>Get exponent</p>\n\n<p>Produces the exponent of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  exp  |=  [a=@rs]  ^-  @s  (exp:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(exp:rs .-3.43e2)\n  --8\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++toi:rs</code></h3>\n\n<p>Round to integer</p>\n\n<p>Rounds <code>a</code> to the nearest integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toi  |=  [a=@rs]  ^-  (unit @s)  (toi:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(toi:rs .-3.43e2)\n  [~ u=-343]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++drg:rs</code></h3>\n\n<p><code>@rs</code> to decimal float</p>\n\n<p>Produces the decimal form of <code>a</code> using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drg  |=  [a=@rs]  ^-  dn  (drg:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(drg:rs .-3.43e2)\n  [%d s=%.n e=--0 a=343]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++grd:rs</code></h3>\n\n<p>Decimal float to <code>@rs</code></p>\n\n<p>Converts <code>a</code> from <code>dn</code> to <code>@rs</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  grd  |=  [a=dn]  ^-  @rs  (grd:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(grd:rs [%d s=%.n e=--0 a=343])\n  .-3.43e2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rs"
        ]
    },
    {
        "doc": "<h2><code>++rq</code></h2>\n\n<p>Quadruple-precision fp</p>\n\n<p>A container core for operations related to quadruple-precision binary floats.</p>\n\n<p><code>++rq</code> has four rounding modes: round to nearest (<code>%n</code>), round up (<code>%u</code>), round\ndown (<code>%d</code>), and round to zero (<code>%z</code>). The default rounding mode is <code>%z</code>. If\nyou need a different rounding mode, you'd do something like <code>=/  rq-n  ~(. rq\n%n)</code> and then call the arms of your modified version instead.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rq\n  ~%  %rq  +&gt;  ~\n  ^|\n  |_  r=$?(%n %u %d %z)\n</code></p>\n\n<h3><code>++ma:rq</code></h3>\n\n<p>Initialize <code>ff</code></p>\n\n<p>Instantiates the core <code>ff</code>, giving values to its samples based on the\nconfiguration of the <code>rq</code> core. <strong>This arm is used internally by <code>++rq</code>, you\nwould not normally call this directly.</strong></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ma\n  %*(. ff w 15, p 112, b --16.383, r r)\n</code></p>\n\n<hr />\n\n<h3><code>++sea:rq</code></h3>\n\n<p><code>@rq</code> to <code>fn</code></p>\n\n<p>Converts <code>a</code> from <code>@rq</code> to <code>fn</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sea\n  |=  [a=@rq]  (sea:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sea:rq .~~~1.05102e5)\n  [%f s=%.y e=-96 a=8.327.038.336.574.210.409.756.656.268.214.272]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bit:rq</code></h3>\n\n<p><code>fn</code> to <code>@rq</code></p>\n\n<p>Converts <code>a</code> from <code>fn</code> to <code>@rq</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bit\n  |=  [a=fn]  ^-  @rq  (bit:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bit:rq [%f s=%.y e=-96 a=8.327.038.336.574.210.409.756.656.268.214.272])\n  .~~~1.05102e5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++add:rq</code></h3>\n\n<p>Add</p>\n\n<p>Produces the sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add  ~/  %add\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (add:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add:rq .~~~-1.821e5 .~~~1.05102e5)\n  .~~~-7.6998e4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sub:rq</code></h3>\n\n<p>Subtract</p>\n\n<p>Produces the difference of <code>a</code> minus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub  ~/  %sub\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (sub:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub:rq .~~~1.821e5 .~~~1.05102e5)\n  .~~~7.6998e4</p>\n</blockquote>\n\n<blockquote>\n  <p>(sub:rq .~~~1.821e5 .~~~-1.05102e5)\n  .~~~2.87202e5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mul:rq</code></h3>\n\n<p>Multiply</p>\n\n<p>Produces the product of <code>a</code> times <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mul  ~/  %mul\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (mul:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mul:rq .~~~1.821e5 .~~~-1.05102e5)\n  .~~~-1.91390742e10\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++div:rq</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the product of <code>a</code> divided by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div  ~/  %div\n  |=  [a=@rq b=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (div:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div:rq .~~~1.821e5 .~~~1.05102e3)\n  .~~~1.732602614602957127361991208540275e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fma:rq</code></h3>\n\n<p>Fused multiply-add</p>\n\n<p>Produces the sum of <code>c</code> plus the product of <code>a</code> multiplied by <code>b</code>;\n<code>(a * b) + c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<p><code>c</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fma  ~/  %fma\n  |=  [a=@rq b=@rq c=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (fma:ma a b c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fma:rq .~~~1.821e5 .~~~-1.05102e2 .~~~6.2044e7)\n  .~~~4.29049258e7\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sqt:rq</code></h3>\n\n<p>Square root</p>\n\n<p>Produces the square root of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rq]  ^-  @rq\n  ~_  leaf+\"rq-fail\"\n  (sqt:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sqt:rq .~~~6.2044e7)\n  .~~~7.876801381271461258959876570289002e3\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lth:rq</code></h3>\n\n<p>Less than</p>\n\n<p>Tests whether <code>a</code> is less than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth  ~/  %lth\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (lth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth:rq .~~~1.2044e7 (mul:rq .~~~9.02e2 .~~~7.114e3))\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:rq .~~~1.2044e7 (mul:rq .~~~9.02e3 .~~~7.114e3))\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lte:rq</code></h3>\n\n<p>Less than or equal</p>\n\n<p>Tests whether <code>a</code> is less than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lte  ~/  %lte\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (lte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte:rq .~~~1.2044e7 (mul:rq .~~~9.02e2 .~~~7.114e3))\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:rq .~~~1.2044e7 (mul:rq .~~~9.02e3 .~~~7.114e3))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:rq .~~~1.2044e7 .~~~1.2044e7)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++equ:rq</code></h3>\n\n<p>Equals</p>\n\n<p>Tests whether <code>a</code> is equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  equ  ~/  %equ\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (equ:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(equ:rq .~~~1.2044e7 .~~~1.2044e7)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(equ:rq .~~~2.2044e7 .~~~1.2044e7)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gte:rq</code></h3>\n\n<p>Greater than or equal</p>\n\n<p>Tests whether <code>a</code> is greater than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gte  ~/  %gte\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (gte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte:rq .~~~1.2044e7 .~~~1.2044e7)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:rq .~~~2.2044e7 .~~~1.2044e7)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:rq .~~~1.2044e7 .~~~2.2044e7)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gth:rq</code></h3>\n\n<p>Tests whether <code>a</code> is greater than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gth  ~/  %gth\n  |=  [a=@rq b=@rq]\n  ~_  leaf+\"rq-fail\"\n  (gth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth:rq .~~~1.2044e7 .~~~1.2044e7)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rq .~~~2.2044e7 .~~~1.2044e7)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rq .~~~1.2044e7 .~~~2.2044e7)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sun:rq</code></h3>\n\n<p>Unsigned integer to <code>@rq</code></p>\n\n<p>Converts <code>a</code> from an unsigned integer to <code>@rq</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@u</code>, an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sun  |=  [a=@u]  ^-  @rq  (sun:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:rq 205)\n  .~~~2.05e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++san:rq</code></h3>\n\n<p>Signed integer to <code>rq</code></p>\n\n<p>Converts <code>a</code> from a signed integer to <code>@rq</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@s</code>, a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  san  |=  [a=@s]  ^-  @rq  (san:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(san:rq -205)\n  .~~~-2.05e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sig:rq</code></h3>\n\n<p>Get sign</p>\n\n<p>Produces the sign of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sig  |=  [a=@rq]  ^-  ?  (sig:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sig:rq .~~~-2.05e2)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++exp:rq</code></h3>\n\n<p>Get exponent</p>\n\n<p>Gets the exponent of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@s</code>, a signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  exp  |=  [a=@rq]  ^-  @s  (exp:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(exp:rq .~~~-2.05e2)\n  --7\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++toi:rq</code></h3>\n\n<p>Round to integer</p>\n\n<p>Rounds <code>a</code> to the nearest integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toi  |=  [a=@rq]  ^-  (unit @s)  (toi:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(toi:rq .~~~-2.085e2)\n  [~ u=-208]</p>\n</blockquote>\n\n<blockquote>\n  <p>(toi:rq .~~~-2.08e2)\n  [~ u=-208]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++drg:rq</code></h3>\n\n<p><code>@rq</code> to decimal float</p>\n\n<p>Produces the decimal form of <code>a</code> using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drg  |=  [a=@rq]  ^-  dn  (drg:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(drg:rq .~~~-2.085e2)\n  [%d s=%.n e=-1 a=2.085]</p>\n</blockquote>\n\n<blockquote>\n  <p>(drg:rq .~~~-2.08e2)\n  [%d s=%.n e=--0 a=208]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++grd:rq</code></h3>\n\n<p>Decimal float to <code>@rq</code></p>\n\n<p>Converts <code>a</code> from <code>dn</code> to <code>@rq</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is <code>dn</code>.</p>\n\n<p><code>a</code> is a <code>@rq</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rq</code>, a quad-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  grd  |=  [a=dn]  ^-  @rq  (grd:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(grd:rq [%d s=%.n e=--0 a=343])\n  .~~~-3.43e2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rq"
        ]
    },
    {
        "doc": "<h2><code>++rh</code></h2>\n\n<p>Half-precision fp</p>\n\n<p>A container core for operations related to half-precision binary floats.</p>\n\n<p><code>++rh</code> has four rounding modes: round to nearest (<code>%n</code>), round up (<code>%u</code>), round\ndown (<code>%d</code>), and round to zero (<code>%z</code>). The default rounding mode is <code>%z</code>. If\nyou need a different rounding mode, you'd do something like <code>=/  rh-n  ~(. rh\n%n)</code> and then call the arms of your modified version instead.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rh\n  ~%  %rh  +&gt;  ~\n  ^|\n  |_  r=$?(%n %u %d %z)\n</code></p>\n\n<hr />\n\n<h3><code>++ma:rh</code></h3>\n\n<p>Initialize <code>ff</code></p>\n\n<p>Instantiates the core <code>ff</code>, giving values to its samples based on the\nconfiguration of the <code>rh</code> core. <strong>This arm is used internally by <code>++rh</code>, you\nwould not normally call this directly.</strong></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ma\n  %*(. ff w 5, p 10, b --15, r r)\n</code></p>\n\n<hr />\n\n<h3><code>++sea:rh</code></h3>\n\n<p><code>@rh</code> to <code>fn</code></p>\n\n<p>Converts <code>a</code> from <code>@rh</code> to <code>fn</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>fn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sea\n  |=  [a=@rh]  (sea:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sea:rh .~~1.22e-5)\n  [%f s=%.y e=-24 a=205]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bit:rh</code></h3>\n\n<p><code>fn</code> to <code>@rh</code></p>\n\n<p>Converts <code>a</code> from <code>fn</code> to <code>@rh</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an <code>fn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>, a half-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bit\n  |=  [a=fn]  ^-  @rh  (bit:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(bit:rh [%f s=%.y e=-24 a=205])\n  .~~1.22e-5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++add:rh</code></h3>\n\n<p>Produces the sum of <code>a</code> plus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  add  ~/  %add\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (add:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(add:rh .~~1.82e2 .~~1.02e2)\n  .~~2.84e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sub:rh</code></h3>\n\n<p>Subtract</p>\n\n<p>Produces the difference of <code>a</code> minus <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sub  ~/  %sub\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (sub:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sub:rh .~~1.821e2 .~~1.051e2)\n  .~~7.7e1</p>\n</blockquote>\n\n<blockquote>\n  <p>(sub:rh .~~1.821e2 .~~6.051e2)\n  .~~-4.228e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mul:rh</code></h3>\n\n<p>Multiply</p>\n\n<p>Produces the product of <code>a</code> times <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a quad-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mul  ~/  %mul\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (mul:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mul:rh .~~1.821e1 .~~-1.05102e2)\n  .~~-1.913e3\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++div:rh</code></h3>\n\n<p>Divide</p>\n\n<p>Produces the product of <code>a</code> divided by <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  div  ~/  %div\n  |=  [a=@rh b=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (div:ma a b)\n</code></p>\n\n<h4>examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(div:rh .~~1.821e3 .~~1.05102e2)\n  .~~1.731e1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fma:rh</code></h3>\n\n<p>Fused multiply-add</p>\n\n<p>Produces the sum of <code>c</code> plus the product of <code>a</code> multiplied by <code>b</code>;\n<code>(a * b) + c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<p><code>c</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fma  ~/  %fma\n  |=  [a=@rh b=@rh c=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (fma:ma a b c)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fma:rh .~~1.821e4 .~~-1.05102e2 .~~6.2044e3)\n  .~~-6.55e4\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sqt:rh</code></h3>\n\n<p>Square root</p>\n\n<p>Produces the square root of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sqt  ~/  %sqt\n  |=  [a=@rh]  ^-  @rh\n  ~_  leaf+\"rh-fail\"\n  (sqt:ma a)\n</code></p>\n\n<h4>Example</h4>\n\n<p>```hoon</p>\n\n<blockquote>\n  <p>(sqt:rh .~~6.24e4)\n  .~~2.498e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lth:rh</code></h3>\n\n<p>Less than</p>\n\n<p>Tests whether <code>a</code> is less than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lth  ~/  %lth\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (lth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lth:rh .~~1.2e5 (mul:rh .~~9.02e2 .~~7.114e2))\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(lth:rh .~~1.2e3 (mul:rh .~~9.02e1 .~~7.114e2))\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lte:rh</code></h3>\n\n<p>Less than or equal</p>\n\n<p>Tests whether <code>a</code> is less than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lte  ~/  %lte\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (lte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lte:rh .~~1.2e5 (mul:rh .~~9.02e2 .~~7.114e2))\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:rh .~~1.2e3 (mul:rh .~~9.02e1 .~~7.114e2))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(lte:rh .~~1.2e3 .~~1.2e3)\n  %.y\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++equ:rh</code></h3>\n\n<p>Equals</p>\n\n<p>Tests whether <code>a</code> is equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  equ  ~/  %equ\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (equ:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(equ:rh .~~1.24e4 .~~1.24e4)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(equ:rh .~~2.24e4 .~~1.24e4)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gte:rh</code></h3>\n\n<p>Greater than or equal</p>\n\n<p>Tests whether <code>a</code> is greater than or equal to <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gte  ~/  %gte\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (gte:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gte:rh .~~1.24e4 .~~1.24e4)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:rh .~~2.24e4 .~~1.24e4)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gte:rh .~~1.24e4 .~~2.24e4)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++gth:rh</code></h3>\n\n<p>Tests whether <code>a</code> is greater than <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<p><code>b</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gth  ~/  %gth\n  |=  [a=@rh b=@rh]\n  ~_  leaf+\"rh-fail\"\n  (gth:ma a b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(gth:rh .~~1.24e4 .~~1.244e4)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rh .~~2.24e4 .~~1.24e4)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(gth:rh .~~1.24e4 .~~2.24e4)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tos:rh</code></h3>\n\n<p><code>@rh</code> to <code>@rs</code></p>\n\n<p>Converts <code>@</code> from <code>@rh</code> to <code>@rs</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rs</code>, a single-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tos\n  |=  [a=@rh]  (bit:rs (sea a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(tos:rh .~~2.5e2)\n  .2.5e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fos:rh</code></h3>\n\n<p><code>@rs</code> to <code>@rh</code></p>\n\n<p>Converts <code>@</code> from <code>@rs</code> to <code>@rh</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rs</code>, a single-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>, a half-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fos\n  |=  [a=@rs]  (bit (sea:rs a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fos:rh .2.5e2)\n  .~~2.5e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sun:rh</code></h3>\n\n<p>Unsigned integer to <code>@rh</code></p>\n\n<p>Converts <code>a</code> from an unsigned integer to <code>@rh</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@u</code>, an unsigned integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>, a half-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sun  |=  [a=@u]  ^-  @rh  (sun:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sun:rh 205)\n  .~~2.05e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++san:rh</code></h3>\n\n<p>Signed integer to <code>@rh</code></p>\n\n<p>Converts <code>a</code> from a signed integer to <code>@rh</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@s</code>, a signed integer.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>, a half-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  san  |=  [a=@s]  ^-  @rh  (san:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(san:rh -205)\n  .~~-2.05e2\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sig:rh</code></h3>\n\n<p>Get sign</p>\n\n<p>Produces the sign of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>flag</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sig  |=  [a=@rh]  ^-  ?  (sig:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sig:rh .~~-2.05e2)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++exp:rh</code></h3>\n\n<p>Get exponent</p>\n\n<p>Gets the exponent of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@s</code>, a signed integer.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  exp  |=  [a=@rh]  ^-  @s  (exp:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(exp:rh .~~-2.05e2)\n  --7\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++toi:rh</code></h3>\n\n<p>Round to integer</p>\n\n<p>Rounds <code>a</code> to the nearest integer.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>unit</code> of <code>@s</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  toi  |=  [a=@rh]  ^-  (unit @s)  (toi:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(toi:rh .~~-2.085e2)\n  [~ u=-208]</p>\n</blockquote>\n\n<blockquote>\n  <p>(toi:rh .~~-2.08e2)\n  [~ u=-208]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++drg:rh</code></h3>\n\n<p><code>@rh</code> to decimal float</p>\n\n<p>Produces the decimal form of <code>a</code> using the Dragon4 algorithm. Guarantees\naccurate results for rounded floats.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@rh</code>, a half-precision float.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  drg  |=  [a=@rh]  ^-  dn  (drg:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(drg:rh .~~-2.085e2)\n  [%d s=%.n e=-1 a=2.085]</p>\n</blockquote>\n\n<blockquote>\n  <p>(drg:rh .~~-2.08e2)\n  [%d s=%.n e=--0 a=208]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++grd:rh</code></h3>\n\n<p>Decimal float to <code>@rh</code></p>\n\n<p>Converts <code>a</code> from <code>dn</code> to <code>@rh</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is <code>dn</code>.</p>\n\n<p><code>a</code> is a <code>@rh</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@rh</code>, a a half-precision float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  grd  |=  [a=dn]  ^-  @rh  (grd:ma a)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(grd:rh [%d s=%.n e=--0 a=343])\n  .~~-3.43e2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rh"
        ]
    },
    {
        "doc": "<h2><code>++year</code></h2>\n\n<p>Date to <code>@da</code></p>\n\n<p>Accept a parsed date of form <code>[[a=? y=@ud] m=@ud t=tarp]</code> and produce\nits <code>@da</code> representation.</p>\n\n<h4>Accepts</h4>\n\n<p><code>det</code> is a <code>date</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>@da</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  year\n  |=  det=date\n  ^-  @da\n  =+  ^=  yer\n      ?:  a.det\n        (add 292.277.024.400 y.det)\n      (sub 292.277.024.400 (dec y.det))\n  =+  day=(yawn yer m.det d.t.det)\n  (yule day h.t.det m.t.det s.t.det f.t.det)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(year [[a=%.y y=2.014] m=8 t=[d=4 h=20 m=4 s=57 f=~[0xd940]]])\n  ~2014.8.4..20.04.57..d940\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "year"
        ]
    },
    {
        "doc": "<h2><code>++yore</code></h2>\n\n<p>Date from atomic date</p>\n\n<p>Produces a <code>date</code> from a <code>@da</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>now</code> is a time atom, <code>@da</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>date</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yore\n  |=  now=@da\n  ^-  date\n  =+  rip=(yell now)\n  =+  ger=(yall d.rip)\n  :-  ?:  (gth y.ger 292.277.024.400)\n        [a=&amp; y=(sub y.ger 292.277.024.400)]\n      [a=| y=+((sub 292.277.024.400 y.ger))]\n  [m.ger d.ger h.rip m.rip s.rip f.rip]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(yore ~2014.6.6..21.09.15..0a16)\n  [[a=%.y y=2.014] m=6 t=[d=6 h=21 m=9 s=15 f=~[0xa16]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "yore"
        ]
    },
    {
        "doc": "<h2><code>++yell</code></h2>\n\n<p>Tarp from atomic date</p>\n\n<p>Produce a <a href=\"/reference/hoon/stdlib/2q#tarp\"><code>$tarp</code></a> time format from a<code>@da</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>now</code> is a <code>@da</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tarp</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yell\n  |=  now=@d\n  ^-  tarp\n  =+  sec=(rsh 6 now)\n  =+  ^=  fan\n      =+  [muc=4 raw=(end 6 now)]\n      |-  ^-  (list @ux)\n      ?:  |(=(0 raw) =(0 muc))\n        ~\n      =&gt;  .(muc (dec muc))\n      [(cut 4 [muc 1] raw) $(raw (end [4 muc] raw))]\n  =+  day=(div sec day:yo)\n  =&gt;  .(sec (mod sec day:yo))\n  =+  hor=(div sec hor:yo)\n  =&gt;  .(sec (mod sec hor:yo))\n  =+  mit=(div sec mit:yo)\n  =&gt;  .(sec (mod sec mit:yo))\n  [day hor mit sec fan]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(yell ~2014.3.20..05.42.53..7456)\n  [d=106.751.991.820.094 h=5 m=42 s=53 f=~[0x7456]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(yell ~2014.6.9..19.09.40..8b66)\n  [d=106.751.991.820.175 h=19 m=9 s=40 f=~[0x8b66]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(yell ~1776.7.4)\n  [d=106.751.991.733.273 h=0 m=0 s=0 f=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "yell"
        ]
    },
    {
        "doc": "<h2><code>++yule</code></h2>\n\n<p>Daily time to time atom</p>\n\n<p>Accepts a <a href=\"/reference/hoon/stdlib/2q#tarp\"><code>$tarp</code></a>, a parsed daily time,\nand produces a <code>@da</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>rip</code> is a <code>tarp</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A time atom, <code>@da</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yule\n  |=  rip=tarp\n  ^-  @d\n  =+  ^=  sec  ;:  add\n                 (mul d.rip day:yo)\n                 (mul h.rip hor:yo)\n                 (mul m.rip mit:yo)\n                 s.rip\n               ==\n  =+  ^=  fac  =+  muc=4\n               |-  ^-  @\n               ?~  f.rip\n                 0\n               =&gt;  .(muc (dec muc))\n               (add (lsh [4 muc] i.f.rip) $(f.rip t.f.rip))\n  (con (lsh 6 sec) fac)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=murica (yell ~1776.7.4)</p>\n</blockquote>\n\n<blockquote>\n  <p>murica\n  [d=106.751.991.733.273 h=0 m=0 s=0 f=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(yule murica)\n  0x8000000b62aaf5800000000000000000</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@da</code>(yule murica)\n  ~1776.7.4</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@da</code>(yule (yell ~2014.3.20..05.42.53..7456))\n  ~2014.3.20..05.42.53..7456</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tarp</code>[31 12 30 0 ~]\n  [d=31 h=12 m=30 s=0 f=~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@dr</code>(yule <code>tarp</code>[31 12 30 0 ~])\n  ~d31.h12.m30\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "yule"
        ]
    },
    {
        "doc": "<h2><code>++yall</code></h2>\n\n<p>Time since beginning of time</p>\n\n<p>Produce the date tuple of <code>[y=@ud m=@ud d=@ud]</code> of the year, month, and\nday from a number of days from the beginning of the Gregorian calendar.</p>\n\n<h4>Accepts</h4>\n\n<p><code>day</code> is a <code>@ud</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of unsigned decimals.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yall\n  |=  day=@ud\n  ^-  [y=@ud m=@ud d=@ud]\n  =+  [era=0 cet=0 lep=*?]\n  =&gt;  .(era (div day era:yo), day (mod day era:yo))\n  =&gt;  ^+  .\n      ?:  (lth day +(cet:yo))\n        .(lep &amp;, cet 0)\n      =&gt;  .(lep |, cet 1, day (sub day +(cet:yo)))\n      .(cet (add cet (div day cet:yo)), day (mod day cet:yo))\n  =+  yer=(add (mul 400 era) (mul 100 cet))\n  |-  ^-  [y=@ud m=@ud d=@ud]\n  =+  dis=?:(lep 366 365)\n  ?.  (lth day dis)\n    =+  ner=+(yer)\n    $(yer ner, day (sub day dis), lep =(0 (end [0 2] ner)))\n  |-  ^-  [y=@ud m=@ud d=@ud]\n  =+  [mot=0 cah=?:(lep moy:yo moh:yo)]\n  |-  ^-  [y=@ud m=@ud d=@ud]\n  =+  zis=(snag mot cah)\n  ?:  (lth day zis)\n    [yer +(mot) +(day)]\n  $(mot +(mot), day (sub day zis))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(yall 198)\n  [y=0 m=7 d=17]</p>\n</blockquote>\n\n<blockquote>\n  <p>(yall 90.398)\n  [y=247 m=7 d=3]</p>\n</blockquote>\n\n<blockquote>\n  <p>(yall 0)\n  [y=0 m=1 d=1]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "yall"
        ]
    },
    {
        "doc": "<h2><code>++yawn</code></h2>\n\n<p>Days since beginning of time</p>\n\n<p>Inverse of <code>yall</code>, computes number of days A.D. from y/m/d date as the\ntuple <code>[yer=@ud mot=@ud day=@ud]</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>yer</code> is an unsigned decimal.</p>\n\n<p><code>mon</code> is an unsigned decimal.</p>\n\n<p><code>day</code> is an unsigned decimal.</p>\n\n<h4>Produces</h4>\n\n<p>An unsigned decimal.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yawn\n  |=  [yer=@ud mot=@ud day=@ud]\n  ^-  @ud\n  =&gt;  .(mot (dec mot), day (dec day))\n  =&gt;  ^+  .\n      %=    .\n          day\n        =+  cah=?:((yelp yer) moy:yo moh:yo)\n        |-  ^-  @ud\n        ?:  =(0 mot)\n          day\n        $(mot (dec mot), cah (slag 1 cah), day (add day (snag 0 cah)))\n      ==\n  |-  ^-  @ud\n  ?.  =(0 (mod yer 4))\n    =+  ney=(dec yer)\n    $(yer ney, day (add day ?:((yelp ney) 366 365)))\n  ?.  =(0 (mod yer 100))\n    =+  nef=(sub yer 4)\n    $(yer nef, day (add day ?:((yelp nef) 1.461 1.460)))\n  ?.  =(0 (mod yer 400))\n    =+  nec=(sub yer 100)\n    $(yer nec, day (add day ?:((yelp nec) 36.525 36.524)))\n  (add day (mul (div yer 400) (add 1 (mul 4 36.524))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(yawn 2.018 7 4)\n  737.244</p>\n</blockquote>\n\n<blockquote>\n  <p>(yawn 1.776 7 4)\n  648.856</p>\n</blockquote>\n\n<blockquote>\n  <p>(yawn 1.990 10 11)\n  727.116\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "yawn"
        ]
    },
    {
        "doc": "<h2><code>++yelp</code></h2>\n\n<p>Leap year?</p>\n\n<p>Determines whether a year is a leap year. Produces a flag.</p>\n\n<h4>Accepts</h4>\n\n<p><code>yer</code> is an unsigned decimal.</p>\n\n<h4>Produces</h4>\n\n<p>A flag.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yelp\n  |=  yer=@ud  ^-  ?\n  &amp;(=(0 (mod yer 4)) |(!=(0 (mod yer 100)) =(0 (mod yer 400))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(yelp 2.014)\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(yelp 2.008)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(yelp 0)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(yelp 14.011)\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "yelp"
        ]
    },
    {
        "doc": "<h2><code>++yo</code></h2>\n\n<p>Time constants core</p>\n\n<p>Core whose arms contain constants for interacting with earth time.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yo\n</code></p>\n\n<hr />\n\n<h3><code>++cet:yo</code></h3>\n\n<p>Days in a century</p>\n\n<p>Derived by multiplying the number of days in a year\n(365) by the number of years in a century (100), then adding the number\ndays from leap-years in a century (24).</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cet  36.524\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>cet:yo\n  36.524</p>\n</blockquote>\n\n<blockquote>\n  <p>(add 365 cet:yo)\n  36.889</p>\n</blockquote>\n\n<blockquote>\n  <p>(sub (add 24 (mul 100 365)) cet:yo)\n  0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++day:yo</code></h3>\n\n<p>Seconds in day</p>\n\n<p>The number of seconds in a day.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  day  86.400\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>day:yo\n  86.400</p>\n</blockquote>\n\n<blockquote>\n  <p>(add 60 day:yo)\n  86.460\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++era:yo</code></h3>\n\n<p>Leap-year period</p>\n\n<p>The number of days in a 400-year period, arrived at by multiplying <code>cet</code> by four\nand adding one. This is done because every 400 years, there is a leap-year where\nthere would otherwise not be.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  era  146.097\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>era:yo\n  146.097</p>\n</blockquote>\n\n<blockquote>\n  <p>(sub era:yo (mul 4 cet:yo))\n  1\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>A year is a leap-year if:</p>\n\n<ul>\n<li>it's divisible by 4;</li>\n<li><strong>unless</strong> it's divisible by 100;</li>\n<li><strong>or</strong> if it's divisible by 400.</li>\n</ul>\n\n<hr />\n\n<h3><code>++hor:yo</code></h3>\n\n<p>Seconds in hour</p>\n\n<p>The number of seconds in an hour. Derived by multiplying the number of\nseconds in a minute by the minutes in an hour.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hor  3.600\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>hor:yo\n  3.600</p>\n</blockquote>\n\n<blockquote>\n  <p>(div hor:yo 60)\n  60\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++jes:yo</code></h3>\n\n<p>Maximum 64-bit timestamp</p>\n\n<p>This is the number of days (starting from 1970) that can be represented in a\n64-bit timestamp. Derived by multiplying <code>era:yo</code> by 730,692,561.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  jes  106.751.991.084.417\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>jes:yo\n  106.751.991.084.417\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>The date is December 4, 292,277,026,596.</p>\n\n<hr />\n\n<h3><code>++mit:yo</code></h3>\n\n<p>Seconds in minute</p>\n\n<p>The number of seconds in a minute.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mit  60\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>mit:yo\n  60\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++moh:yo</code></h3>\n\n<p>Days in month</p>\n\n<p>The days in each month of the Gregorian common year. A list of unsigned\ndecimal atoms (Either 28, 30, or 31) denoting the number of days in the\nmonth at the year at that index.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>list</code> of <code>@ud</code></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  moh  `(list @ud)`[31 28 31 30 31 30 31 31 30 31 30 31 ~]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>moh:yo\n  ~[31 28 31 30 31 30 31 31 30 31 30 31]</p>\n</blockquote>\n\n<blockquote>\n  <p>(snag 4 moh:yo)\n  31\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++moy:yo</code></h3>\n\n<p>Days in months of leap-year</p>\n\n<p>The days in each month of the Gregorian leap-year. A list of unsigned\ndecimal atoms (Either 29, 30, or 31) denoting the number of days in the\nmonth at the leap-year at that index.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>list</code> of <code>@ud</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  moy  `(list @ud)`[31 29 31 30 31 30 31 31 30 31 30 31 ~]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>moy:yo\n  ~[31 29 31 30 31 30 31 31 30 31 30 31]</p>\n</blockquote>\n\n<blockquote>\n  <p>(snag 1 moy:yo)\n  29\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++qad:yo</code></h3>\n\n<p>Seconds in 4 years</p>\n\n<p>The number of seconds in four years. Derived by adding one second to the\nnumber of seconds in four years.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qad  126.144.001\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>qad:yo\n  126.144.001\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++yer:yo</code></h3>\n\n<p>Seconds in year</p>\n\n<p>The number of seconds in a year. Derived by multiplying the number of\nseconds in a day by 365.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  yer  31.536.000\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>yer:yo\n  31.536.000\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "yo"
        ]
    },
    {
        "doc": "<h2><code>++shad</code></h2>\n\n<p>Double SHA-256</p>\n\n<p>Produces an atom that is twice-hashed with <code>shax</code>, the SHA-256 cryptographic\nhash algorithm.</p>\n\n<h4>Accepts</h4>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shad  |=(ruz=@ (shax (shax ruz)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shad 11)\n  0w2Rt.J1gzO.JjsQc.0Komy.DYUUO.27koh.QxwE0.Qgwt7.EPGCi\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "shad"
        ]
    },
    {
        "doc": "<h2><code>++shaf</code></h2>\n\n<p>Half SHA-256</p>\n\n<p>Produces a 128-bit atom by performing the <a href=\"/reference/hoon/stdlib/2d\">bitwise\nXOR</a> on the first and last halves of the 256-bit\nsalted hash <code>shas</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sal</code> is an atom.</p>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shaf\n  |=  [sal=@ ruz=@]\n  =+  haz=(shas sal ruz)\n  (mix (end 7 haz) (rsh 7 haz))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shaf 17 8)\n  0wD.DSP0L.WUuQg.-A765.4RY-h\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "shaf"
        ]
    },
    {
        "doc": "<h2><code>++sham</code></h2>\n\n<p>128-bit noun hash</p>\n\n<p>Produces a 128-bit atom by hashing a noun <code>yux</code> with the <a href=\"#shaf\"><code>+shaf</code></a>\nfunction. If that noun is a cell, then it is passed to the\n<a href=\"/reference/hoon/stdlib/2p#jam\"><code>jam</code></a> function to produce an atom to be\nhashed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>yux</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@uvH</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sham\n  |=  yux=*  ^-  @uvH  ^-  @\n  ?@  yux\n    (shaf %mash yux)\n  (shaf %sham (jam yux))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sham [2 4])\n  0v3.71s52.4bqnp.ki2b8.9hhsp.2ufgg</p>\n</blockquote>\n\n<blockquote>\n  <p>(sham \"hello\")\n  0v1.hg8mv.t7s3f.u4f8a.q5noe.dvqvh\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sham"
        ]
    },
    {
        "doc": "<h2><code>++shas</code></h2>\n\n<p>Salted hash</p>\n\n<p>Produces an atom by using SHA-256 plus a salt input. The <a href=\"/reference/hoon/stdlib/2d\">bitwise\nXOR</a> is performed on salt <code>sal</code> and the product\nof atom <code>ruz</code> hashed with SHA-256. The product of that logical operation is then\nitself hashed with SHA-256.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sal</code> is an atom.</p>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shas\n  ~/  %shas\n  |=  [sal=@ ruz=@]\n  (shax (mix sal (shax ruz)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shas 1 1)\n  0w5hZ.Gim4L.9xKlU.jJJQr.2Bgi~.RHd5s.IwXuV.p43at.ZdsTY\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "shas"
        ]
    },
    {
        "doc": "<h2><code>++shax</code></h2>\n\n<p>SHA-256</p>\n\n<p>Produces an atom by hashing an atom <code>ruz</code> with SHA-256.</p>\n\n<h4>Sources</h4>\n\n<p><code>hoon\n++  shax\n  ~/  %shax\n  |=  ruz=@  ^-  @\n  (shay [(met 3 ruz) ruz])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shax 'foo')\n  0waXD.pCa8n.EHVEb.-3p70.JgxcQ.gj0tf.4mr-o.~6~Sx.HJ2oI\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "shax"
        ]
    },
    {
        "doc": "<h2><code>++shay</code></h2>\n\n<p>SHA-256 with length</p>\n\n<p>Produces an atom by hashing an atom <code>ruz</code> with SHA-512. Another atom, <code>len</code>, is\nthe byte-length of the theoretical buffer represented by the atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>len</code> is an atom.</p>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shay\n  ~/  %shay\n  |=  [len=@u ruz=@]  ^-  @\n  =&gt;  .(ruz (cut 3 [0 len] ruz))\n  =+  [few==&gt;(fe .(a 5)) wac=|=([a=@ b=@] (cut 5 [a 1] b))]\n  =+  [sum=sum.few ror=ror.few net=net.few inv=inv.few]\n  =+  ral=(lsh [0 3] len)\n  =+  ^=  ful\n      %+  can  0\n      :~  [ral ruz]\n          [8 128]\n          [(mod (sub 960 (mod (add 8 ral) 512)) 512) 0]\n          [64 (~(net fe 6) ral)]\n      ==\n  =+  lex=(met 9 ful)\n  =+  ^=  kbx  0xc671.78f2.bef9.a3f7.a450.6ceb.90be.fffa.\n                 8cc7.0208.84c8.7814.78a5.636f.748f.82ee.\n                 682e.6ff3.5b9c.ca4f.4ed8.aa4a.391c.0cb3.\n                 34b0.bcb5.2748.774c.1e37.6c08.19a4.c116.\n                 106a.a070.f40e.3585.d699.0624.d192.e819.\n                 c76c.51a3.c24b.8b70.a81a.664b.a2bf.e8a1.\n                 9272.2c85.81c2.c92e.766a.0abb.650a.7354.\n                 5338.0d13.4d2c.6dfc.2e1b.2138.27b7.0a85.\n                 1429.2967.06ca.6351.d5a7.9147.c6e0.0bf3.\n                 bf59.7fc7.b003.27c8.a831.c66d.983e.5152.\n                 76f9.88da.5cb0.a9dc.4a74.84aa.2de9.2c6f.\n                 240c.a1cc.0fc1.9dc6.efbe.4786.e49b.69c1.\n                 c19b.f174.9bdc.06a7.80de.b1fe.72be.5d74.\n                 550c.7dc3.2431.85be.1283.5b01.d807.aa98.\n                 ab1c.5ed5.923f.82a4.59f1.11f1.3956.c25b.\n                 e9b5.dba5.b5c0.fbcf.7137.4491.428a.2f98\n  =+  ^=  hax  0x5be0.cd19.1f83.d9ab.9b05.688c.510e.527f.\n                 a54f.f53a.3c6e.f372.bb67.ae85.6a09.e667\n  =+  i=0\n  |-  ^-  @\n  ?:  =(i lex)\n    (run 5 hax net)\n  =+  ^=  wox\n      =+  dux=(cut 9 [i 1] ful)\n      =+  wox=(run 5 dux net)\n      =+  j=16\n      |-  ^-  @\n      ?:  =(64 j)\n        wox\n      =+  :*  l=(wac (sub j 15) wox)\n              m=(wac (sub j 2) wox)\n              n=(wac (sub j 16) wox)\n              o=(wac (sub j 7) wox)\n          ==\n      =+  x=:(mix (ror 0 7 l) (ror 0 18 l) (rsh [0 3] l))\n      =+  y=:(mix (ror 0 17 m) (ror 0 19 m) (rsh [0 10] m))\n      =+  z=:(sum n x o y)\n      $(wox (con (lsh [5 j] z) wox), j +(j))\n  =+  j=0\n  =+  :*  a=(wac 0 hax)\n          b=(wac 1 hax)\n          c=(wac 2 hax)\n          d=(wac 3 hax)\n          e=(wac 4 hax)\n          f=(wac 5 hax)\n          g=(wac 6 hax)\n          h=(wac 7 hax)\n      ==\n  |-  ^-  @\n  ?:  =(64 j)\n    %=  ^$\n      i  +(i)\n      hax  %+  rep  5\n           :~  (sum a (wac 0 hax))\n               (sum b (wac 1 hax))\n               (sum c (wac 2 hax))\n               (sum d (wac 3 hax))\n               (sum e (wac 4 hax))\n               (sum f (wac 5 hax))\n               (sum g (wac 6 hax))\n               (sum h (wac 7 hax))\n           ==\n    ==\n  =+  l=:(mix (ror 0 2 a) (ror 0 13 a) (ror 0 22 a))    ::  s0\n  =+  m=:(mix (dis a b) (dis a c) (dis b c))            ::  maj\n  =+  n=(sum l m)                                       ::  t2\n  =+  o=:(mix (ror 0 6 e) (ror 0 11 e) (ror 0 25 e))    ::  s1\n  =+  p=(mix (dis e f) (dis (inv e) g))                 ::  ch\n  =+  q=:(sum h o p (wac j kbx) (wac j wox))            ::  t1\n  $(j +(j), a (sum q n), b a, c b, d c, e (sum d q), f e, g f, h g)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shay 1 'hello')\n  0w2eN.jupNe.OyGTU.-l0Co.SWSGS.fFD9k.HPHg1.-AYmg.CgaCG\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shay 2 'hello')\n  0wdUu.vKccX.fhjYt.tY2a4.B~sqA.KWNOM.1TnEu.8sQd8.LvyYT\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Because byte-strings can have leading zeros, but atoms cannot, we use <code>len</code>\nas a way of saying that the atom <code>ruz</code> is shorter than its representative\nbyte-string.</p>\n\n<hr />\n",
        "keys": [
            "shay"
        ]
    },
    {
        "doc": "<h2><code>++shaw</code></h2>\n\n<p>Hash to nbits</p>\n\n<p>Produces an atom of <code>len</code> random bits by hashing <code>ruz</code> with the salted\nSHA-256 hash algorithm, where <code>sal</code> is the cryptographic salt.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sal</code> is an atom.</p>\n\n<p><code>len</code> is an atom.</p>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shaw\n  |=  [sal=@ len=@ ruz=@]\n  (~(raw og (shas sal (mix len ruz))) len)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(shaw 3 6 98)\n  0b11.0111</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(shaw 2 6 98)\n  0b11\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "shaw"
        ]
    },
    {
        "doc": "<h2><code>++shaz</code></h2>\n\n<p>SHA-512</p>\n\n<p>Produces an atom by hashing an atom <code>ruz</code> with SHA-512.</p>\n\n<h4>Accepts</h4>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shaz\n  |=  ruz=@  ^-  @\n  (shal [(met 3 ruz) ruz])\n</code></p>\n\n<h4>Examples</h4>\n\n<p><code>\n`@uw`(shaz 'hello')\n0w1.3MdWY.sS~QT.zFsbB.N7oQo.cSImU.56Xcu.DMtMq.mrSsc.z8WsY.pNABZ.Z~ySG.Ecysb.XCP5P.fuHjq.Jimnn.zPoHQ.AQD6r\n</code></p>\n\n<hr />\n",
        "keys": [
            "shaz"
        ]
    },
    {
        "doc": "<h2><code>++shal</code></h2>\n\n<p>SHA-512 with length</p>\n\n<p>Produces an atom by hashing an atom <code>ruz</code> with SHA-512. Another atom, <code>len</code>, is\nthe byte-length of the theoretical buffer represented by the atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>len</code> is an atom.</p>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shal\n  ~/  %shal\n  |=  [len=@ ruz=@]  ^-  @\n  =&gt;  .(ruz (cut 3 [0 len] ruz))\n  =+  [few==&gt;(fe .(a 6)) wac=|=([a=@ b=@] (cut 6 [a 1] b))]\n  =+  [sum=sum.few ror=ror.few net=net.few inv=inv.few]\n  =+  ral=(lsh [0 3] len)\n  =+  ^=  ful\n      %+  can  0\n      :~  [ral ruz]\n          [8 128]\n          [(mod (sub 1.920 (mod (add 8 ral) 1.024)) 1.024) 0]\n          [128 (~(net fe 7) ral)]\n      ==\n  =+  lex=(met 10 ful)\n  =+  ^=  kbx  0x6c44.198c.4a47.5817.5fcb.6fab.3ad6.faec.\n                 597f.299c.fc65.7e2a.4cc5.d4be.cb3e.42b6.\n                 431d.67c4.9c10.0d4c.3c9e.be0a.15c9.bebc.\n                 32ca.ab7b.40c7.2493.28db.77f5.2304.7d84.\n                 1b71.0b35.131c.471b.113f.9804.bef9.0dae.\n                 0a63.7dc5.a2c8.98a6.06f0.67aa.7217.6fba.\n                 f57d.4f7f.ee6e.d178.eada.7dd6.cde0.eb1e.\n                 d186.b8c7.21c0.c207.ca27.3ece.ea26.619c.\n                 c671.78f2.e372.532b.bef9.a3f7.b2c6.7915.\n                 a450.6ceb.de82.bde9.90be.fffa.2363.1e28.\n                 8cc7.0208.1a64.39ec.84c8.7814.a1f0.ab72.\n                 78a5.636f.4317.2f60.748f.82ee.5def.b2fc.\n                 682e.6ff3.d6b2.b8a3.5b9c.ca4f.7763.e373.\n                 4ed8.aa4a.e341.8acb.391c.0cb3.c5c9.5a63.\n                 34b0.bcb5.e19b.48a8.2748.774c.df8e.eb99.\n                 1e37.6c08.5141.ab53.19a4.c116.b8d2.d0c8.\n                 106a.a070.32bb.d1b8.f40e.3585.5771.202a.\n                 d699.0624.5565.a910.d192.e819.d6ef.5218.\n                 c76c.51a3.0654.be30.c24b.8b70.d0f8.9791.\n                 a81a.664b.bc42.3001.a2bf.e8a1.4cf1.0364.\n                 9272.2c85.1482.353b.81c2.c92e.47ed.aee6.\n                 766a.0abb.3c77.b2a8.650a.7354.8baf.63de.\n                 5338.0d13.9d95.b3df.4d2c.6dfc.5ac4.2aed.\n                 2e1b.2138.5c26.c926.27b7.0a85.46d2.2ffc.\n                 1429.2967.0a0e.6e70.06ca.6351.e003.826f.\n                 d5a7.9147.930a.a725.c6e0.0bf3.3da8.8fc2.\n                 bf59.7fc7.beef.0ee4.b003.27c8.98fb.213f.\n                 a831.c66d.2db4.3210.983e.5152.ee66.dfab.\n                 76f9.88da.8311.53b5.5cb0.a9dc.bd41.fbd4.\n                 4a74.84aa.6ea6.e483.2de9.2c6f.592b.0275.\n                 240c.a1cc.77ac.9c65.0fc1.9dc6.8b8c.d5b5.\n                 efbe.4786.384f.25e3.e49b.69c1.9ef1.4ad2.\n                 c19b.f174.cf69.2694.9bdc.06a7.25c7.1235.\n                 80de.b1fe.3b16.96b1.72be.5d74.f27b.896f.\n                 550c.7dc3.d5ff.b4e2.2431.85be.4ee4.b28c.\n                 1283.5b01.4570.6fbe.d807.aa98.a303.0242.\n                 ab1c.5ed5.da6d.8118.923f.82a4.af19.4f9b.\n                 59f1.11f1.b605.d019.3956.c25b.f348.b538.\n                 e9b5.dba5.8189.dbbc.b5c0.fbcf.ec4d.3b2f.\n                 7137.4491.23ef.65cd.428a.2f98.d728.ae22\n  =+  ^=  hax  0x5be0.cd19.137e.2179.1f83.d9ab.fb41.bd6b.\n                 9b05.688c.2b3e.6c1f.510e.527f.ade6.82d1.\n                 a54f.f53a.5f1d.36f1.3c6e.f372.fe94.f82b.\n                 bb67.ae85.84ca.a73b.6a09.e667.f3bc.c908\n  =+  i=0\n  |-  ^-  @\n  ?:  =(i lex)\n    (run 6 hax net)\n  =+  ^=  wox\n      =+  dux=(cut 10 [i 1] ful)\n      =+  wox=(run 6 dux net)\n      =+  j=16\n      |-  ^-  @\n      ?:  =(80 j)\n        wox\n      =+  :*  l=(wac (sub j 15) wox)\n              m=(wac (sub j 2) wox)\n              n=(wac (sub j 16) wox)\n              o=(wac (sub j 7) wox)\n          ==\n      =+  x=:(mix (ror 0 1 l) (ror 0 8 l) (rsh [0 7] l))\n      =+  y=:(mix (ror 0 19 m) (ror 0 61 m) (rsh [0 6] m))\n      =+  z=:(sum n x o y)\n      $(wox (con (lsh [6 j] z) wox), j +(j))\n  =+  j=0\n  =+  :*  a=(wac 0 hax)\n          b=(wac 1 hax)\n          c=(wac 2 hax)\n          d=(wac 3 hax)\n          e=(wac 4 hax)\n          f=(wac 5 hax)\n          g=(wac 6 hax)\n          h=(wac 7 hax)\n      ==\n  |-  ^-  @\n  ?:  =(80 j)\n    %=  ^$\n      i  +(i)\n      hax  %+  rep  6\n           :~  (sum a (wac 0 hax))\n               (sum b (wac 1 hax))\n               (sum c (wac 2 hax))\n               (sum d (wac 3 hax))\n               (sum e (wac 4 hax))\n               (sum f (wac 5 hax))\n               (sum g (wac 6 hax))\n               (sum h (wac 7 hax))\n           ==\n    ==\n  =+  l=:(mix (ror 0 28 a) (ror 0 34 a) (ror 0 39 a))   ::  S0\n  =+  m=:(mix (dis a b) (dis a c) (dis b c))            ::  maj\n  =+  n=(sum l m)                                       ::  t2\n  =+  o=:(mix (ror 0 14 e) (ror 0 18 e) (ror 0 41 e))   ::  S1\n  =+  p=(mix (dis e f) (dis (inv e) g))                 ::  ch\n  =+  q=:(sum h o p (wac j kbx) (wac j wox))            ::  t1\n  $(j +(j), a (sum q n), b a, c b, d c, e (sum d q), f e, g f, h g)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shal 1 'hello')\n  0w2.nWO0R.zMAzH.OSWU1.apOje.19Mta.RE24o.4u~MB.wQuj4.NDdG6.0QZA0.w21Br.yQVhu.pFBII.Cdgvd.WT-bH.g51Yu.fL44y\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shal 2 'hello')\n  0w1.r3W4g.hae37.8YUFp.ntryr.DsQuY.rPsdm.p3Xjv.rayLz.DslEc.Lxvll.OJUc3.tZeLZ.TjUnu.XMyGr.82qPA.zl1y0.HbSpT\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Because byte-strings can have leading zeros, but atoms cannot, we use <code>len</code>\nas a way of saying that the atom <code>ruz</code> is shorter than its representative\nbyte-string.</p>\n\n<hr />\n",
        "keys": [
            "shal"
        ]
    },
    {
        "doc": "<h2><code>++shan</code></h2>\n\n<p>SHA-1</p>\n\n<p>Produces an atom by hashing an atom <code>ruz</code> with SHA-1.</p>\n\n<h4>Accepts</h4>\n\n<p><code>ruz</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shan\n  |=  ruz=@\n  =+  [few==&gt;(fe .(a 5)) wac=|=([a=@ b=@] (cut 5 [a 1] b))]\n  =+  [sum=sum.few ror=ror.few rol=rol.few net=net.few inv=inv.few]\n  =+  ral=(lsh [0 3] (met 3 ruz))\n  =+  ^=  ful\n      %+  can  0\n      :~  [ral ruz]\n          [8 128]\n          [(mod (sub 960 (mod (add 8 ral) 512)) 512) 0]\n          [64 (~(net fe 6) ral)]\n      ==\n  =+  lex=(met 9 ful)\n  =+  kbx=0xca62.c1d6.8f1b.bcdc.6ed9.eba1.5a82.7999\n  =+  hax=0xc3d2.e1f0.1032.5476.98ba.dcfe.efcd.ab89.6745.2301\n  =+  i=0\n  |-\n  ?:  =(i lex)\n    (rep 5 (flop (rip 5 hax)))\n  =+  ^=  wox\n      =+  dux=(cut 9 [i 1] ful)\n      =+  wox=(rep 5 (turn (rip 5 dux) net))\n      =+  j=16\n      |-  ^-  @\n      ?:  =(80 j)\n        wox\n      =+  :*  l=(wac (sub j 3) wox)\n              m=(wac (sub j 8) wox)\n              n=(wac (sub j 14) wox)\n              o=(wac (sub j 16) wox)\n          ==\n      =+  z=(rol 0 1 :(mix l m n o))\n      $(wox (con (lsh [5 j] z) wox), j +(j))\n  =+  j=0\n  =+  :*  a=(wac 0 hax)\n          b=(wac 1 hax)\n          c=(wac 2 hax)\n          d=(wac 3 hax)\n          e=(wac 4 hax)\n      ==\n  |-  ^-  @\n  ?:  =(80 j)\n    %=  ^$\n      i  +(i)\n      hax  %+  rep  5\n           :~\n               (sum a (wac 0 hax))\n               (sum b (wac 1 hax))\n               (sum c (wac 2 hax))\n               (sum d (wac 3 hax))\n               (sum e (wac 4 hax))\n           ==\n    ==\n  =+  fx=(con (dis b c) (dis (not 5 1 b) d))\n  =+  fy=:(mix b c d)\n  =+  fz=:(con (dis b c) (dis b d) (dis c d))\n  =+  ^=  tem\n      ?:  &amp;((gte j 0) (lte j 19))\n        :(sum (rol 0 5 a) fx e (wac 0 kbx) (wac j wox))\n      ?:  &amp;((gte j 20) (lte j 39))\n        :(sum (rol 0 5 a) fy e (wac 1 kbx) (wac j wox))\n      ?:  &amp;((gte j 40) (lte j 59))\n        :(sum (rol 0 5 a) fz e (wac 2 kbx) (wac j wox))\n      :(sum (rol 0 5 a) fy e (wac 3 kbx) (wac j wox))\n  $(j +(j), a tem, b a, c (rol 0 30 b), d c, e d)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(shan 'hello')\n  0waH.QNxTs.NuyyS.HXu3P.J8bdC.KGkdd\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>SHA-1 is a deprecated function; it is not considered secure.</p>\n\n<hr />\n",
        "keys": [
            "shan"
        ]
    },
    {
        "doc": "<h2><code>++og</code></h2>\n\n<p>Container arm for SHA-256-powered random-number generation. Its sample <code>a</code> is an\natom that is used as a seed for the hash.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A core.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  og\n  ~/  %og\n  |_  a=@\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(. og 919)\n  &lt;4.wmp {a/@ud &lt;54.tyv 119.olq 31.ohr 1.jmk $143>}&gt;\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Note that the product is deterministic; the seed will produce the same\nresult every time it is run. Use <code>eny</code>, 256 bits of entropy, for a\nnon-deterministic product.</p>\n\n<hr />\n\n<h3><code>++rad:og</code></h3>\n\n<p>Random in range</p>\n\n<p>Produces a random number that is within the range of first <code>b</code> whole numbers,\nstarting at <code>0</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rad\n  |=  b=@  ^-  @\n  ~_  leaf+\"rad-zero\"\n  ?&lt;  =(0 b)\n  =+  c=(raw (met 0 b))\n  ?:((lth c b) c $(a +(a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(rad og 5) 11)\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(rad og 758.716.593) 11)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(rad og 1) 100.000)\n  71.499</p>\n</blockquote>\n\n<blockquote>\n  <p>(~(rad og eny) 11)               ::  <code>eny</code> acts as a random sample\n  7\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rads:og</code></h3>\n\n<p>Random continuation</p>\n\n<p>Produces a cell. The head of the cell is a random number that is within the\nrange of first <code>b</code> whole numbers, starting at <code>0</code>. The tail is a new core\nproduced from hashing the parent core with <code>(rad b)</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A cell.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rads\n  |=  b=@\n  =+  r=(rad b)\n  [r +&gt;.$(a (shas %og-s (mix a r)))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(rads og 4) 10)\n  [2 &lt;4.wmp {a/@ &lt;54.tyv 119.olq 31.ohr 1.jmk $143>}&gt;]</p>\n</blockquote>\n\n<blockquote>\n  <p>=/  rng  ~(. og 7)\n      =^  a  rng  (rads:rng 10)\n      =^  b  rng  (rads:rng 10)\n      [a b]\n  [2 8]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Since everything in Hoon is a pure function, we need to use tricks like this to\ngenerate separate random values from the same seed. Notice how we jump from\none <code>rads</code> function call to another in the above example.</p>\n\n<hr />\n\n<h3><code>++raw:og</code></h3>\n\n<p>Random bits</p>\n\n<p>Produces an atom with a bitwidth <code>b</code> that is composed of random bits.</p>\n\n<h4>Accepts</h4>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  raw\n  ~/  %raw\n  |=  b=@  ^-  @\n  %+  can\n    0\n  =+  c=(shas %og-a (mix b a))\n  |-  ^-  (list [@ @])\n  ?:  =(0 b)\n    ~\n  =+  d=(shas %og-b (mix b (mix a c)))\n  ?:  (lth b 256)\n    [[b (end [0 b] d)] ~]\n  [[256 d] $(c d, b (sub b 256))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ud</code>(~(raw og 27) 4)\n  0b1001</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(~(raw og 27) 3)\n  0b0</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(~(raw og 11) 4)\n  0b1111</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(~(raw og 11) 3)\n  0b100\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++raws:og</code></h3>\n\n<p>Random bits continuation</p>\n\n<p>Produces a cell. The head of the cell is an atom with a bitwidth <code>b</code> that is\ncomposed of random bits. The tail is a new core produced from hashing the\nparent core with <code>(raw b)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  raws\n  |=  b=@\n  =+  r=(raw b)\n  [r +&gt;.$(a (shas %og-s (mix a r)))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>[@ub _og]</code>(~(raws og 7) 4)\n  [0b1100 &lt;4.wmp {a/@ &lt;54.tyv 119.olq 31.ohr 1.jmk $143>}&gt;]</p>\n</blockquote>\n\n<blockquote>\n  <p>=/  rng  ~(. og 7)\n            =^  a  rng  (rads:rng 4)\n            =^  b  rng  (rads:rng 4)\n            [<code>@ub</code>a <code>@ub</code>b]\n  [0b10 0b1]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Since everything in Hoon is a pure function, we need to use tricks like this to\ngenerate separate random values from the same seed. Notice how we jump from\none <code>raws</code> function call to another in the above example.</p>\n\n<hr />\n",
        "keys": [
            "og"
        ]
    },
    {
        "doc": "<h2><code>++un</code></h2>\n\n<p>Reversible scrambling</p>\n\n<p>A core that contains arms that perform reversible scrambling operations.\nUsed in the <code>@p</code> phonetic base.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  un\n  |%\n</code></p>\n\n<hr />\n\n<h3><code>++wren:un</code></h3>\n\n<p>Conceal structure</p>\n\n<p>Scrambles a byte-string <code>pyn</code> by adding the current position to each\nbyte, looking it up in an s-box, and then performing the XOR operation\non the result, pushing it forward. The inverse of <code>wred</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>pyn</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wren\n  |=  pyn=@  ^-  @\n  =+  len=(met 3 pyn)\n  ?:  =(0 len)\n    0\n  =&gt;  .(len (dec len))\n  =+  mig=(zaft (xafo len (cut 3 [len 1] pyn)))\n  %+  can  3\n  %-  flop  ^-  (list [@ @])\n  :-  [1 mig]\n  |-  ^-  (list [@ @])\n  ?:  =(0 len)\n    ~\n  =&gt;  .(len (dec len))\n  =+  mog=(zyft :(mix mig (end 3 len) (cut 3 [len 1] pyn)))\n  [[1 mog] $(mig mog)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(wren:un 'testing')\n  0x30.bf6a.b9fe.7d8f</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>'testing'\n  0x67.6e69.7473.6574</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@da</code>(wred:un (wren:un ~2001.2.5))\n  ~2001.2.5\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++wred:un</code></h3>\n\n<p>Restore structure</p>\n\n<p>Unscrambles a byte-string <code>cry</code> by subtracting the current position from\neach byte, looking it up in an s-box, and performing the XOR operation\non the result, pushing it forward. The inverse of <code>wren</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>cry</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wred\n  |=  cry=@  ^-  @\n  =+  len=(met 3 cry)\n  ?:  =(0 len)\n    0\n  =&gt;  .(len (dec len))\n  =+  mig=(cut 3 [len 1] cry)\n  %+  can  3\n  %-  flop  ^-  (list [@ @])\n  :-  [1 (xaro len (zart mig))]\n  |-  ^-  (list [@ @])\n  ?:  =(0 len)\n    ~\n  =&gt;  .(len (dec len))\n  =+  mog=(cut 3 [len 1] cry)\n  [[1 :(mix mig (end 3 len) (zyrt mog))] $(mig mog)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(wred:un 0x30.bf6a.b9fe.7d8f)\n  29.113.321.805.538.676</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(wred:un 0x30.bf6a.b9fe.7d8f)\n  'testing'</p>\n</blockquote>\n\n<blockquote>\n  <p>(wred:un (wren:un 200.038.426))\n  200.038.426\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++xafo:un</code></h3>\n\n<p>Add modulo 255</p>\n\n<p>Produces the sum of two atoms modulo 255, encoded as a nonzero byte. The inverse\nof <code>xaro</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  xafo  |=([a=@ b=@] +((mod (add (dec b) a) 255)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xafo:un 5 6)\n  11</p>\n</blockquote>\n\n<blockquote>\n  <p>(xafo:un 256 20)\n  21</p>\n</blockquote>\n\n<blockquote>\n  <p>(xafo:un 256 (xaro:un 256 20))\n  20\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++xaro:un</code></h3>\n\n<p>Subtract modulo 255</p>\n\n<p>Produces the sum of two atoms modulo 255, encoded as a nonzero byte. The inverse\nof <code>xafo</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  xaro  |=([a=@ b=@] +((mod (add (dec b) (sub 255 (mod a 255))) 255)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(xaro:un 17 57)\n  40</p>\n</blockquote>\n\n<blockquote>\n  <p>(xaro:un 265 12)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(xaro:un 256 (xafo:un 256 20))\n  20\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zaft:un</code></h3>\n\n<p>Look up in 255 sub box</p>\n\n<p>Looks up a nonzero byte <code>a</code> in a substitution box with 255 values, producing a\nunique nonzero byte. The inverse of <code>zart</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom of one byte in length.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zaft\n  |=  a=@D\n  =+  ^=  b\n      0xcc.75bc.86c8.2fb1.9a42.f0b3.79a0.92ca.21f6.1e41.cde5.fcc0.\n      7e85.51ae.1005.c72d.1246.07e8.7c64.a914.8d69.d9f4.59c2.8038.\n      1f4a.dca2.6fdf.66f9.f561.a12e.5a16.f7b0.a39f.364e.cb70.7318.\n      1de1.ad31.63d1.abd4.db68.6a33.134d.a760.edee.5434.493a.e323.\n      930d.8f3d.3562.bb81.0b24.43cf.bea5.a6eb.52b4.0229.06b2.6704.\n      78c9.45ec.d75e.58af.c577.b7b9.c40e.017d.90c3.87f8.96fa.1153.\n      0372.7f30.1c32.ac83.ff17.c6e4.d36d.6b55.e2ce.8c71.8a5b.b6f3.\n      9d4b.eab5.8b3c.e7f2.a8fe.9574.5de0.bf20.3f15.9784.9939.5f9c.\n      e609.564f.d8a4.b825.9819.94aa.2c08.8e4c.9b22.477a.2840.3ed6.\n      3750.6ef1.44dd.89ef.6576.d00a.fbda.9ed2.3b6c.7b0c.bde9.2ade.\n      5c88.c182.481a.1b0f.2bfd.d591.2726.57ba\n  (cut 3 [(dec a) 1] b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(zaft:un 0x12)\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>(zaft:un 0xff)\n  204\n  <code>@ux</code>(zart:un 204)\n  0xff</p>\n</blockquote>\n\n<blockquote>\n  <p>(zaft:un 0x0)\n  ! decrement-underflow\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zart:un</code></h3>\n\n<p>Reverse look up in 255 sub box</p>\n\n<p>Looks up the index of a nonzero byte <code>a</code> in the substitution box with 255\nvalues, producing a unique nonzero byte. The inverse of <code>zaft</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom of one byte in length.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zart\n  |=  a=@D\n  =+  ^=  b\n      0x68.4f07.ea1c.73c9.75c2.efc8.d559.5125.f621.a7a8.8591.5613.\n      dd52.40eb.65a2.60b7.4bcb.1123.ceb0.1bd6.3c84.2906.b164.19b3.\n      1e95.5fec.ffbc.f187.fbe2.6680.7c77.d30e.e94a.9414.fd9a.017d.\n      3a7e.5a55.8ff5.8bf9.c181.e5b6.6ab2.35da.50aa.9293.3bc0.cdc6.\n      f3bf.1a58.4130.f844.3846.744e.36a0.f205.789e.32d8.5e54.5c22.\n      0f76.fce7.4569.0d99.d26e.e879.dc16.2df4.887f.1ffe.4dba.6f5d.\n      bbcc.2663.1762.aed7.af8a.ca20.dbb4.9bc7.a942.834c.105b.c4d4.\n      8202.3e61.a671.90e6.273d.bdab.3157.cfa4.0c2e.df86.2496.f7ed.\n      2b48.2a9d.5318.a343.d128.be9c.a5ad.6bb5.6dfa.c5e1.3408.128d.\n      2c04.0339.97a1.2ff0.49d0.eeb8.6c0a.0b37.b967.c347.d9ac.e072.\n      e409.7b9f.1598.1d3f.33de.8ce3.8970.8e7a\n  (cut 3 [(dec a) 1] b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(zart:un 204)\n  0xff</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(zart:un 42)\n  0x12</p>\n</blockquote>\n\n<blockquote>\n  <p>(zaft:un 0x12)\n  42\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zyft:un</code></h3>\n\n<p>Lookup byte in 256 sub box</p>\n\n<p>Looks up a byte <code>a</code> in a substitution box with 256 values, producing a byte. The\ninverse of <code>zyrt</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom of one byte in length.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zyft\n  |=  a=@D\n  =+  ^=  b\n      0xbb49.b71f.b881.b402.17e4.6b86.69b5.1647.115f.dddb.7ca5.\n        8371.4bd5.19a9.b092.605d.0d9b.e030.a0cc.78ba.5706.4d2d.\n        986a.768c.f8e8.c4c7.2f1c.effe.3cae.01c0.253e.65d3.3872.\n        ce0e.7a74.8ac6.daac.7e5c.6479.44ec.4143.3d20.4af0.ee6c.\n        c828.deca.0377.249f.ffcd.7b4f.eb7d.66f2.8951.042e.595a.\n        8e13.f9c3.a79a.f788.6199.9391.7fab.6200.4ce5.0758.e2f1.\n        7594.c945.d218.4248.afa1.e61a.54fb.1482.bea4.96a2.3473.\n        63c2.e7cb.155b.120a.4ed7.bfd8.b31b.4008.f329.fca3.5380.\n        9556.0cb2.8722.2bea.e96e.3ac5.d1bc.10e3.2c52.a62a.b1d6.\n        35aa.d05e.f6a8.0f3b.31ed.559d.09ad.f585.6d21.fd1d.8d67.\n        370b.26f4.70c1.b923.4684.6fbd.cf8b.5036.0539.9cdc.d93f.\n        9068.1edf.8f33.b632.d427.97fa.9ee1\n  (cut 3 [a 1] b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(zyft:un 0x12)\n  57</p>\n</blockquote>\n\n<blockquote>\n  <p>(zyft:un 0x0)\n  225</p>\n</blockquote>\n\n<blockquote>\n  <p>(zyft:un 0xff)\n  187\n  <code>@ux</code>(zyrt:un 187)\n  0xff\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zyrt:un</code></h3>\n\n<p>Reverse lookup byte in 256 sub box</p>\n\n<p>Looks up a byte <code>a</code> in a substitution box with 256 values, producing a byte.\nThe inverse of <code>zyft</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom of one byte in length.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zyrt\n  |=  a=@D\n  =+  ^=  b\n      0x9fc8.2753.6e02.8fcf.8b35.2b20.5598.7caa.c9a9.30b0.9b48.\n        47ce.6371.80f6.407d.00dd.0aa5.ed10.ecb7.0f5a.5c3a.e605.\n        c077.4337.17bd.9eda.62a4.79a7.ccb8.44cd.8e64.1ec4.5b6b.\n        1842.ffd8.1dfb.fd07.f2f9.594c.3be3.73c6.2cb6.8438.e434.\n        8d3d.ea6a.5268.72db.a001.2e11.de8c.88d3.0369.4f7a.87e2.\n        860d.0991.25d0.16b9.978a.4bf4.2a1a.e96c.fa50.85b5.9aeb.\n        9dbb.b2d9.a2d1.7bba.66be.e81f.1946.29a8.f5d2.f30c.2499.\n        c1b3.6583.89e1.ee36.e0b4.6092.937e.d74e.2f6f.513e.9615.\n        9c5d.d581.e7ab.fe74.f01b.78b1.ae75.af57.0ec2.adc7.3245.\n        12bf.2314.3967.0806.31dc.cb94.d43f.493c.54a6.0421.c3a1.\n        1c4a.28ac.fc0b.26ca.5870.e576.f7f1.616d.905f.ef41.33bc.\n        df4d.225e.2d56.7fd6.1395.a3f8.c582\n  (cut 3 [a 1] b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(zyrt:un 57)\n  0x12</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(zyrt:un 225)\n  0x0</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(zyrt:un 187)\n  0xff\n  (zyft:un 0xff)\n  187\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "un"
        ]
    },
    {
        "doc": "<h2><code>++ob</code></h2>\n\n<p>Reversible scrambling, v3</p>\n\n<p>A core for performing reversible scrambling operations for the <code>@p</code> phonetic\nbase.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ob\n  ~%  %ob  ..ob\n    ==\n      %fein  fein\n      %fynd  fynd\n    ==\n  |%\n</code></p>\n\n<hr />\n\n<h3><code>++fein:ob</code></h3>\n\n<p>conceal structure, v3</p>\n\n<p><code>+fein</code> conceals planet-sized atoms. The idea is that it should not be trivial\nto tell which planet a star has spawned under.</p>\n\n<p>Permutes atom <code>pyn</code> which fits into 17 to 32 bits, or if <code>pyn</code> fits\ninto 33 to 64 bits, does the same permutation on the low 32 bits only.\nOtherwise, passes <code>pyn</code> through unchanged.</p>\n\n<h4>Accepts</h4>\n\n<p><code>pyn</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fein\n  ~/  %fein\n  |=  pyn=@  ^-  @\n  ?:  &amp;((gte pyn 0x1.0000) (lte pyn 0xffff.ffff))\n    (add 0x1.0000 (feis (sub pyn 0x1.0000)))\n  ?:  &amp;((gte pyn 0x1.0000.0000) (lte pyn 0xffff.ffff.ffff.ffff))\n    =/  lo  (dis pyn 0xffff.ffff)\n    =/  hi  (dis pyn 0xffff.ffff.0000.0000)\n    %+  con  hi\n    $(pyn lo)\n  pyn\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fein:ob 111.103)\n  2.783.373.008</p>\n</blockquote>\n\n<blockquote>\n  <p>(fynd:ob 2.783.373.008)\n  111.103\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fynd:ob</code></h3>\n\n<p>Restore structure, v3</p>\n\n<p>Restores obfuscated values that have been enciphered with <a href=\"#feinob\">+fein</a>.</p>\n\n<p>Permutes atom <code>cry</code> that fits into 17 to 32 bits, or permutes the low 32 bits of\n<code>cry</code> if it fits into 33 to 64 bits. Otherwise, passes the atom through\nunchanged. The inverse of the one applied by <a href=\"#feinob\"><code>+fein</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>cry</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fynd\n  ~/  %fynd\n  |=  cry=@  ^-  @\n  ?:  &amp;((gte cry 0x1.0000) (lte cry 0xffff.ffff))\n    (add 0x1.0000 (tail (sub cry 0x1.0000)))\n  ?:  &amp;((gte cry 0x1.0000.0000) (lte cry 0xffff.ffff.ffff.ffff))\n    =/  lo  (dis cry 0xffff.ffff)\n    =/  hi  (dis cry 0xffff.ffff.0000.0000)\n    %+  con  hi\n    $(cry lo)\n  cry\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fein:ob 111.103)\n  2.783.373.008</p>\n</blockquote>\n\n<blockquote>\n  <p>(fynd:ob 2.783.373.008)\n  111.103\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++feis:ob</code></h3>\n\n<p>Four-round generalised Feistel cipher over the domain [0, 2^32 - 2^16 - 1]</p>\n\n<p>See: Black &amp; Rogaway (2002), Ciphers for arbitrary finite domains.</p>\n\n<p>Inverse of <a href=\"#tailob\"><code>+tail</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>m</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  feis\n  |=  m=@\n  ^-  @\n  (fee 4 0xffff 0x1.0000 (mul 0xffff 0x1.0000) eff m)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(feis:ob 11)\n  776.343.932</p>\n</blockquote>\n\n<blockquote>\n  <p>(tail:ob 776.343.932)\n  11\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tail:ob</code></h3>\n\n<p>Reverse <a href=\"#feisob\"><code>+feis</code></a></p>\n\n<p>Applies the reverse of the Feistel cipher applied by <code>+feis</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>m</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tail\n  |=  m=@\n  ^-  @\n  (feen 4 0xffff 0x1.0000 (mul 0xffff 0x1.0000) eff m)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(feis:ob 11)\n  776.343.932</p>\n</blockquote>\n\n<blockquote>\n  <p>(tail:ob 776.343.932)\n  11\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fee:ob</code></h3>\n\n<p>\"Fe\" in B&amp;R (2002)</p>\n\n<p>A Feistel cipher given the following parameters:</p>\n\n<ul>\n<li><code>r</code>: Number of Feistel rounds.</li>\n<li><code>a</code>, <code>b</code>: Parameters such that <code>ab</code> &gt;= <code>k</code>.</li>\n<li><code>k</code>: Value such that the domain of the cipher is [0, k - 1].</li>\n<li><code>prf</code>: A gate denoting a family of pseudorandom functions indexed by its first argument and taking its second argument as input.</li>\n<li><code>m</code>: An input value in the domain [0, k - 1].</li>\n</ul>\n\n<h4>Accepts</h4>\n\n<p><code>r</code>, <code>a</code>, <code>b</code>, <code>k</code> are an atoms.</p>\n\n<p><code>prft</code> is a gate: <code>$-([j=@ r=@] @)</code>.</p>\n\n<p><code>m</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fee\n  |=  [r=@ a=@ b=@ k=@ prf=$-([j=@ r=@] @) m=@]\n  ^-  @\n  =/  c  (fe r a b prf m)\n  ?:  (lth c k)\n    c\n  (fe r a b prf c)\n</code></p>\n\n<hr />\n\n<h3><code>++feen:ob</code></h3>\n\n<p>Reverse <a href=\"#feeob\"><code>+fee</code></a></p>\n\n<p>\"Fe^-1\" in B&amp;R (2002). Reverses a Feistel cipher constructed with parameters as\ndescribed in <code>+fee</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>r</code>, <code>a</code>, <code>b</code>, and <code>k</code> are atoms.</p>\n\n<p><code>prf</code> is a gate: <code>$-([j=@ r=@] @)</code>.</p>\n\n<p><code>m</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  feen\n  |=  [r=@ a=@ b=@ k=@ prf=$-([j=@ r=@] @) m=@]\n  ^-  @\n  =/  c  (fen r a b prf m)\n  ?:  (lth c k)\n    c\n  (fen r a b prf c)\n</code></p>\n\n<hr />\n\n<h3><code>+fe:ob</code></h3>\n\n<p>An internal function to <a href=\"#feeob\"><code>+fee</code></a>.</p>\n\n<p>Note that this implementation differs slightly from the reference paper to\nsupport some legacy behaviour.</p>\n\n<h4>Accepts</h4>\n\n<p><code>r</code>, <code>a</code>, and <code>b</code> are atoms.</p>\n\n<p><code>prf</code> is a gate: <code>$-([j=@ r=@] @)</code>.</p>\n\n<p><code>m</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fe\n  |=  [r=@ a=@ b=@ prf=$-([j=@ r=@] @) m=@]\n  =/  j  1\n  =/  ell  (mod m a)\n  =/  arr  (div m a)\n  |-  ^-  @\n  ::\n  ?:  (gth j r)\n    ?.  =((mod r 2) 0)\n      (add (mul arr a) ell)\n    ::\n    :: Note that +fe differs from B&amp;R (2002)'s \"fe\" below, as a previous\n    :: implementation of this cipher contained a bug such that certain inputs\n    :: could encipher to the same output.\n    ::\n    :: To correct these problem cases while also preserving the cipher's\n    :: legacy behaviour on most inputs, we check for a problem case (which\n    :: occurs when 'arr' is equal to 'a') and, if detected, use an alternate\n    :: permutation instead.\n    ::\n    ?:  =(arr a)\n      (add (mul arr a) ell)\n    (add (mul ell a) arr)\n  ::\n  =/  f  (prf (sub j 1) arr)\n  ::\n  =/  tmp\n    ?.  =((mod j 2) 0)\n      (mod (add f ell) a)\n    (mod (add f ell) b)\n  ::\n  $(j +(j), ell arr, arr tmp)\n</code></p>\n\n<hr />\n\n<h3><code>++fen:ob</code></h3>\n\n<p>Reverse <a href=\"#feob\"><code>+fe</code></a></p>\n\n<p>This is an internal function to <a href=\"#feenob\"><code>+feen</code></a></p>\n\n<p>Note that this implementation differs slightly from the reference paper\nto support some legacy behaviour.</p>\n\n<h4>Accepts</h4>\n\n<p><code>r</code>, <code>a</code> and <code>b</code> are atoms.</p>\n\n<p><code>prf</code> is a gate: <code>$-([j=@ r=@] @)</code>.</p>\n\n<p><code>m</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fen\n  |=  [r=@ a=@ b=@ prf=$-([j=@ r=@] @) m=@]\n  =/  j  r\n  ::\n  =/  ahh\n    ?.  =((mod r 2) 0)\n      (div m a)\n    (mod m a)\n  ::\n  =/  ale\n    ?.  =((mod r 2) 0)\n      (mod m a)\n    (div m a)\n  ::\n  :: Similar to the comment in +fe, +fen differs from B&amp;R (2002)'s \"fe^-1\"\n  :: here in order to preserve the legacy cipher's behaviour on most inputs.\n  ::\n  :: Here problem cases can be identified by 'ahh' equating with 'a'; we\n  :: correct those cases by swapping the values of 'ahh' and 'ale'.\n  ::\n  =/  ell\n    ?:  =(ale a)\n      ahh\n    ale\n  ::\n  =/  arr\n    ?:  =(ale a)\n      ale\n    ahh\n  ::\n  |-  ^-  @\n  ?:  (lth j 1)\n    (add (mul arr a) ell)\n  =/  f  (prf (sub j 1) ell)\n  ::\n  ::  Note that there is a slight deviation here to avoid dealing with\n  ::  negative values.  We add 'a' or 'b' to arr as appropriate and reduce\n  ::  'f' modulo the same number before performing subtraction.\n  ::\n  =/  tmp\n    ?.  =((mod j 2) 0)\n      (mod (sub (add arr a) (mod f a)) a)\n    (mod (sub (add arr b) (mod f b)) b)\n  ::\n  $(j (sub j 1), ell tmp, arr ell)\n</code></p>\n\n<hr />\n\n<h3><code>++eff:ob</code></h3>\n\n<p>murmur3-based pseudorandom function.</p>\n\n<p>'F' in B&amp;R (2002).</p>\n\n<ul>\n<li><code>j</code> is a number between 0 and 3, selecting the seed with that index in\n<a href=\"#rakuob\">+raku</a>.</li>\n<li><code>r</code> is an atom with a maximum length of two bytes. This is an internal\nfunction of <a href=\"#feisob\"><code>+feis</code></a> and <a href=\"#tailob\"><code>+tail</code></a>.</li>\n</ul>\n\n<h4>Accepts</h4>\n\n<p><code>j</code> is an atom.</p>\n\n<p><code>r</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  eff\n  |=  [j=@ r=@]\n  ^-  @\n  (muk (snag j raku) 2 r)\n</code></p>\n\n<h4>Example</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(eff:ob 0 'ab')\n  1.178.819.349\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++raku:ob</code></h3>\n\n<p>Key list</p>\n\n<p>Produces a list of arbitrary hexademical keys for use with <a href=\"#effob\"><code>+eff</code></a>.</p>\n\n<h4>Produces</h4>\n\n<p>A list of atoms of aura <code>@ux</code> (hexadecimal).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  raku\n  ^-  (list @ux)\n  :~  0xb76d.5eed\n      0xee28.1300\n      0x85bc.ae01\n      0x4b38.7af7\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>raku:ob\n  ~[0xb76d.5eed 0xee28.1300 0x85bc.ae01 0x4b38.7af7]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ob"
        ]
    },
    {
        "doc": "<h2><code>+$coin</code></h2>\n\n<p>Noun-literal syntax cases</p>\n\n<p>Syntax cases for nouns-literal: atoms, jammed nouns, and nestable tuples. Parsed\nand printed using <code>++so</code> and <code>++co</code> cores.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  coin  $~  [%$ %ud 0]\n          $%  [%$ p=dime]\n              [%blob p=*]\n              [%many p=(list coin)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>coin</code>(need (slay '~s1'))\n  [%$ p=[p=~.dr q=18.446.744.073.709.551.616]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>coin</code>(need (slay '0x2b59'))\n  [%$ p=[p=~.ux q=11.097]]</p>\n</blockquote>\n\n<blockquote>\n  <p>~(rend co [%many ~[[%$ %ud 1] [%$ %tas 'a'] [%$ %s -2]]])\n  \".<em>1</em>a<em>-2<strong>\"\n  .</em>1<em>a</em>-2</strong>\n  [1 %a -2]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(jam [3 4])\n  0v2cd1</p>\n</blockquote>\n\n<blockquote>\n  <p>(slay '~02cd1')\n  [~ u=[%blob p=[3 4]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>~02cd1\n  [3 4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$coin"
        ]
    },
    {
        "doc": "<h2><code>+$dime</code></h2>\n\n<p>Aura-atom pair</p>\n\n<p>Used in <code>++coin</code>. Convenience methods\n<a href=\"/reference/hoon/stdlib/4m#scot\"><code>++scot</code></a> and\n<a href=\"/reference/hoon/stdlib/4m#scow\"><code>++scow</code></a> print dimes as <code>++cord</code> and\n<code>++tape</code>, respectively. <a href=\"/reference/hoon/stdlib/4m#slat\"><code>++slat</code></a>,\n<a href=\"/reference/hoon/stdlib/4m#slav\"><code>++slav</code></a>, and\n<a href=\"/reference/hoon/stdlib/4m#slaw\"><code>++slaw</code></a> are used to parse atoms of\nspecific auras.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  dime  [p=@ta q=@]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>+&gt;:(slay '0x123')\n  p=[p=~.ux q=291]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$dime"
        ]
    },
    {
        "doc": "<h2><code>+$edge</code></h2>\n\n<p>Parsing location metadata. Parsing location input <code>p</code> and optional result <code>p.q</code> and parsing continuation <code>q.q</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  edge  [p=hair q=(unit [p=* q=nail])]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*edge\n  [p=[p=0 q=0] q=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(tall:vast [1 1] \"a b\")\n  [p=[p=1 q=3] q=[~ u=[p=[%wing p=~[%a]] q=[p=[p=1 q=2] q=\" b\"]]]]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"#rule\">$rule</a>.</p>\n\n<hr />\n",
        "keys": [
            "$edge"
        ]
    },
    {
        "doc": "<h2><code>+$hair</code></h2>\n\n<p>Parsing line and column</p>\n\n<p>A pair of two <code>@ud</code> used in parsing indicating line and column number.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  hair  [p=@ud q=@ud]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*hair\n  [p=0 q=0]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>hair</code>[1 1]                                               :: parsing starts at [1 1] as a convention.\n  [p=1 q=1]</p>\n</blockquote>\n\n<blockquote>\n  <p>((plus ace) [1 1] \"   --\")\n  [p=[p=1 q=4] q=[~ u=[p=[~~. \"  \"] q=[p=[p=1 q=4] q=\"--\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>hair</code>p:((plus ace) [1 1] \"   --\")\n  [p=1 q=4]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$hair"
        ]
    },
    {
        "doc": "<h2><code>++like</code></h2>\n\n<p>Generic edge</p>\n\n<p>Generates an <a href=\"#edge\"><code>$edge</code></a> with a parsed result set to a specific type.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  like  |*  a=$-(* *)\n          |:  b=`*`[(hair) ~]\n          :-  p=(hair -.b)\n          ^=  q\n          ?@  +.b  ~\n          :-  ~\n          u=[p=(a +&gt;-.b) q=[p=(hair -.b) q=(tape +.b)]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*(like char)\n  [p=[p=0 q=0] q=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(ace [1 1] \" a\")\n  [p=[p=1 q=2] q=[~ u=[p=' ' q=[p=[p=1 q=2] q=\"a\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(like char)</code>(ace [1 1] \" a\")\n  [p=[p=1 q=2] q=[~ [p=~~. q=[p=[p=1 q=2] q=\"a\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(like ,@)</code>(ace [1 1] \" a\")\n  [p=[p=1 q=2] q=[~ u=[p=32 q=[p=[p=1 q=2] q=\"a\"]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "like"
        ]
    },
    {
        "doc": "<h2><code>+$nail</code></h2>\n\n<p>Location, remainder of parsed text</p>\n\n<p>Indicates parsing position <code>p</code>, and remaining text to be parsed <code>q</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  nail  [p=hair q=tape]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>+&lt;:;~(plug cab cab)\n  c=[p=[p=0 q=0] q=\"\"]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$nail"
        ]
    },
    {
        "doc": "<h2><code>+$pint</code></h2>\n\n<p>Parsing range</p>\n\n<p>A <code>$pint</code> is a pair of <a href=\"#hair\"><code>$hair</code></a>, indicating from <code>p</code> to <code>q</code>. Mostly used for\nstack traces.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  pint  [p=[p=@ q=@] q=[p=@ q=@]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!:(!!)                                                    :: !! always produces a crash\n  /~zod/base/~2014.9.20..01.22.04..52e3/:&lt;[1 4].[1 6]&gt;</p>\n</blockquote>\n\n<blockquote>\n  <p><code>pint</code>[[1 4] [1 6]]\n  [p=[p=1 q=4] q=[p=1 q=6]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$pint"
        ]
    },
    {
        "doc": "<h2><code>+$rule</code></h2>\n\n<p>Parsing rule</p>\n\n<p>An empty parsing rule, but used to check that parsing rules match this with <code>_</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  rule  _|:($:nail $:edge)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>([|=(a=nail [p.a ~ u=['a' a]])]:|6 [1 1] \"hi\")\n  [[p=1 q=1] ~ u=['a' p=[p=1 q=1] q=\"hi\"]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$rule"
        ]
    },
    {
        "doc": "<h2><code>+$spot</code></h2>\n\n<p>Stack trace line</p>\n\n<p>The stack trace that is printed after crashing.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n    ++  spot  [p=path q=pint]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!:  !!                                                    :: !! always produces a crash\n  /~zod/base/~2018.8.8..21.42.40..7852:&lt;[1 5].[1 7]&gt;\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$spot"
        ]
    },
    {
        "doc": "<h2><code>+$tone</code></h2>\n\n<p>Nock result, error report</p>\n\n<p>Produces either success (<code>%0</code>), a block with list of requests blocked on (<code>%1</code>),\nor failure with an error report (<code>%2</code>).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tone  $%  [%0 product=*]\n              [%1 block=*]\n              [%2 trace=(list [@ta *])]\n          ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mink [[20 21] 0 3] $~)\n  [%0 product=21]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mink [[1 2] !=(!:(+(.)))] ,~)\n  [%2 trace=~[[~.spot [[1.685.027.454 1.702.060.386 20.241.306.789.072.368.304.935.424.358.627.395.315.601.229.215.400.789.787.861.332.606 0] [1 20] 1 24]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$tone"
        ]
    },
    {
        "doc": "<h2><code>+$toon</code></h2>\n\n<p>Nock result, stack trace</p>\n\n<p>Produces either success (<code>%0</code>), a block with list of requests blocked on (<code>%1</code>),\nor failure with a stack trace (<code>%2</code>).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  toon  $%  [%0 p=*]              ::  success\n              [%1 p=*]              ::  block\n              [%2 p=(list tank)]    ::  stack trace\n          ==                        ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mock [[20 21] 0 3] $~)\n  [%0 p=21]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mock [[1 2] !=(!:(+(.)))] ,~)\n  [ %2\n      p\n    ~[\n      [ %rose\n        p=[p=\":\" q=\"\" r=\"\"]\n        q=[i=[%rose p=[p=\"/\" q=\"/\" r=\"\"] q=[i=[%leaf p=\"~zod\"] t=[i=[%leaf p=\"base\"] t=[i=[%leaf p=\"~2021.10.16..10.03.16..59ee\"] t=~]]]] t=[i=[%leaf p=\"&lt;[1 20].[1 24]&gt;\"] t=~]]\n      ]\n    ]\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$toon"
        ]
    },
    {
        "doc": "<h2><code>++wonk</code></h2>\n\n<p>Product from edge</p>\n\n<p>Pull result out of a <a href=\"#edge\"><code>$edge</code></a>, or crash if there's no result.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wonk  =+  veq=$:edge\n          |@  ++  $  ?~(q.veq !! p.u.q.veq)\n          --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(wide:vast [1 1] \"(add 2 2)\")\n  [p=[p=1 q=10] q=[~ [p=[%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=2] [%sand p=%ud q=2]]] q=[p=[p=1 q=10] q=\"\"]]]]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(wonk (wide:vast [1 1] \"(add 2 2)\"))\n  [%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=2] [%sand p=%ud q=2]]]\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>See also: <a href=\"#edge\"><code>$edge</code></a></p>\n\n<hr />\n",
        "keys": [
            "wonk"
        ]
    },
    {
        "doc": "<h2><code>++po</code></h2>\n\n<p>Phonetic base</p>\n\n<p>Container core for providing phonetic syllables and name generators for the\nUrbit naming system. The two faces, <code>sis</code> and <code>dex</code>, are available to the\ncontained arms.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n~/  %po\n=+  :-  ^=  sis                                       ::  prefix syllables\n    'dozmarbinwansamlitsighidfidlissogdirwacsabwissib\\\n    /rigsoldopmodfoglidhopdardorlorhodfolrintogsilmir\\\n    /holpaslacrovlivdalsatlibtabhanticpidtorbolfosdot\\\n    /losdilforpilramtirwintadbicdifrocwidbisdasmidlop\\\n    /rilnardapmolsanlocnovsitnidtipsicropwitnatpanmin\\\n    /ritpodmottamtolsavposnapnopsomfinfonbanmorworsip\\\n    /ronnorbotwicsocwatdolmagpicdavbidbaltimtasmallig\\\n    /sivtagpadsaldivdactansidfabtarmonranniswolmispal\\\n    /lasdismaprabtobrollatlonnodnavfignomnibpagsopral\\\n    /bilhaddocridmocpacravripfaltodtiltinhapmicfanpat\\\n    /taclabmogsimsonpinlomrictapfirhasbosbatpochactid\\\n    /havsaplindibhosdabbitbarracparloddosbortochilmac\\\n    /tomdigfilfasmithobharmighinradmashalraglagfadtop\\\n    /mophabnilnosmilfopfamdatnoldinhatnacrisfotribhoc\\\n    /nimlarfitwalrapsarnalmoslandondanladdovrivbacpol\\\n    /laptalpitnambonrostonfodponsovnocsorlavmatmipfip'\n    ^=  dex                                           ::  suffix syllables\n    'zodnecbudwessevpersutletfulpensytdurwepserwylsun\\\n    /rypsyxdyrnuphebpeglupdepdysputlughecryttyvsydnex\\\n    /lunmeplutseppesdelsulpedtemledtulmetwenbynhexfeb\\\n    /pyldulhetmevruttylwydtepbesdexsefwycburderneppur\\\n    /rysrebdennutsubpetrulsynregtydsupsemwynrecmegnet\\\n    /secmulnymtevwebsummutnyxrextebfushepbenmuswyxsym\\\n    /selrucdecwexsyrwetdylmynmesdetbetbeltuxtugmyrpel\\\n    /syptermebsetdutdegtexsurfeltudnuxruxrenwytnubmed\\\n    /lytdusnebrumtynseglyxpunresredfunrevrefmectedrus\\\n    /bexlebduxrynnumpyxrygryxfeptyrtustyclegnemfermer\\\n    /tenlusnussyltecmexpubrymtucfyllepdebbermughuttun\\\n    /bylsudpemdevlurdefbusbeprunmelpexdytbyttyplevmyl\\\n    /wedducfurfexnulluclennerlexrupnedlecrydlydfenwel\\\n    /nydhusrelrudneshesfetdesretdunlernyrsebhulryllud\\\n    /remlysfynwerrycsugnysnyllyndyndemluxfedsedbecmun\\\n    /lyrtesmudnytbyrsenwegfyrmurtelreptegpecnelnevfes'\n|%\n</code></p>\n\n<hr />\n\n<h3><code>++ind:po</code></h3>\n\n<p>Parse suffix</p>\n\n<p>Produces the byte of the right-hand syllable <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@tas</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ind  ~/  %ind\n         |=  a=@tas\n         =+  b=0\n         |-  ^-  (unit @)\n         ?:(=(256 b) ~ ?:(=(a (tod b)) [~ b] $(b +(b))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ind:po %zod)\n  [~ 0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ind:po %foo)\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ind:po %wet)\n  [~ 101]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ins:po</code></h3>\n\n<p>Parse prefix</p>\n\n<p>Produces the byte of the left-hand phonetic syllable <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@tas</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ins  ~/  %ins\n         |=  a=@tas\n         =+  b=0\n         |-  ^-  (unit @)\n         ?:(=(256 b) ~ ?:(=(a (tos b)) [~ b] $(b +(b))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ins:po %doz)\n  [~ 0]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ins:po %foo)\n  ~\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ins:po %pit)\n  [~ 242]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tod:po</code></h3>\n\n<p>Fetch suffix</p>\n\n<p>Produces the phonetic suffix syllable from index <code>a</code> within <code>dex</code> as an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tod  ~/  %tod\n         |=(a=@ ?&gt;((lth a 256) (cut 3 [(mul 3 a) 3] dex)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tod:po 0)\n  'zod'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tod:po 100)\n  'syr'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tod:po 255)\n  'fes'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tod:po 256)\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tos:po</code></h3>\n\n<p>Fetch prefix</p>\n\n<p>Produces the phonetic prefix syllable from index <code>a</code> within <code>sis</code> as an atom.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tos  ~/  %tos\n         |=(a=@ ?&gt;((lth a 256) (cut 3 [(mul 3 a) 3] sis)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tos:po 0)\n  'doz'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tos:po 100)\n  'soc'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tos:po 255)\n  'fip'\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(tos:po 256)\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "po"
        ]
    },
    {
        "doc": "<h2><code>++fa</code></h2>\n\n<p>base58check</p>\n\n<p>Container core for base58check (e.g. bitcoin address) functions.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fa\n  =+  key='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n  =/  yek=@ux  ~+\n      =-  yek:(roll (rip 3 key) -)\n      =+  [a=*char b=*@ yek=`@ux`(fil 3 256 0xff)]\n      |.\n      [+(b) (mix yek (lsh [3 `@u`a] (~(inv fe 3) b)))]\n  |%\n</code></p>\n\n<hr />\n\n<h3><code>++cha:fa</code></h3>\n\n<p>Decode base58check character</p>\n\n<p>Check whether character <code>a</code> is valid in base58check encoding, producing a <code>unit</code> of its decoded value if it's valid, and a null <code>unit</code> if it's not.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>char</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @uF)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cha  |=(a=char `(unit @uF)`=+(b=(cut 3 [`@`a 1] yek) ?:(=(b 0xff) ~ `b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cha:fa 'Z')\n  [~ 32]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cha:fa 'n')\n  [~ 45]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cha:fa 'l')\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tok:fa</code></h3>\n\n<p>Compute base58check checksum</p>\n\n<p>Compute the base58check checksum of <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@ux</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@ux</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tok\n  |=  a=@ux  ^-  @ux\n  =+  b=(pad a)\n  =-  (~(net fe 5) (end [3 4] (shay 32 -)))\n  (shay (add b (met 3 a)) (lsh [3 b] (swp 3 a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(tok:fa 0xdead.beef)\n  0x938b.8b0c\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++pad:fa</code></h3>\n\n<p>base58check padding bytes</p>\n\n<p>Compute the number of bytes of 0s needed to pad <code>a</code> to 21 bytes, if it's less\nthan 21 bytes.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code> - a value without its base58check checksum.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pad  |=(a=@ =+(b=(met 3 a) ?:((gte b 21) 0 (sub 21 b))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(pad:fa 0xdead.beef)\n  17\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++enc:fa</code></h3>\n\n<p>encode base58check</p>\n\n<p>Compute and append checksum to <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@ux</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@ux</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  enc  |=(a=@ux `@ux`(mix (lsh [3 4] a) (tok a)))\n</code></p>\n\n<h4>Example</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(enc:fa 0xdead.beef)\n  0xdead.beef.938b.8b0c\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++den:fa</code></h3>\n\n<p>decode base58check</p>\n\n<p>Check checksum of <code>a</code>, return a <code>unit</code> of <code>a</code> sans the checksum if successful,\nor a null <code>unit</code> otherwise.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@ux</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @ux)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  den\n  |=  a=@ux  ^-  (unit @ux)\n  =+  b=(rsh [3 4] a)\n  ?.  =((tok b) (end [3 4] a))\n    ~\n  `b\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(den:fa 0xdead.beef.938b.8b0c)\n  [~ 0xdead.beef]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(den:fa 0xdead.beef.1111.1111)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fa"
        ]
    },
    {
        "doc": "<h2><code>++at</code></h2>\n\n<p>Basic printing</p>\n\n<p>Container core for basic atom printing functions.</p>\n\n<p><strong>Note that these are largely deprecated, using outdated syntax, character\nmappings and encodings, and should generally not be used.</strong></p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  at\n  |_  a=@\n</code></p>\n\n<hr />\n\n<h3><code>++r:at</code></h3>\n\n<p>Print term, number or hex</p>\n\n<p>If <code>a</code> is composed of the letters <code>a</code> through <code>z</code> and <code>-</code>, print as <code>@tas</code>\nsyntax. If <code>a</code> is an atom of two bytes or less, print as an integer with\ncomma-separated thousands. Otherwise, print <code>a</code> as <code>@ux</code> syntax.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  r\n  ?:  ?&amp;  (gte (met 3 a) 2)\n          |-\n          ?:  =(0 a)\n            &amp;\n          =+  vis=(end 3 a)\n          ?&amp;  ?|(=('-' vis) ?&amp;((gte vis 'a') (lte vis 'z')))\n              $(a (rsh 3 a))\n          ==\n      ==\n    rtam\n  ?:  (lte (met 3 a) 2)\n    rud\n  rux\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(r at 'foo-bar')\n  \"%foo-bar\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(r at 0xbeef)\n  \"48,879\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(r at 0xdead.beef)\n  \"0xdead-beef\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rf:at</code></h3>\n\n<p>Print loobean</p>\n\n<p>If <code>a</code> is a loobean, print as <code>|</code>/<code>&amp;</code>, otherwise crash.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rf    `tape`[?-(a %&amp; '&amp;', %| '|', * !!) ~]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rf at %.y)\n  \"&amp;\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rf at %.n)\n  \"|\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rf at 'foo')\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rn:at</code></h3>\n\n<p>Print null</p>\n\n<p>If <code>a</code> is null, print <code>~</code>, otherwise crash.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rn    `tape`[?&gt;(=(0 a) '~') ~]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rn at ~)\n  \"~\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rn at 'foo')\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<h3><code>++rt:at</code></h3>\n\n<p>Print cord, including escape characters</p>\n\n<p>Print <code>a</code> with <code>cord</code> syntax, including escape characters.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rt    `tape`['\\'' (weld (mesc (trip a)) `tape`['\\'' ~])]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rt at 'foo')\n  \"'foo'\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rt at 'fo\\o')\n  \"'fo\\\\o'\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rt at 'fo\\'o')\n  \"'fo\\0x27/o'\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rta:at</code></h3>\n\n<p>Same as <code>++rt:at</code></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rta   rt\n</code></p>\n\n<hr />\n\n<h3><code>++rtam:at</code></h3>\n\n<p>Print cord with <code>@tas</code> syntax</p>\n\n<p>Treat <code>a</code> as <code>cord</code>, print it with <code>%</code> prefix.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rtam  `tape`['%' (trip a)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rtam at 'foo')\n  \"%foo\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rtam at '12')\n  \"%12\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rtam at '!!!')\n  \"%!!!\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rub:at</code></h3>\n\n<p>Print binary</p>\n\n<p>Print <code>a</code> as <code>@ub</code> syntax, except with <code>-</code> separators rather than <code>.</code> separators.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rub   `tape`['0' 'b' (rum 2 ~ |=(b=@ (add '0' b)))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rub at 0xbeef)\n  \"0b1011-1110-1110-1111\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rud:at</code></h3>\n\n<p>Print atom as integer</p>\n\n<p>Print atom <code>a</code> as an integer, with commas separating thousands.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rud   (rum 10 ~ |=(b=@ (add '0' b)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rud at 0xbeef)\n  \"48,879\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rum:at</code></h3>\n\n<p>Print base-n</p>\n\n<p>Print <code>a</code> as base <code>b</code> with suffix <code>c</code> and using gate <code>d</code> to convert blocks to\ncharacters. Each set of four characters will be separated by <code>-</code>, except for\nbase 10 which will be printed with commas separating thousands.</p>\n\n<h4>Accepts</h4>\n\n<ul>\n<li><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code></li>\n<li><code>b</code> is a <code>@</code>, denoting the the base.</li>\n<li><code>c</code> is a <code>tape</code>, and will be appended to the end of the result.</li>\n<li><code>d</code> is a <code>gate</code> that takes <code>@</code> and produces <code>@</code>.</li>\n</ul>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rum\n  |=  [b=@ c=tape d=$-(@ @)]\n  ^-  tape\n  ?:  =(0 a)\n    [(d 0) c]\n  =+  e=0\n  |-  ^-  tape\n  ?:  =(0 a)\n    c\n  =+  f=&amp;(!=(0 e) =(0 (mod e ?:(=(10 b) 3 4))))\n  %=  $\n    a  (div a b)\n    c  [(d (mod a b)) ?:(f [?:(=(10 b) ',' '-') c] c)]\n    e  +(e)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(rum at 0xdead.beef) 10 ~ |=(b=@ (add '0' b)))\n  \"3,735,928,559\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(rum at 0xdead.beef) 10 \" m/s\" |=(b=@ (add '0' b)))\n  \"3,735,928,559 m/s\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(rum at 0xdead.beef) 2 ~ |=(b=@ (add '0' b)))\n  \"1101-1110-1010-1101-1011-1110-1110-1111\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rup:at</code></h3>\n\n<p>Print <code>@p</code> (outdated)</p>\n\n<p>Print <code>a</code> as an <code>@p</code>, but with outdated syntax and number&lt;->syllable mapping. This\nfunction almost certainly should not be used.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rup\n  =+  b=(met 3 a)\n  ^-  tape\n  :-  '-'\n  |-  ^-  tape\n  ?:  (gth (met 5 a) 1)\n    %+  weld\n      $(a (rsh 5 a), b (sub b 4))\n    `tape`['-' '-' $(a (end 5 a), b 4)]\n  ?:  =(0 b)\n    ['~' ~]\n  ?:  (lte b 1)\n    (trip (tos:po a))\n  |-  ^-  tape\n  ?:  =(2 b)\n    =+  c=(rsh 3 a)\n    =+  d=(end 3 a)\n    (weld (trip (tod:po c)) (trip (tos:po (mix c d))))\n  =+  c=(rsh [3 2] a)\n  =+  d=(end [3 2] a)\n  (weld ^$(a c, b (met 3 c)) `tape`['-' $(a (mix c d), b 2)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rup at 0xdead.beef)\n  \"-rylsal-sellac\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rup at ~sampel-palnet)\n  \"-sellod-lebdiv\"\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rup at ~zod)\n  \"-~\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ruv:at</code></h3>\n\n<p>Print base-64</p>\n\n<p>Print <code>a</code> as <strong>outdated</strong> base-64 syntax, with <code>0v</code> rather than <code>0w</code> prefix,\ndifferent character mappings and separators.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ruv\n  ^-  tape\n  :+  '0'\n    'v'\n  %^    rum\n      64\n    ~\n  |=  b=@\n  ?:  =(63 b)\n    '+'\n  ?:  =(62 b)\n    '-'\n  ?:((lth b 26) (add 65 b) ?:((lth b 52) (add 71 b) (sub b 4)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ruv at 0xdead.beef)\n  \"0vDe-rb7v\"\n  ```</p>\n</blockquote>\n\n<p>Note this is how it should be rendered:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>0xdead.beef\n  0w3.uHrXL\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rux:at</code></h3>\n\n<p>Print hexadecimal</p>\n\n<p>Print <code>a</code> as <code>@ux</code> except with <code>-</code> separators rather than <code>.</code>s.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@</code>, and is the sample of <code>++at</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rux  `tape`['0' 'x' (rum 16 ~ |=(b=@ (add b ?:((lth b 10) 48 87))))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rux at 0xdead.beef)\n  \"0xdead-beef\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "at"
        ]
    },
    {
        "doc": "<h2><code>++cass</code></h2>\n\n<p>To lowercase</p>\n\n<p>Turn all occurences of uppercase letters in any <code>tape</code> into lowercase\nletters. Returns a <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vib</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cass\n  |=  vib=tape\n  ^-  tape\n  (turn vib |=(a=@ ?.(&amp;((gte a 'A') (lte a 'Z')) a (add 32 a))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cass \"JOHN DOE\")\n  \"john doe\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(cass \"abc ABC 123 !@#\")\n  \"abc abc 123 !@#\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(cass \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsQqRrVvWwXxYyZz\")\n  \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssqqrrvvwwxxyyzz\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cass"
        ]
    },
    {
        "doc": "<h2><code>++crip</code></h2>\n\n<p>Tape to cord</p>\n\n<p>Produce a <code>cord</code> from a <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>cord</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  crip  |=(a=tape `@t`(rap 3 a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(crip \"john doe\")\n  'john doe'</p>\n</blockquote>\n\n<blockquote>\n  <p>(crip \"abc 123 !@#\")\n  'abc 123 !@#'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ud</code>(crip \"abc\")\n  6.513.249\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "crip"
        ]
    },
    {
        "doc": "<h2><code>++cuss</code></h2>\n\n<p>To uppercase</p>\n\n<p>Turn all occurences of lowercase letters in any <code>tape</code> into uppercase\nletters. Returns a <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vib</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cuss\n  |=  vib=tape\n  ^-  tape\n  (turn vib |=(a=@ ?.(&amp;((gte a 'a') (lte a 'z')) a (sub a 32))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cuss \"john doe\")\n  \"JOHN DOE\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(cuss \"abc ABC 123 !@#\")\n  \"ABC ABC 123 !@#\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(cuss \"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsQqRrVvWwXxYyZz\")\n  \"AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSQQRRVVWWXXYYZZ\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cuss"
        ]
    },
    {
        "doc": "<h2><code>++mesc</code></h2>\n\n<p>Escape special chars</p>\n\n<p>Escape special characters.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vib</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mesc\n  |=  vib=tape\n  ^-  tape\n  ?~  vib\n    ~\n  ?:  =('\\\\' i.vib)\n    ['\\\\' '\\\\' $(vib t.vib)]\n  ?:  ?|((gth i.vib 126) (lth i.vib 32) =(`@`39 i.vib))\n    ['\\\\' (welp ~(rux at i.vib) '/' $(vib t.vib))]\n  [i.vib $(vib t.vib)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mesc \"ham lus\")\n  \"ham lus\"\n  (mesc \"bas\\hur\")\n  \"bas\\\\hur\"\n  (mesc \"as'sa\u00df\")\n  \"as\\0x27/sa\\0xc3/\\0x9f/\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mesc"
        ]
    },
    {
        "doc": "<h2><code>++runt</code></h2>\n\n<p>Prepend <code>n</code> times</p>\n\n<p>Add <code>a</code> repetitions of character <code>b</code> to the head of <code>tape</code> <code>c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>[a b]</code> are atoms.</p>\n\n<p><code>c</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  runt\n  |=  [[a=@ b=@] c=tape]\n  ^-  tape\n  ?:  =(0 a)\n    c\n  [b $(a (dec a))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(runt [2 '/'] \"ham\")\n  \"//ham\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(runt [10 'a'] \"\")\n  \"aaaaaaaaaa\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "runt"
        ]
    },
    {
        "doc": "<h2><code>++sand</code></h2>\n\n<p>Soft-cast by aura</p>\n\n<p>Check characters in <code>b</code> are valid for aura <code>a</code>. Produce a <code>unit</code> of <code>a</code> if valid\nand a null <code>unit</code> if not. Takes <code>a</code> and produces a gate that takes <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@ta</code>, and specifies the aura like <code>%tas</code> or <code>%ta</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sand\n  |=  a=@ta\n  (flit (sane a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(unit @ta)</code>((sand %ta) 'sym-som')\n  [~ ~.sym-som]\n  ```</p>\n</blockquote>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(unit @ta)</code>((sand %ta) 'err!')\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sand"
        ]
    },
    {
        "doc": "<h2><code>++sane</code></h2>\n\n<p>Check aura validity</p>\n\n<p>Check validity of <code>a</code> by aura <code>b</code>. Takes <code>b</code> and produces a gate that takes <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@ta</code>, and specifies the aura like <code>%tas</code> or <code>%ta</code>.</p>\n\n<p><code>b</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>?</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sane\n  |=  a=@ta\n  |=  b=@  ^-  ?\n  ?.  =(%t (end 3 a))\n    ::  XX more and better sanity\n    ::\n    &amp;\n  =+  [inx=0 len=(met 3 b)]\n  ?:  =(%tas a)\n    |-  ^-  ?\n    ?:  =(inx len)  &amp;\n    =+  cur=(cut 3 [inx 1] b)\n    ?&amp;  ?|  &amp;((gte cur 'a') (lte cur 'z'))\n            &amp;(=('-' cur) !=(0 inx) !=(len inx))\n            &amp;(&amp;((gte cur '0') (lte cur '9')) !=(0 inx))\n        ==\n        $(inx +(inx))\n    ==\n  ?:  =(%ta a)\n    |-  ^-  ?\n    ?:  =(inx len)  &amp;\n    =+  cur=(cut 3 [inx 1] b)\n    ?&amp;  ?|  &amp;((gte cur 'a') (lte cur 'z'))\n            &amp;((gte cur '0') (lte cur '9'))\n            |(=('-' cur) =('~' cur) =('_' cur) =('.' cur))\n        ==\n        $(inx +(inx))\n    ==\n  |-  ^-  ?\n  ?:  =(0 b)  &amp;\n  =+  cur=(end 3 b)\n  ?:  &amp;((lth cur 32) !=(10 cur))  |\n  =+  len=(teff cur)\n  ?&amp;  |(=(1 len) =+(i=1 |-(|(=(i len) &amp;((gte (cut 3 [i 1] b) 128) $(i +(i)))))))\n      $(b (rsh [3 len] b))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((sane %tas) %mol)\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>((sane %tas) 'lam')\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>((sane %tas) 'more ace')\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sane"
        ]
    },
    {
        "doc": "<h2><code>++taft</code></h2>\n\n<p>UTF8 to UTF32</p>\n\n<p>Convert <code>cord</code> <code>a</code> to a UTF32 <code>@c</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@t</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>@c</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  taft\n  |=  a=@t\n  ^-  @c\n  %+  rap  5\n  |-  ^-  (list @c)\n  =+  b=(teff a)\n  ?:  =(0 b)  ~\n  =+  ^=  c\n      %+  can  0\n      %+  turn\n        ^-  (list [p=@ q=@])\n        ?+  b  !!\n          %1  [[0 7] ~]\n          %2  [[8 6] [0 5] ~]\n          %3  [[16 6] [8 6] [0 4] ~]\n          %4  [[24 6] [16 6] [8 6] [0 3] ~]\n        ==\n      |=([p=@ q=@] [q (cut 0 [p q] a)])\n  ?&gt;  =((tuft c) (end [3 b] a))\n  [c $(a (rsh [3 b] a))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(taft 'foobar')\n  ~-foobar</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>'foobar'\n  0x7261.626f.6f66</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>~-foobar\n  0x72.0000.0061.0000.0062.0000.006f.0000.006f.0000.0066\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "taft"
        ]
    },
    {
        "doc": "<h2><code>++teff</code></h2>\n\n<p>UTF8 Length</p>\n\n<p>Produces the number of utf8 bytes of <code>a</code>, a single <code>@t</code> character. If <code>a</code>\ncontains more than one character, it will produce the byte-length of the first\none.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@t</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  teff\n  |=  a=@t  ^-  @\n  =+  b=(end 3 a)\n  ?:  =(0 b)\n    ?&gt;(=(`@`0 a) 0)\n  ?&gt;  |((gte b 32) =(10 b))\n  ?:((lte b 127) 1 ?:((lte b 223) 2 ?:((lte b 239) 3 4)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(teff 'a')\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(teff '\u00df')\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(teff 'a\u00df')\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "teff"
        ]
    },
    {
        "doc": "<h2><code>++trim</code></h2>\n\n<p>Tape split</p>\n\n<p>Split first <code>a</code> characters off <code>tape</code> <code>b</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<p><code>b</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A cell of <code>tape</code>s, <code>p</code> and <code>q</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  trim\n  |=  [a=@ b=tape]\n  ^-  [p=tape q=tape]\n  ?~  b\n    [~ ~]\n  ?:  =(0 a)\n    [~ b]\n  =+  c=$(a (dec a), b t.b)\n  [[i.b p.c] q.c]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(trim 5 \"lasok termun\")\n  [p=\"lasok\" q=\" termun\"]</p>\n</blockquote>\n\n<blockquote>\n  <p>(trim 5 \"zam\")\n  [p=\"zam\" q=\"\"]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "trim"
        ]
    },
    {
        "doc": "<h2><code>++trip</code></h2>\n\n<p>Cord to tape</p>\n\n<p>Produce a <code>tape</code> from <code>cord</code> <code>a</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  trip\n  ~/  %trip\n  |=  a=@  ^-  tape\n  ?:  =(0 (met 3 a))\n    ~\n  [^-(@ta (end 3 a)) $(a (rsh 3 a))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(trip 'john doe')\n  \"john doe\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(trip 'abc 123 !@#')\n  \"abc 123 !@#\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(trip 'abc')\n  \"abc\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "trip"
        ]
    },
    {
        "doc": "<h2><code>++tuba</code></h2>\n\n<p>UTF8 tape to UTF32 tape</p>\n\n<p>Convert <code>tape</code> to a <code>list</code> of codepoints (<code>@c</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(list @c)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tuba\n  |=  a=tape\n  ^-  (list @c)\n  (rip 5 (taft (rap 3 a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(tuba \"\u044f \u0442\u0443\u0442\")\n  ~[~-~44f. ~-. ~-~442. ~-~443. ~-~442.]</p>\n</blockquote>\n\n<blockquote>\n  <p>(tuba \"chars\")\n  ~[~-c ~-h ~-a ~-r ~-s]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tuba"
        ]
    },
    {
        "doc": "<h2><code>++tufa</code></h2>\n\n<p>UTF32 to UTF8 tape</p>\n\n<p>Wrap a <code>list</code> of utf32 codepoints into a utf8 <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>(list @c)</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tufa\n  |=  a=(list @c)\n  ^-  tape\n  ?~  a  \"\"\n  (weld (rip 3 (tuft i.a)) $(a t.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(tufa ~[~-~44f. ~-. ~-~442. ~-~443. ~-~442.])\n  \"\u044f \u0442\u0443\u0442\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(tufa ((list @c) ~[%a %b 0xb1 %c]))\n  \"ab\u00b1c\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tufa"
        ]
    },
    {
        "doc": "<h2><code>++tuft</code></h2>\n\n<p>UTF32 to UTF8</p>\n\n<p>Convert <code>@c</code> to <code>cord</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@c</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>cord</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tuft\n  |=  a=@c\n  ^-  @t\n  %+  rap  3\n  |-  ^-  (list @)\n  ?:  =(`@`0 a)\n    ~\n  =+  b=(end 5 a)\n  =+  c=$(a (rsh 5 a))\n  ?:  (lte b 0x7f)\n    [b c]\n  ?:  (lte b 0x7ff)\n    :*  (mix 0b1100.0000 (cut 0 [6 5] b))\n        (mix 0b1000.0000 (end [0 6] b))\n        c\n    ==\n  ?:  (lte b 0xffff)\n    :*  (mix 0b1110.0000 (cut 0 [12 4] b))\n        (mix 0b1000.0000 (cut 0 [6 6] b))\n        (mix 0b1000.0000 (end [0 6] b))\n        c\n    ==\n  :*  (mix 0b1111.0000 (cut 0 [18 3] b))\n      (mix 0b1000.0000 (cut 0 [12 6] b))\n      (mix 0b1000.0000 (cut 0 [6 6] b))\n      (mix 0b1000.0000 (end [0 6] b))\n      c\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(tuft ~-foobar)\n  'foobar'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>~-foobar\n  0x72.0000.0061.0000.0062.0000.006f.0000.006f.0000.0066</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>'foobar'\n  0x7261.626f.6f66\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tuft"
        ]
    },
    {
        "doc": "<h2><code>++wack</code></h2>\n\n<p>Knot escape</p>\n\n<p>Escape <code>knot</code> <code>~</code> as <code>~~</code> and <code>_</code> as <code>~-</code>. Used for printing.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>knot</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>knot</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wack\n  |=  a=@ta\n  ^-  @ta\n  =+  b=(rip 3 a)\n  %+  rap  3\n  |-  ^-  tape\n  ?~  b\n    ~\n  ?:  =('~' i.b)  ['~' '~' $(b t.b)]\n  ?:  =('_' i.b)  ['~' '-' $(b t.b)]\n  [i.b $(b t.b)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(wack '~20_sam~')\n  ~.~~20~-sam~~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(wack '~20_sam~')\n  '~~20~-sam~~'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "wack"
        ]
    },
    {
        "doc": "<h2><code>++wick</code></h2>\n\n<p>Knot unescape</p>\n\n<p>Unescape <code>knot</code> <code>~~</code> as <code>~</code> and <code>~-</code> as <code>_</code>. Produces a <code>unit</code>, which is null if\nthe <code>knot</code> contains unescaped <code>~</code> characters.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @ta)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wick\n  |=  a=@\n  ^-  (unit @ta)\n  =+  b=(rip 3 a)\n  =-  ?^(b ~ (some (rap 3 (flop c))))\n  =|  c=tape\n  |-  ^-  [b=tape c=tape]\n  ?~  b  [~ c]\n  ?.  =('~' i.b)\n    $(b t.b, c [i.b c])\n  ?~  t.b  [b ~]\n  ?-  i.t.b\n    %'~'  $(b t.t.b, c ['~' c])\n    %'-'  $(b t.t.b, c ['_' c])\n    @     [b ~]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(wick ~.~~20~-sam~~)\n  [~ ~.~20_sam~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(wick ~.~20~-sam~~)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "wick"
        ]
    },
    {
        "doc": "<h2><code>++woad</code></h2>\n\n<p>Unescape cord</p>\n\n<p>Unescape <code>knot</code>-encoded <code>cord</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>@ta</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>cord</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  woad\n  |=  a=@ta\n  ^-  @t\n  %+  rap  3\n  |-  ^-  (list @)\n  ?:  =(`@`0 a)\n    ~\n  =+  b=(end 3 a)\n  =+  c=(rsh 3 a)\n  ?:  =('.' b)\n    [' ' $(a c)]\n  ?.  =('~' b)\n    [b $(a c)]\n  =&gt;  .(b (end 3 c), c (rsh 3 c))\n  ?+  b  =-  (weld (rip 3 (tuft p.d)) $(a q.d))\n         ^=  d\n         =+  d=0\n         |-  ^-  [p=@ q=@]\n         ?:  =('.' b)\n           [d c]\n         ?&lt;  =(0 c)\n         %=    $\n            b  (end 3 c)\n            c  (rsh 3 c)\n            d  %+  add  (mul 16 d)\n               %+  sub  b\n               ?:  &amp;((gte b '0') (lte b '9'))  48\n               ?&gt;(&amp;((gte b 'a') (lte b 'z')) 87)\n         ==\n    %'.'  ['.' $(a c)]\n    %'~'  ['~' $(a c)]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(woad ~.foo.bar~21.)\n  'foo bar!'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "woad"
        ]
    },
    {
        "doc": "<h2><code>++wood</code></h2>\n\n<p>Escape cord</p>\n\n<p>Escape <code>cord</code> <code>a</code> so it can be encoded in a <code>knot</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>cord</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>knot</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wood\n  |=  a=@t\n  ^-  @ta\n  %+  rap  3\n  |-  ^-  (list @)\n  ?:  =(`@`0 a)\n    ~\n  =+  b=(teff a)\n  =+  c=(taft (end [3 b] a))\n  =+  d=$(a (rsh [3 b] a))\n  ?:  ?|  &amp;((gte c 'a') (lte c 'z'))\n          &amp;((gte c '0') (lte c '9'))\n          =(`@`'-' c)\n      ==\n    [c d]\n  ?+  c\n    :-  '~'\n    =+  e=(met 2 c)\n    |-  ^-  tape\n    ?:  =(0 e)\n      ['.' d]\n    =.  e  (dec e)\n    =+  f=(rsh [2 e] c)\n    [(add ?:((lte f 9) 48 87) f) $(c (end [2 e] c))]\n  ::\n    %' '  ['.' d]\n    %'.'  ['~' '.' d]\n    %'~'  ['~' '~' d]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(wood 'foo bar!')\n  ~.foo.bar~21.\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "wood"
        ]
    },
    {
        "doc": "<h2><code>++wash</code></h2>\n\n<p>Render tank at width</p>\n\n<p>Render <code>tac</code> with indent <code>tab</code> and maximum width <code>edg</code>. If <code>tac</code> cannot be\nrendered in-line in less than <code>tac</code> characters, it will be split into multiple\nlines if possible. If <code>tac</code> cannot be made to fit, <code>wash</code> will crash.</p>\n\n<h4>Accepts</h4>\n\n<p><code>[tab=@ edg=@]</code> - <code>tab</code> is the number of characters of indentation and <code>edge</code> is\nthe maximum number of characters of width.</p>\n\n<p><code>tac</code> is a <code>tank</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>wall</code> (list of <code>tape</code>s).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wash\n  |=  [[tab=@ edg=@] tac=tank]  ^-  wall\n  (~(win re tac) tab edg)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=rose <code>tank</code>[%rose [\" \" \"[\" \"]\"] ~['abc' 'def' 'ghi']]</p>\n</blockquote>\n\n<blockquote>\n  <p>((slog (crip (of-wall:format (wash [0 80] rose))) ~) ~)\n  [abc def ghi]</p>\n</blockquote>\n\n<blockquote>\n  <p>((slog (crip (of-wall:format (wash [0 8] rose))) ~) ~)\n  [ abc\n    def\n    ghi\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>((slog (crip (of-wall:format (wash [3 15] rose))) ~) ~)\n     [ abc\n       def\n       ghi\n     ]\n  ```</p>\n</blockquote>\n",
        "keys": [
            "wash"
        ]
    },
    {
        "doc": "<h2><code>++re</code></h2>\n\n<p>Pretty-printing engine</p>\n\n<p>Container core for a pretty-printing engine that accepts a <code>tank</code> sample and contains arms that perform computation on it.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tac</code> is a <code>tank</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  re\n  |_  tac=tank\n</code></p>\n\n<hr />\n\n<h3><code>++ram:re</code></h3>\n\n<p>Flatten to tape</p>\n\n<p>Flatten <code>tank</code> out into a <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tac</code> is a <code>tank</code>, taken from sample of <code>++re</code> core.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ram\n  ^-  tape\n  ?@  tac\n    (trip tac)\n  ?-    -.tac\n      %leaf  p.tac\n  ::\n  ::  flat %palm rendered as %rose with welded openers\n  ::\n      %palm\n    =*  mid  p.p.tac\n    =*  for  (weld q.p.tac r.p.tac)\n    =*  end  s.p.tac\n    ram(tac [%rose [mid for end] q.tac])\n  ::\n  ::  flat %rose rendered with open/mid/close\n  ::\n      %rose\n    =*  mid  p.p.tac\n    =*  for  q.p.tac\n    =*  end  r.p.tac\n    =*  lit  q.tac\n    %+  weld\n      for\n    |-  ^-  tape\n    ?~  lit\n      end\n    %+  weld\n      ram(tac i.lit)\n    =*  voz  $(lit t.lit)\n    ?~(t.lit voz (weld mid voz))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(ram re leaf+\"foo\")\n  \"foo\"</p>\n</blockquote>\n\n<blockquote>\n  <p>~(ram re [%rose [\" \" \"[\" \"]\"] ~['abc' 'def' 'ghi']])\n  \"[abc def ghi]\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++win:re</code></h3>\n\n<p>Render at indent</p>\n\n<p>Render at indent level <code>tab</code> and width <code>edg</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tac</code> is a <code>tank</code>, taken from sample of <code>++re</code> core.</p>\n\n<p><code>tab</code> and <code>edg</code> are atoms.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>wall</code> (list of <code>tape</code>).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  win\n  |=  [tab=@ud edg=@ud]\n  ::  output stack\n  ::\n  =|  lug=wall\n  |^  ^-  wall\n      ?@  tac\n        (rig (trip tac))\n      ?-    -.tac\n          %leaf  (rig p.tac)\n      ::\n          %palm\n        =/  hom  ram\n        ?:  (lte (lent hom) (sub edg tab))\n          (rig hom)\n        ::\n        =*  for  q.p.tac\n        =*  lit  q.tac\n        ?~  lit\n          (rig for)\n        ?~  t.lit\n          =:  tab  (add 2 tab)\n              lug  $(tac i.lit)\n            ==\n          (rig for)\n        ::\n        =&gt;  .(lit `(list tank)`lit)\n        =/  lyn  (mul 2 (lent lit))\n        =.  lug\n          |-  ^-  wall\n          ?~  lit\n            lug\n          =/  nyl  (sub lyn 2)\n          %=  ^$\n            tac  i.lit\n            tab  (add tab nyl)\n            lug  $(lit t.lit, lyn nyl)\n          ==\n        (wig for)\n      ::\n          %rose\n        =/  hom  ram\n        ?:  (lte (lent hom) (sub edg tab))\n          (rig hom)\n        ::\n        =*  for  q.p.tac\n        =*  end  r.p.tac\n        =*  lit  q.tac\n        =.  lug\n          |-  ^-  wall\n          ?~  lit\n            ?~(end lug (rig end))\n          %=  ^$\n            tac  i.lit\n            tab  (mod (add 2 tab) (mul 2 (div edg 3)))\n            lug  $(lit t.lit)\n          ==\n        ?~(for lug (wig for))\n      ==\n  ::  +rig: indent tape and cons with output stack\n  ::\n  ++  rig\n    |=  hom=tape\n    ^-  wall\n    [(runt [tab ' '] hom) lug]\n  ::  +wig: indent tape and cons with output stack\n  ::\n  ::    joined with the top line if whitespace/indentation allow\n  ::\n  ++  wig\n    |=  hom=tape\n    ^-  wall\n    ?~  lug\n      (rig hom)\n    =/  wug  :(add 1 tab (lent hom))\n    ?.  =+  mir=i.lug\n        |-  ^-  ?\n        ?~  mir  |\n        ?|  =(0 wug)\n            ?&amp;(=(' ' i.mir) $(mir t.mir, wug (dec wug)))\n        ==\n      (rig hom)       :: ^ XX regular form?\n    :_  t.lug\n    %+  runt  [tab ' ']\n    (weld hom `tape`[' ' (slag wug i.lug)])\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=rose <code>tank</code>[%rose [\" \" \"[\" \"]\"] ~['abc' 'def' 'ghi']]</p>\n</blockquote>\n\n<blockquote>\n  <p>((slog (crip (of-wall:format (~(win re rose) 0 80))) ~) ~)\n  [abc def ghi]</p>\n</blockquote>\n\n<blockquote>\n  <p>((slog (crip (of-wall:format (~(win re rose) 3 80))) ~) ~)\n     [abc def ghi]</p>\n</blockquote>\n\n<blockquote>\n  <p>((slog (crip (of-wall:format (~(win re rose) 0 10))) ~) ~)\n  [ abc\n    def\n    ghi\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>((slog (crip (of-wall:format (~(win re rose) 3 15))) ~) ~)\n     [ abc\n       def\n       ghi\n     ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "re"
        ]
    },
    {
        "doc": "<h2><code>++show</code></h2>\n\n<p>Pretty-printer (deprecated)</p>\n\n<p>Pretty prints noun <code>vem</code>, producing a <code>tank</code>. This function is deprecated and in\nmost cases produces outdated syntax or incorrect results.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vem</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tank</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  show\n  |=  vem=*\n  |^  ^-  tank\n      ?:  ?=(@ vem)\n        [%leaf (mesc (trip vem))]\n      ?-    vem\n          [s=~ c=*]\n        [%leaf '\\'' (weld (mesc (tape +.vem)) `tape`['\\'' ~])]\n      ::\n          [s=%a c=@]        [%leaf (mesc (trip c.vem))]\n          [s=%b c=*]        (shop c.vem |=(a=@ ~(rub at a)))\n          [s=[%c p=@] c=*]\n        :+  %palm\n          [['.' ~] ['-' ~] ~ ~]\n        [[%leaf (mesc (trip p.s.vem))] $(vem c.vem) ~]\n      ::\n          [s=%d c=*]        (shop c.vem |=(a=@ ~(rud at a)))\n          [s=%k c=*]        (tank c.vem)\n          [s=%h c=*]\n        :+  %rose\n          [['/' ~] ['/' ~] ~]\n        =+  yol=((list @ta) c.vem)\n        (turn yol |=(a=@ta [%leaf (trip a)]))\n      ::\n          [s=%l c=*]        (shol c.vem)\n          [s=%o c=*]\n        %=    $\n            vem\n          :-  [%m '%h::[%d %d].[%d %d]&gt;']\n          [-.c.vem +&lt;-.c.vem +&lt;+.c.vem +&gt;-.c.vem +&gt;+.c.vem ~]\n        ==\n      ::\n          [s=%p c=*]        (shop c.vem |=(a=@ ~(rup at a)))\n          [s=%q c=*]        (shop c.vem |=(a=@ ~(r at a)))\n          [s=%r c=*]        $(vem [[%r ' ' '{' '}'] c.vem])\n          [s=%t c=*]        (shop c.vem |=(a=@ ~(rt at a)))\n          [s=%v c=*]        (shop c.vem |=(a=@ ~(ruv at a)))\n          [s=%x c=*]        (shop c.vem |=(a=@ ~(rux at a)))\n          [s=[%m p=@] c=*]  (shep p.s.vem c.vem)\n          [s=[%r p=@] c=*]\n        $(vem [[%r ' ' (cut 3 [0 1] p.s.vem) (cut 3 [1 1] p.s.vem)] c.vem])\n      ::\n          [s=[%r p=@ q=@ r=@] c=*]\n        :+  %rose\n          :*  p=(mesc (trip p.s.vem))\n              q=(mesc (trip q.s.vem))\n              r=(mesc (trip r.s.vem))\n          ==\n        |-  ^-  (list tank)\n        ?@  c.vem\n          ~\n        [^$(vem -.c.vem) $(c.vem +.c.vem)]\n      ::\n          [s=%z c=*]        $(vem [[%r %$ %$ %$] c.vem])\n          *                 !!\n      ==\n  ++  shep\n    |=  [fom=@ gar=*]\n    ^-  tank\n    =+  l=(met 3 fom)\n    =+  i=0\n    :-  %leaf\n    |-  ^-  tape\n    ?:  (gte i l)\n      ~\n    =+  c=(cut 3 [i 1] fom)\n    ?.  =(37 c)\n      (weld (mesc [c ~]) $(i +(i)))\n    =+  d=(cut 3 [+(i) 1] fom)\n    ?.  .?(gar)\n      ['\\\\' '#' $(i (add 2 i))]\n    (weld ~(ram re (show d -.gar)) $(i (add 2 i), gar +.gar))\n  ::\n  ++  shop\n    |=  [aug=* vel=$-(a=@ tape)]\n    ^-  tank\n    ?:  ?=(@ aug)\n      [%leaf (vel aug)]\n    :+  %rose\n      [[' ' ~] ['[' ~] [']' ~]]\n    =&gt;  .(aug `*`aug)\n    |-  ^-  (list tank)\n    ?:  ?=(@ aug)\n      [^$ ~]\n    [^$(aug -.aug) $(aug +.aug)]\n  ::\n  ++  shol\n    |=  lim=*\n    :+  %rose\n      [['.' ~] ~ ~]\n    |-    ^-  (list tank)\n    ?:  ?=(@ lim)  ~\n    :_  $(lim +.lim)\n    ?+  -.lim  (show '#')\n        ~   (show '$')\n        c=@  (show c.lim)\n        [%&amp; %1]  (show '.')\n        [%&amp; c=@]\n      [%leaf '+' ~(rud at c.lim)]\n    ::\n        [%| @ ~]  (show ',')\n        [%| n=@ ~ c=@]\n      [%leaf (weld (reap n.lim '^') ?~(c.lim \"$\" (trip c.lim)))]\n    ==\n  --\n</code></p>\n\n<hr />\n",
        "keys": [
            "show"
        ]
    },
    {
        "doc": "<h2><code>++last</code></h2>\n\n<p>Further trace</p>\n\n<p>Compares two line-column pairs, <code>zyc</code> and <code>naz</code>, producing\nwhichever is further along.</p>\n\n<h4>Accepts</h4>\n\n<p><code>zyc</code> is a <code>hair</code>.</p>\n\n<p><code>naz</code> is a <code>hair</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>hair</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  last  |=  [zyc=hair naz=hair]\n          ^-  hair\n          ?:  =(p.zyc p.naz)\n            ?:((gth q.zyc q.naz) zyc naz)\n          ?:((gth p.zyc p.naz) zyc naz)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(last [1 1] [1 2])\n  [p=1 q=2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(last [2 1] [1 2])\n  [p=2 q=1]</p>\n</blockquote>\n\n<blockquote>\n  <p>(last [0 0] [99 0])\n  [p=99 q=0]</p>\n</blockquote>\n\n<blockquote>\n  <p>(last [7 7] [7 7])\n  [p=7 q=7]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "last"
        ]
    },
    {
        "doc": "<h2><code>++lust</code></h2>\n\n<p>Detect newline</p>\n\n<p>Advances <code>naz</code> by a row if the <code>weq</code> is a newline, or by a column if <code>weq</code> is\nany other character.</p>\n\n<h4>Accepts</h4>\n\n<p><code>weq</code> is a <code>char</code>.</p>\n\n<p><code>naz</code> is a <code>hair</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>hair</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lust  |=  [weq=char naz=hair]\n          ^-  hair\n          ?:(=(`@`10 weq) [+(p.naz) 1] [p.naz +(q.naz)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(lust <code>a</code> [1 1])\n  [p=1 q=2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lust <code>@t</code>10 [1 1])\n  [p=2 q=1]</p>\n</blockquote>\n\n<blockquote>\n  <p>(lust '9' [10 10])\n  [p=10 q=11]</p>\n</blockquote>\n\n<blockquote>\n  <p>(roll \"maze\" [.(+&lt;+ [1 1])]:lust)\n  [1 5]</p>\n</blockquote>\n\n<blockquote>\n  <p>%-  roll  :_  [.(+&lt;+ [1 1])]:lust\n    \"\"\"\n    Sam\n    lokes\n    \"\"\"\n  [2 6]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lust"
        ]
    },
    {
        "doc": "<h2><code>++bend</code></h2>\n\n<p>Conditional composer</p>\n\n<p>Parsing composer: connects the <code>edge</code> <code>vex</code> with the subsequent <code>rule</code> <code>sab</code>\nas an optional suffix, using gate <code>raq</code> to compose or reject its\nresult. If there is no suffix, or if the suffix fails to be composed\nwith the current result, the current result is produced. Used to map a\ngroup of rules to a specified output.</p>\n\n<h4>Accepts</h4>\n\n<p><code>raq</code> is a gate.</p>\n\n<p><code>sab</code> is a rule.</p>\n\n<p><code>vex</code> is an edge.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bend\n  ~/  %bend\n  =+  raq=|*([a=* b=*] [~ u=[a b]])\n  |@\n  ++  $\n    ~/  %fun\n    |*  [vex=edge sab=rule]\n    ?~  q.vex\n      vex\n    =+  yit=(sab q.u.q.vex)\n    =+  yur=(last p.vex p.yit)\n    ?~  q.yit\n      [p=yur q=q.vex]\n    =+  vux=(raq p.u.q.vex p.u.q.yit)\n    ?~  vux\n      [p=yur q=q.vex]\n    [p=yur q=[~ u=[p=u.vux q=q.u.q.yit]]]\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn) [1 1] \"qs\")\n  [p=[p=1 q=3] q=[~ u=[p=113 q=[p=[p=1 q=2] q=\"s\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn) [1 1] \"qqq\")\n  [p=[p=1 q=3] q=[~ u=[p=114 q=[p=[p=1 q=3] q=\"q\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"aa\" ;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn))\n  'b'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"ba\" ;~((bend |=([a=char b=char] ?.(=(a b) ~ (some +(a))))) prn prn))\n  {1 3}\n  syntax error</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @tas)</code>(scan \"\" ;~((bend) (easy ~) sym))\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @tas)</code>(scan \"sep\" ;~((bend) (easy ~) sym))\n  [~ %sep]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bend"
        ]
    },
    {
        "doc": "<h2><code>++comp</code></h2>\n\n<p>Arbitrary compose</p>\n\n<p>Parsing composer: connects the <code>edge</code> <code>vex</code> with a following <code>rule</code> <code>sab</code>,\ncombining the contents of <code>vex</code> with the result of <code>sab</code> using a binary\ngate <code>raq</code>. Used to fold over the results of several <code>rule</code>s.</p>\n\n<h4>Accepts</h4>\n\n<p><code>raq</code> is a gate that accepts a cell of two nouns, <code>a</code> and <code>b</code>, and\nproduces a cell of two nouns.</p>\n\n<p><code>vex</code> is an edge.</p>\n\n<p><code>sab</code> is a rule.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  comp\n  ~/  %comp\n  =+  raq=|*([a=* b=*] [a b])\n  |@\n  ++  $\n    ~/  %fun\n    |*  [vex=edge sab=rule]\n    ~!  +&lt;\n    ?~  q.vex\n      vex\n    =+  yit=(sab q.u.q.vex)\n    =+  yur=(last p.vex p.yit)\n    ?~  q.yit\n      [p=yur q=q.yit]\n    [p=yur q=[~ u=[p=(raq p.u.q.vex p.u.q.yit) q=q.u.q.yit]]]\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"123\" ;~((comp |=([a=@ud b=@ud] (add a b))) dit dit dit))\n  6</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"12\" ;~((comp |=([a=@ud b=@ud] (add a b))) dit dit dit))\n  {1 3}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "comp"
        ]
    },
    {
        "doc": "<h2><code>++fail</code></h2>\n\n<p>Never parse</p>\n\n<p>Produces an <code>edge</code> at the same text position (<code>hair</code>) with a failing\nresult (<code>q=~</code>).</p>\n\n<h4>Accepts</h4>\n\n<p><code>tub</code> is a <code>nail</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fail  |=(tub=nail [p=p.tub q=~])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(fail [[1 1] \"abc\"])\n  [p=[p=1 q=1] q=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(fail [[p=1.337 q=70] \"Parse me, please?\"])\n  [p=[p=1.337 q=70] q=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fail"
        ]
    },
    {
        "doc": "<h2><code>++glue</code></h2>\n\n<p>Skip delimiter</p>\n\n<p>Parsing composer: connects an <code>edge</code> <code>vex</code> with a following <code>rule</code> <code>sab</code> by\nparsing the <code>rule</code> <code>bus</code> (the delimiting symbol) and throwing out the\nresult.</p>\n\n<h4>Accepts</h4>\n\n<p><code>bus</code> is a <code>rule</code>.</p>\n\n<p><code>vex</code> is an <code>edge</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  glue\n  ~/  %glue\n  |*  bus=rule\n  ~/  %fun\n  |*  [vex=edge sab=rule]\n  (plug vex ;~(pfix bus sab))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>[@ud @tas @tas]</code>(scan \"200|mal|bon\" ;~((glue bar) dem sym sym))\n  [200 %mal %bon]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>[@ud @t @tas]</code>(scan \"200|;|bon\" ;~((glue bar) dem mic sym))\n  [200 ';' %bon]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "glue"
        ]
    },
    {
        "doc": "<h2><code>++less</code></h2>\n\n<p>Parse unless</p>\n\n<p>Parsing composer: if an <code>edge</code> <code>vex</code> reflects a success, fail. Otherwise,\nconnect <code>vex</code> with the following <code>rule</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vex</code> is an <code>edge</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  less\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    =+  roq=(sab)\n    [p=(last p.vex p.roq) q=q.roq]\n  (fail +&lt;.sab)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"sas-/lo\" (star ;~(less lus bar prn)))\n  \"sas-/lo\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"sas-/l+o\" (star ;~(less lus bar prn)))\n  ! {1 8}\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"sas|-/lo\" (star ;~(less lus bar prn)))\n  ! {1 5}\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "less"
        ]
    },
    {
        "doc": "<h2><code>++pfix</code></h2>\n\n<p>Discard first rule</p>\n\n<p>Parsing composer: connects an <code>edge</code> <code>vex</code> with two subsequent <code>rule</code>s,\nignoring the result of the first and producing the result of the second.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vex</code> is an <code>edge</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pfix\n  ~/  %pfix\n  |*  sam=[vex=edge sab=rule]\n  %.  sam\n  (comp |*([a=* b=*] b))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(scan \"%him\" ;~(pfix cen sym))\n  'him'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"+++10\" ;~(pfix (star lus) dem))\n  10\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pfix"
        ]
    },
    {
        "doc": "<h2><code>++plug</code></h2>\n\n<p>Parse to tuple</p>\n\n<p>Parsing composer: connects an <code>edge</code> <code>vex</code> with a following <code>rule</code> <code>sab</code>,\nproducing a cell of both the results. See also: the monad applicator <code>;~</code> for a\nmore detailed explanation.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vex</code> is an <code>edge</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  plug\n  ~/  %plug\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    vex\n  =+  yit=(sab q.u.q.vex)\n  =+  yur=(last p.vex p.yit)\n  ?~  q.yit\n    [p=yur q=q.yit]\n  [p=yur q=[~ u=[p=[p.u.q.vex p.u.q.yit] q=q.u.q.yit]]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"1..20\" ;~(plug dem dot dot dem))\n  [1 '.' '.' 20]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "plug"
        ]
    },
    {
        "doc": "<h2><code>++pose</code></h2>\n\n<p>Parse options</p>\n\n<p>Parsing composer: if <code>vex</code> reflects a failure, connect it with the\nfollowing rule <code>sab</code>. See also: the monad applicator <code>;~</code></p>\n\n<h4>Accepts</h4>\n\n<p><code>vex</code> is an <code>edge</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pose\n  ~/  %pose\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    =+  roq=(sab)\n    [p=(last p.vex p.roq) q=q.roq]\n  vex\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(scan \"+\" ;~(pose lus tar cen))\n  '+'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"<em>\" ;~(pose lus tar cen))\n  '</em>'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"%\" ;~(pose lus tar cen))\n  '%'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"-\" ;~(pose lus tar cen))\n  ! {1 1}\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pose"
        ]
    },
    {
        "doc": "<h2><code>++sfix</code></h2>\n\n<p>Discard second rule</p>\n\n<p>Parsing composer: connects <code>edge</code> <code>vex</code> with two subsequent <code>rule</code>s returning the\nresult of the first and discarding the result of the second.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vex</code> is an <code>edge</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sfix\n  ~/  %sfix\n  |*  sam=[vex=edge sab=rule]\n  %.  sam\n  (comp |*([a=* b=*] a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(scan \"him%\" ;~(sfix sym cen))\n  'him'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"10+++\" ;~(sfix dem (star lus)))\n  q=10\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sfix"
        ]
    },
    {
        "doc": "<h2><code>++simu</code></h2>\n\n<p>First and second</p>\n\n<p>Parsing composer: if an <code>edge</code> <code>vex</code> reflects a failure, fail. Otherwise,\nconnect <code>vex</code> with the following <code>rule</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vex</code> is an <code>edge</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  simu\n  |*  [vex=edge sab=rule]\n  ?~  q.vex\n    vex\n  =+  roq=(sab)\n  roq\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~zod\" scat:vast)\n  [%dtzy p=%p q=0]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"%zod\" scat:vast)\n  [%dtzz p=%tas q=6.582.138]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"%zod\" ;~(simu cen scat:vast))\n  [%dtzz p=%tas q=6.582.138]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"~zod\" ;~(simu cen scat:vast))\n  ! {1 1}\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "simu"
        ]
    },
    {
        "doc": "<h2><code>++bass</code></h2>\n\n<p>Parser modifier: LSB\nordered <code>list</code> as atom of a <code>base</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>wuc</code> is an atom.</p>\n\n<p><code>tyd</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bass\n  |*  [wuc=@ tyd=rule]\n  %+  cook\n    |=  waq=(list @)\n    %+  roll\n      waq\n    =|([p=@ q=@] |.((add p (mul wuc q))))\n  tyd\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"123\" (bass 10 (star dit)))\n  q=123\n  (scan \"123\" (bass 8 (star dit)))\n  q=83\n  <code>@ub</code>(scan \"123\" (bass 8 (star dit)))\n  0b101.0011\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bass"
        ]
    },
    {
        "doc": "<h2><code>++boss</code></h2>\n\n<p>Parser modifier: LSB</p>\n\n<p>Ordered <code>list</code> as atom of a <code>base</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>wuc</code> is an atom.</p>\n\n<p><code>tyd</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  boss\n  |*  [wuc=@ tyd=rule]\n  %+  cook\n    |=  waq=(list @)\n    %+  reel\n      waq\n    =|([p=@ q=@] |.((add p (mul wuc q))))\n  tyd\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"123\" (boss 10 (star dit)))\n  321</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"bam\" (boss 256 (star alp)))\n  'bam'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"bam\" (boss 256 (star alp)))\n  0x6d.6162\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "boss"
        ]
    },
    {
        "doc": "<h2><code>++cold</code></h2>\n\n<p>Replace with constant</p>\n\n<p>Parser modifier. Accepts a <code>rule</code> <code>sef</code> and produces a parser that produces a\nconstant <code>cus</code>, assuming <code>sef</code> is successful.</p>\n\n<h4>Accepts</h4>\n\n<p><code>cus</code> is a constant noun.</p>\n\n<p><code>sef</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cold\n  ~/  %cold\n  |*  [cus=* sef=rule]\n  ~/  %fun\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  [p=p.vex q=[~ u=[p=cus q=q.u.q.vex]]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((cold %foo (just 'a')) [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ u=[p=%foo q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((cold %foo (just 'a')) [[1 1] \"bc\"])\n  [p=[p=1 q=1] q=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cold"
        ]
    },
    {
        "doc": "<h2><code>++cook</code></h2>\n\n<p>Apply gate</p>\n\n<p>Parser modifier. Produces a parser that takes a (successful) result of a\n<code>rule</code> <code>sef</code> and slams it through <code>poq</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>poq</code> is a gate.</p>\n\n<p><code>sef</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cook\n  ~/  %cook\n  |*  [poq=gate sef=rule]\n  ~/  %fun\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  [p=p.vex q=[~ u=[p=(poq p.u.q.vex) q=q.u.q.vex]]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((cook ,@ud (just 'a')) [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ u=[p=97 q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((cook ,@tas (just 'a')) [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ u=[p=%a q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((cook |=(a=@ +(a)) (just 'a')) [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ u=[p=98 q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((cook |=(a=@ <code>@t</code>+(a)) (just 'a')) [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ u=[p='b' q=[p=[p=1 q=2] q=\"bc\"]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cook"
        ]
    },
    {
        "doc": "<h2><code>++easy</code></h2>\n\n<p>Always parse</p>\n\n<p>Parser generator. Produces a parser that succeeds with given noun <code>huf</code>\nwithout consuming any text.</p>\n\n<h4>Accepts</h4>\n\n<p><code>huf</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  easy\n  ~/  %easy\n  |*  huf=*\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like _huf)\n  [p=p.tub q=[~ u=[p=huf q=tub]]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((easy %foo) [[1 1] \"abc\"])\n  [p=[p=1 q=1] q=[~ [p=%foo q=[p=[p=1 q=1] q=\"abc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((easy %foo) [[1 1] \"bc\"])\n  [p=[p=1 q=1] q=[~ [p=%foo q=[p=[p=1 q=1] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((easy 'a') [[1 1] \"bc\"])\n  [p=[p=1 q=1] q=[~ [p='a' q=[p=[p=1 q=1] q=\"bc\"]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "easy"
        ]
    },
    {
        "doc": "<h2><code>++fuss</code></h2>\n\n<p>Has A or B?</p>\n\n<p>If string <code>sic</code> is parsed: <code>%.y</code>. If string <code>non</code> is parsed: <code>%.n</code>. Otherwise, fail.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sic</code> is a <code>@t</code>.</p>\n\n<p><code>non</code> is a <code>@t</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fuss\n  |=  [sic=@t non=@t]\n  ;~(pose (cold %&amp; (jest sic)) (cold %| (jest non)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rash 'foo' (fuss 'foo' 'bar'))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(rash 'bar' (fuss 'foo' 'bar'))\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>(rash 'baz' (fuss 'foo' 'bar'))\n  {1 3}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fuss"
        ]
    },
    {
        "doc": "<h2><code>++full</code></h2>\n\n<p>Parse to end</p>\n\n<p>Parser modifier. Accepts a <code>rule</code> <code>sef</code>, and produces a parser that succeeds\nonly when the <code>tape</code> of <code>tub</code> is fully consumed using <code>sef</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sef</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  full\n  |*  sef=rule\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~(q.vex vex ?:(=(~ q.q.u.q.vex) vex [p=p.vex q=~]))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((full (just 'a')) [[1 1] \"ab\"])\n  [p=[p=1 q=2] q=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>((full (jest 'ab')) [[1 1] \"ab\"])\n  [p=[p=1 q=3] q=[~ u=[p='ab' q=[p=[p=1 q=3] q=\"\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((full ;~(plug (just 'a') (just 'b'))) [[1 1] \"ab\"])\n  [p=[p=1 q=3] q=[~ u=[p=['a' 'b'] q=[p=[p=1 q=3] q=\"\"]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "full"
        ]
    },
    {
        "doc": "<h2><code>++funk</code></h2>\n\n<p>Add to tape</p>\n\n<p>Parser modifier: prepend text to <code>tape</code> before applying parser.</p>\n\n<h4>Accepts</h4>\n\n<p><code>pre</code> is a <code>tape</code></p>\n\n<p><code>sef</code> is a <code>rule</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  funk\n  |*  [pre=tape sef=rule]\n  |=  tub=nail\n  (sef p.tub (weld pre q.tub))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((funk \"abc prefix-\" (jest 'abc')) [[1 1] \"to be parsed\"])\n  [p=[p=1 q=4] q=[~ [p='abc' q=[p=[p=1 q=4] q=\" prefix-to be parsed\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((funk \"parse\" (just 'a')) [[1 4] \" me\"])\n  [p=[p=1 q=4] q=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "funk"
        ]
    },
    {
        "doc": "<h2><code>++here</code></h2>\n\n<p>Place-based apply</p>\n\n<p>Parser modifier. Similar to <code>++cook</code> in that it produces a parser that takes a\n(successful) result of <code>sef</code> and slams it through <code>hez</code>. <code>hez</code> accepts a\n<code>pint</code> <code>a</code> and a noun <code>b</code>, which is what the parser parsed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>hez</code> is a gate.</p>\n\n<p><code>sef</code> is a <code>rule</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  here\n  ~/  %here\n  =+  [hez=|=([a=pint b=*] [a b]) sef=*rule]\n  |@\n  ++  $\n    ~/  %fun\n    |=  tub=nail\n    =+  vex=(sef tub)\n    ?~  q.vex\n      vex\n    [p=p.vex q=[~ u=[p=(hez [p.tub p.q.u.q.vex] p.u.q.vex) q=q.u.q.vex]]]\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"abc\" (star alf))\n  \"abc\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abc\" (here |*(^ +&lt;) (star alf)))\n  [[[p=1 q=1] p=1 q=4] \"abc\"]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abc\" (star (here |*(^ +&lt;) alf)))\n  ~[[[[p=1 q=1] p=1 q=2] ~~a] [[[p=1 q=2] p=1 q=3] ~~b] [[[p=1 q=3] p=1 q=4] ~~c]]\n  ```</p>\n</blockquote>\n",
        "keys": [
            "here"
        ]
    },
    {
        "doc": "<h2><code>++inde</code></h2>\n\n<p>Indentation block</p>\n\n<p>Apply <code>rule</code> to indented block starting at current column number, omitting the\nleading whitespace.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sef</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  inde  |*  sef=rule\n  |=  nail  ^+  (sef)\n  =+  [har tap]=[p q]:+&lt;\n  =+  lev=(fil 3 (dec q.har) ' ')\n  =+  eol=(just `@t`10)\n  =+  =-  roq=((star ;~(pose prn ;~(sfix eol (jest lev)) -)) har tap)\n      ;~(simu ;~(plug eol eol) eol)\n  ?~  q.roq  roq\n  =+  vex=(sef har(q 1) p.u.q.roq)\n  =+  fur=p.vex(q (add (dec q.har) q.p.vex))\n  ?~  q.vex  vex(p fur)\n  =-  vex(p fur, u.q -)\n  :+  &amp;3.vex\n    &amp;4.vex(q.p (add (dec q.har) q.p.&amp;4.vex))\n  =+  res=|4.vex\n  |-  ?~  res  |4.roq\n  ?.  =(10 -.res)  [-.res $(res +.res)]\n  (welp [`@t`10 (trip lev)] $(res +.res))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(scan \"   foo\\0a   bar\" ;~(pfix ace ace ace (inde (star ;~(pose prn (just '\\0a'))))))\n  \"foo\\0abar\"\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Note the amount of indentation whitespace to be stripped from the beginning of\neach line is determined by the value of <code>q</code> (the column) in the <code>hair</code> when\n<code>++inde</code> is first called. This means something like the <code>pfix</code> expression in the\nexample above is necessary to set the level of indentation. Additionally, the\n<code>rule</code> given to <code>++inde</code> must consume the whole line including the line ending.</p>\n\n<hr />\n",
        "keys": [
            "inde"
        ]
    },
    {
        "doc": "<h2><code>++ifix</code></h2>\n\n<p>Infix</p>\n\n<p>Parser modifier: surround with pair of <code>rule</code>s, the output of which is\ndiscarded.</p>\n\n<h4>Accepts</h4>\n\n<p><code>fel</code> is a pair of <code>rule</code>s.</p>\n\n<p><code>hof</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ifix\n  |*  [fel=[rule rule] hof=rule]\n  ~!  +&lt;\n  ~!  +&lt;:-.fel\n  ~!  +&lt;:+.fel\n  ;~(pfix -.fel ;~(sfix hof +.fel))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"-40-\" (ifix [hep hep] dem))\n  40</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"4my4\" (ifix [dit dit] (star alf)))\n  \"my\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ifix"
        ]
    },
    {
        "doc": "<h2><code>++jest</code></h2>\n\n<p>Match a cord</p>\n\n<p>Match and consume a cord.</p>\n\n<h4>Accepts</h4>\n\n<p><code>daf</code> is a <code>@t</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  jest\n  |=  daf=@t\n  |=  tub=nail\n  =+  fad=daf\n  |-  ^-  (like @t)\n  ?:  =(`@`0 daf)\n    [p=p.tub q=[~ u=[p=fad q=tub]]]\n  ?:  |(?=(~ q.tub) !=((end 3 daf) i.q.tub))\n    (fail tub)\n  $(p.tub (lust i.q.tub p.tub), q.tub t.q.tub, daf (rsh 3 daf))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((jest 'abc') [[1 1] \"abc\"])\n  [p=[p=1 q=4] q=[~ [p='abc' q=[p=[p=1 q=4] q=\"\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abc\" (jest 'abc'))\n  'abc'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abc\" (jest 'acb'))\n  ! {1 2}\n  ! 'syntax-error'\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>((jest 'john doe') [[1 1] \"john smith\"])\n  [p=[p=1 q=6] q=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>((jest 'john doe') [[1 1] \"john doe\"])\n  [p=[p=1 q=9] q=[~ [p='john doe' q=[p=[p=1 q=9] q=\"\"]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "jest"
        ]
    },
    {
        "doc": "<h2><code>++just</code></h2>\n\n<p>Match a char</p>\n\n<p>Match and consume a single character.</p>\n\n<h4>Accepts</h4>\n\n<p><code>daf</code> is a <code>char</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  just\n  ~/  %just\n  |=  daf=char\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  ?.  =(daf i.q.tub)\n    (fail tub)\n  (next tub)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((just 'a') [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ [p='a' q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abc\" (just 'a'))\n  ! {1 2}\n  ! 'syntax-error'\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"a\" (just 'a'))\n  'a'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"%\" (just '%'))\n  '%'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "just"
        ]
    },
    {
        "doc": "<h2><code>++knee</code></h2>\n\n<p>Recursive parsers</p>\n\n<p>Used for recursive parsers, which would otherwise be infinite when\ncompiled.</p>\n\n<h4>Accepts</h4>\n\n<p><code>gar</code> is a noun.</p>\n\n<p><code>sef</code> is a gate that accepts a <code>rule</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  knee\n  =|  [gar=* sef=_|.(*rule)]\n  |@  ++  $\n        |=  tub=nail\n        ^-  (like _gar)\n        ((sef) tub)\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>|-(;~(plug prn ;~(pose $ (easy ~))))\n  ! rest-loop\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>|-(;~(plug prn ;~(pose (knee *tape |.(^$)) (easy ~))))\n  &lt; 1.obo\n    [ c=c=tub=[p=[p=@ud q=@ud] q=\"\"]\n        b\n      &lt; 1.bes\n        [ c=tub=[p=[p=@ud q=@ud] q=\"\"]\n          b=&lt;1.tnv [tub=[p=[p=@ud q=@ud] q=\"\"] &lt;1.ktu [daf=@tD &lt;414.fvk 101.jzo 1.ypj %164>]&gt;]&gt;\n          a=&lt;1.fvg [tub=[p=[p=@ud q=@ud] q=\"\"] &lt;1.khu [[les=@ mos=@] &lt;414.fvk 101.jzo 1.ypj %164>]&gt;]&gt;\n          v=&lt;414.fvk 101.jzo 1.ypj %164>\n        ]</p>\n\n<pre><code>  a\n... 450 lines omitted ...\n</code></pre>\n  \n  <p>]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abcd\" |-(;~(plug prn ;~(pose (knee *tape |.(^$)) (easy ~)))))\n  ['a' \"bcd\"]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "knee"
        ]
    },
    {
        "doc": "<h2><code>++mask</code></h2>\n\n<p>Match char</p>\n\n<p>Parser generator. Matches the next character if it is in a list of characters.</p>\n\n<h4>Accepts</h4>\n\n<p><code>bud</code> is a list of <code>char</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mask\n  ~/  %mask\n  |=  bud=(list char)\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  ?.  (lien bud |=(a=char =(i.q.tub a)))\n    (fail tub)\n  (next tub)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"a\" (mask \"cba\"))\n  'a'</p>\n</blockquote>\n\n<blockquote>\n  <p>((mask \"abc\") [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ [p='a' q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((mask \"abc\") [[1 1] \"bbc\"])\n  [p=[p=1 q=2] q=[~ [p='b' q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((mask \"abc\") [[1 1] \"dbc\"])\n  [p=[p=1 q=1] q=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mask"
        ]
    },
    {
        "doc": "<h2><code>++more</code></h2>\n\n<p>Parse list with delimiter</p>\n\n<p>Parser modifier: Parse a list of matches using a delimiter <code>rule</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>bus</code> is a <code>rule</code>.</p>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  more\n  |*  [bus=rule fel=rule]\n  ;~(pose (most bus fel) (easy ~))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"\" (more ace dem))\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"40 20\" (more ace dem))\n  [40 [i=20 t=~]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"40 20 60 1 5\" (more ace dem))\n  [40 [i=20 t=~[60 1 5]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "more"
        ]
    },
    {
        "doc": "<h2><code>++most</code></h2>\n\n<p>Parse list of at least one match</p>\n\n<p>Parser modifier: parse a <code>list</code> of at least one match using a delimiter <code>rule</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>bus</code> is a <code>rule</code>.</p>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  most\n  |*  [bus=rule fel=rule]\n  ;~(plug fel (star ;~(pfix bus fel)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"40 20\" (most ace dem))\n  [40 [i=20 t=~]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"40 20 60 1 5\" (most ace dem))\n  [40 [i=20 t=~[60 1 5]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\" (most ace dem))\n  ! {1 1}\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "most"
        ]
    },
    {
        "doc": "<h2><code>++next</code></h2>\n\n<p>Consume char</p>\n\n<p>Consume any character, producing it as a result.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tub</code> is a <code>nail</code></p>\n\n<h4>Produces</h4>\n\n<p>An <code>edge</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  next\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  =+  zac=(lust i.q.tub p.tub)\n  [zac [~ i.q.tub [zac t.q.tub]]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(next [[1 1] \"ebc\"])\n  [p=[p=1 q=2] q=[~ [p='e' q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(next [[1 1] \"john jumps jones\"])\n  [p=[p=1 q=2] q=[~ [p='j' q=[p=[p=1 q=2] q=\"ohn jumps jones\"]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "next"
        ]
    },
    {
        "doc": "<h2><code>++perk</code></h2>\n\n<p>Parse cube fork</p>\n\n<p>Given <code>a</code>, a list of <code>@tas</code>, match any one in the list and produce it. Note the\nlist should not be a <code>list</code> type, but just a null-terminated cell like <code>~[%foo %bar %baz]</code>. The type produced will be a union of the items in the given list,\nso you can use a <code>?-</code> expression on the output.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>(pole @tas)</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  perk\n  |*  a=(pole @tas)\n  ?~  a  fail\n  ;~  pose\n    (cold -.a (jest -.a))\n    $(a +.a)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"foo\" (perk ~[%foo %bar]))\n  %foo</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"bar\" (perk ~[%foo %bar]))\n  %bar</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"baz\" (perk ~[%foo %bar]))\n  {1 3}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "perk"
        ]
    },
    {
        "doc": "<h2><code>++plus</code></h2>\n\n<p>List of at least one match.</p>\n\n<p>Parser modifier: parse <code>list</code> of at least one match.</p>\n\n<h4>Accepts</h4>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  plus  |*(fel=rule ;~(plug fel (star fel)))          ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \">&gt;&gt;&gt;\" (cook lent (plus gar)))\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"-  - \" (plus ;~(pose ace hep)))\n  ['-' [i=' ' t=~[' ' '-' ' ']]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(scan \"-  - \" (plus ;~(pose ace hep)))\n  \"-  - \"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(pole ,@t)</code>(scan \"-  - \" (plus ;~(pose ace hep)))\n  ['-' [' ' [' ' ['-' [' ' ~]]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "plus"
        ]
    },
    {
        "doc": "<h2><code>++punt</code></h2>\n\n<p>Unitized parse</p>\n\n<p>Either successfully apply <code>rule</code> <code>a</code> and produce a <code>unit</code> of the result, or produce <code>~</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  punt  |*([a=rule] ;~(pose (stag ~ a) (easy ~)))\n</code></p>\n\n<h4>Example</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((punt (jest 'foo')) 1^1 \"foo\")\n  [p=[p=1 q=4] q=[~ u=[p=[~ 'foo'] q=[p=[p=1 q=4] q=~]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((punt (jest 'foo')) 1^1 \"bar\")\n  [p=[p=1 q=1] q=[~ [p=~ q=[p=[p=1 q=1] q=\"bar\"]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "punt"
        ]
    },
    {
        "doc": "<h2><code>++sear</code></h2>\n\n<p>Conditional <code>cook</code></p>\n\n<p>Conditional <code>cook</code>. Slams the result through a gate that produces\na unit; if that unit is empty, fail.</p>\n\n<h4>Accepts</h4>\n\n<p><code>pyq</code> is a gate that produces a <code>unit</code>.</p>\n\n<p><code>sef</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sear\n  |*  [pyq=$-(* (unit)) sef=rule]\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  =+  gey=(pyq p.u.q.vex)\n  ?~  gey\n    [p=p.vex q=~]\n  [p=p.vex q=[~ u=[p=u.gey q=q.u.q.vex]]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((sear |=(a=* ?@(a (some a) ~)) (just 'a')) [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=[~ u=[p=97 q=[p=[p=1 q=2] q=\"bc\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((sear |=(* ~) (just 'a')) [[1 1] \"abc\"])\n  [p=[p=1 q=2] q=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sear"
        ]
    },
    {
        "doc": "<h2><code>++shim</code></h2>\n\n<p>Char in range</p>\n\n<p>Match characters (<code>char</code>) within a range.</p>\n\n<h4>Accepts</h4>\n\n<p><code>les</code> is an atom.</p>\n\n<p><code>mos</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  shim\n  ~/  %shim\n  |=  [les=@ mos=@]\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like char)\n  ?~  q.tub\n    (fail tub)\n  ?.  ?&amp;((gte i.q.tub les) (lte i.q.tub mos))\n    (fail tub)\n  (next tub)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(rash 'abc' (plus (shim 'a' 'z')))\n  \"abc\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(rash 'ABC' (plus (shim 'a' 'z')))\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "shim"
        ]
    },
    {
        "doc": "<h2><code>++slug</code></h2>\n\n<p>Use gate to parse delimited list</p>\n\n<p>Parser modifier: By composing with a gate, parse a delimited <code>list</code> of\nmatches.</p>\n\n<h4>Accepts</h4>\n\n<p><code>raq</code> is a binary gate.</p>\n\n<p><code>bus</code> is a <code>rule</code>.</p>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slug\n  |*  raq=_=&gt;(~ |*([a=* b=*] [a b]))\n  |*  [bus=rule fel=rule]\n  ;~((comp raq) fel (stir +&lt;+.raq raq ;~(pfix bus fel)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"20+5+110\" ((slug add) lus dem))\n  135</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"a b c\" ((slug |=(a=[@t @t] (cat 3 a))) ace alp))\n  'abc'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slug"
        ]
    },
    {
        "doc": "<h2><code>++stag</code></h2>\n\n<p>Add label</p>\n\n<p>Add a label to an <code>edge</code> parsed by a <code>rule</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>gob</code> is a noun.</p>\n\n<p><code>sef</code> is a rule.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  stag\n  ~/  %stag\n  |*  [gob=* sef=rule]\n  ~/  %fun\n  |=  tub=nail\n  =+  vex=(sef tub)\n  ?~  q.vex\n    vex\n  [p=p.vex q=[~ u=[p=[gob p.u.q.vex] q=q.u.q.vex]]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rash 'abc' (stag %foo (jest 'abc')))\n  [%foo 'abc']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "stag"
        ]
    },
    {
        "doc": "<h2><code>++star</code></h2>\n\n<p>List of matches</p>\n\n<p>Parser modifier: parse <code>list</code> of matches.</p>\n\n<h4>Accepts</h4>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  star\n  |*  fel=rule\n  (stir `(list _(wonk *fel))`~ |*([a=* b=*] [a b]) fel)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"aaaaa\" (just 'a'))\n  ! {1 2}\n  ! 'syntax-error'\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"aaaaa\" (star (just 'a')))\n  \"aaaaa\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abcdef\" (star (just 'a')))\n  ! {1 2}\n  ! 'syntax-error'\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"abcabc\" (star (jest 'abc')))\n  &lt;|abc abc|&gt;</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"john smith\" (star (shim 0 200)))\n  \"john smith\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "star"
        ]
    },
    {
        "doc": "<h2><code>++stet</code></h2>\n\n<p>Add faces</p>\n\n<p>Add faces <code>[p q]</code> to range-parser pairs in a list. Typically used in combination\nwith <a href=\"#stew\"><code>++stew</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>leh</code> is a list of range-parsers.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(list [p=?(@ [@ @]) q=rule])</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  stet\n  |*  leh=(list [?(@ [@ @]) rule])\n  |-\n  ?~  leh\n    ~\n  [i=[p=-.i.leh q=+.i.leh] t=$(leh t.leh)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=rule %-  stew\n          %-  stet\n          %-  limo\n          :~\n            [['a' 'z'] (cook |=(a=@ (sub a 32)) alp)]\n            [['A' 'Z'] (cook |=(a=@ (add a 32)) alp)]\n          ==</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(rash 'fooBARbaz' (star rule))\n  \"FOObarBAZ\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "stet"
        ]
    },
    {
        "doc": "<h2><code>++stew</code></h2>\n\n<p>Switch by first char</p>\n\n<p>Parser generator. From an associative <code>list</code> of characters or character\nranges to <code>rule</code>s, construct a <code>map</code>, and parse <code>tape</code>s only\nwith <code>rule</code>s associated with a range that the <code>tape</code>'s first character falls in.</p>\n\n<h4>Accepts</h4>\n\n<p><code>leh</code> is a <code>(list [p=?(@ [@ @]) q=rule])</code>, where <code>p</code> is a <code>char</code> or <code>char</code> range.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  stew                                                ::  switch by first char\n  ~/  %stew\n  |*  leh=(list [p=?(@ [@ @]) q=rule])                  ::  char+range keys\n  =+  ^=  wor                                           ::  range complete lth\n      |=  [ort=?(@ [@ @]) wan=?(@ [@ @])]\n      ?@  ort\n        ?@(wan (lth ort wan) (lth ort -.wan))\n      ?@(wan (lth +.ort wan) (lth +.ort -.wan))\n  =+  ^=  hel                                           ::  build parser map\n      =+  hel=`(tree _?&gt;(?=(^ leh) i.leh))`~\n      |-  ^+  hel\n      ?~  leh\n        ~\n      =+  yal=$(leh t.leh)\n      |-  ^+  hel\n      ?~  yal\n        [i.leh ~ ~]\n      ?:  (wor p.i.leh p.n.yal)\n        =+  nuc=$(yal l.yal)\n        ?&gt;  ?=(^ nuc)\n        ?:  (mor p.n.yal p.n.nuc)\n          [n.yal nuc r.yal]\n        [n.nuc l.nuc [n.yal r.nuc r.yal]]\n      =+  nuc=$(yal r.yal)\n      ?&gt;  ?=(^ nuc)\n      ?:  (mor p.n.yal p.n.nuc)\n        [n.yal l.yal nuc]\n      [n.nuc [n.yal l.yal l.nuc] r.nuc]\n  ~%  %fun  ..^$  ~\n  |=  tub=nail\n  ?~  q.tub\n    (fail tub)\n  |-\n  ?~  hel\n    (fail tub)\n  ?:  ?@  p.n.hel\n        =(p.n.hel i.q.tub)\n      ?&amp;((gte i.q.tub -.p.n.hel) (lte i.q.tub +.p.n.hel))\n    ::  (q.n.hel [(lust i.q.tub p.tub) t.q.tub])\n    (q.n.hel tub)\n  ?:  (wor i.q.tub p.n.hel)\n    $(hel l.hel)\n  $(hel r.hel)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>=rule %-  stew\n          %-  stet\n          %-  limo\n          :~\n            [['a' 'z'] (cook |=(a=@ (sub a 32)) alp)]\n            [['A' 'Z'] (cook |=(a=@ (add a 32)) alp)]\n          ==</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(rash 'fooBARbaz' (star rule))\n  \"FOObarBAZ\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "stew"
        ]
    },
    {
        "doc": "<h2><code>++stir</code></h2>\n\n<p>Parse repeatedly</p>\n\n<p>Parse with <code>rule</code> as many times as possible, and fold over results with a\nbinary gate.</p>\n\n<h4>Accepts</h4>\n\n<p><code>rud</code> is a noun.</p>\n\n<p><code>raq</code> is a gate that takes two nouns and produces a cell.</p>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  stir\n  ~/  %stir\n  |*  [rud=* raq=_=&gt;(~ |*([a=* b=*] [a b])) fel=rule]\n  ~/  %fun\n  |=  tub=nail\n  ^-  (like _rud)\n  ::\n  ::  lef: successful interim parse results (per .fel)\n  ::  wag: initial accumulator (.rud in .tub at farthest success)\n  ::\n  =+  ^=  [lef wag]\n    =|  lef=(list _(fel tub))\n    |-  ^-  [_lef (pair hair [~ u=(pair _rud nail)])]\n    =+  vex=(fel tub)\n    ?~  q.vex\n      :-  lef\n      [p.vex [~ rud tub]]\n    $(lef [vex lef], tub q.u.q.vex)\n  ::\n  ::  fold .lef into .wag, combining results with .raq\n  ::\n  %+  roll  lef\n  |=  _[vex=(fel tub) wag=wag]  :: q.vex is always (some)\n  ^+  wag\n  :-  (last p.vex p.wag)\n  [~ (raq p.u.+.q.vex p.u.q.wag) q.u.q.wag]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"abc\" (stir *@ add prn))\n  294</p>\n</blockquote>\n\n<blockquote>\n  <p>(roll \"abc\" add)\n  294\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "stir"
        ]
    },
    {
        "doc": "<h2><code>++stun</code></h2>\n\n<p>Parse several times</p>\n\n<p>Parse bounded number of times.</p>\n\n<h4>Accepts</h4>\n\n<p><code>lig</code> is a cell of atoms (<code>[@ @]</code>) indicating the bounds.</p>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  stun\n  ~/  %stun\n  |*  [lig=[@ @] fel=rule]\n  |=  tub=nail\n  ^-  (like (list _(wonk (fel))))\n  ?:  =(0 +.lig)\n    [p.tub [~ ~ tub]]\n  =+  vex=(fel tub)\n  ?~  q.vex\n    ?:  =(0 -.lig)\n      [p.vex [~ ~ tub]]\n    vex\n  =+  ^=  wag  %=  $\n                 -.lig  ?:(=(0 -.lig) 0 (dec -.lig))\n                 +.lig  ?:(=(0 +.lig) 0 (dec +.lig))\n                 tub  q.u.q.vex\n               ==\n  ?~  q.wag\n    wag\n  [p.wag [~ [p.u.q.vex p.u.q.wag] q.u.q.wag]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((stun [5 10] prn) [1 1] \"aquickbrownfoxran\")\n  [p=[p=1 q=11] q=[~ [p=\"aquickbrow\" q=[p=[p=1 q=11] q=\"nfoxran\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((stun [5 10] prn) [1 1] \"aquickbro\")\n  [p=[p=1 q=10] q=[~ [p=\"aquickbro\" q=[p=[p=1 q=10] q=\"\"]]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>((stun [5 10] prn) [1 1] \"aqui\")\n  [p=[p=1 q=5] q=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "stun"
        ]
    },
    {
        "doc": "<h2><code>++rash</code></h2>\n\n<p>Parse or crash</p>\n\n<p>Parse a cord with a given <code>rule</code> and crash if the <code>cord</code> isn't entirely\nparsed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>naf</code> is an atom.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>The value of the parse result, or crash.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rash  |*([naf=@ sab=rule] (scan (trip naf) sab))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rash 'I was the world in which I walked, and what I saw' (star (shim 0 200)))\n  \"I was the world in which I walked, and what I saw\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(rash 'abc' (just 'a'))\n  ! {1 2}\n  ! 'syntax-error'\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(rash 'abc' (jest 'abc'))\n  'abc'</p>\n</blockquote>\n\n<blockquote>\n  <p>(rash 'abc' (jest 'ab'))\n  ! {1 3}\n  ! 'syntax-error'\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rash"
        ]
    },
    {
        "doc": "<h2><code>++rose</code></h2>\n\n<p>Parse to each</p>\n\n<p>Parse <code>tape</code> <code>los</code> with <code>rule</code> <code>sab</code>, producing an <code>(each @ud (unit *))</code>. If\n<code>los</code> was not fully consumed, the result is <code>%.n</code> and <code>p</code> contains the column\nnumber before failure occurred. If <code>los</code> was fully consumed, the result is\n<code>%.y</code> and <code>p</code> contains either <code>sab</code>'s result in a <code>unit</code>, or a null <code>unit</code> if\nparsing failed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>los</code> is a <code>tape</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p><code>(each @ud (unit *))</code>, where the <code>*</code> is whatever type the <code>rule</code> produces.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rose  |*  [los=tape sab=rule]\n          =+  vex=(sab [[1 1] los])\n          =+  len=(lent los)\n          ?.  =(+(len) q.p.vex)  [%| p=(dec q.p.vex)]\n          ?~  q.vex\n            [%&amp; p=~]\n          [%&amp; p=[~ u=p.u.q.vex]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rose \"!\" zap)\n  [%.y p=[~ u='!']]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rose \"?\" zap)\n  [%.n p=0]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rose \"!?\" zap)\n  [%.n p=1]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rose \"!\" ;~(plug zap fail))\n  [%.y p=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rose"
        ]
    },
    {
        "doc": "<h2><code>++rush</code></h2>\n\n<p>Parse or null</p>\n\n<p>Parse an atom with a given rule and produce null if the cord isn't\nentirely parsed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>naf</code> is an atom.</p>\n\n<p><code>sab</code> is a rule.</p>\n\n<h4>Produces</h4>\n\n<p>The value of the parse result, or null.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rush  |*([naf=@ sab=rule] (rust (trip naf) sab))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rush 'I was the world in which I walked, and what I saw' (star (shim 0 200)))\n  [~ \"I was the world in which I walked, and what I saw\"]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rush 'abc' (just 'a'))\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(rush 'abc' (jest 'abc'))\n  [~ 'abc']</p>\n</blockquote>\n\n<blockquote>\n  <p>(rush 'abc' (jest 'ac'))\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(rush 'abc' (jest 'ab'))\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rush"
        ]
    },
    {
        "doc": "<h2><code>++rust</code></h2>\n\n<p>Parse tape or null</p>\n\n<p>Parse a <code>tape</code> with a given <code>rule</code> and produce null if the <code>tape</code> isn't\nentirely parsed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>los</code> is a <code>tape</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit *)</code>, where <code>*</code> is the type produced by <code>sab</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rust  |*  [los=tape sab=rule]\n          =+  vex=((full sab) [[1 1] los])\n          ?~(q.vex ~ [~ u=p.u.q.vex])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rust \"I was the world in which I walked, and what I saw\" (star (shim 0 200)))\n  [~ \"I was the world in which I walked, and what I saw\"]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rust \"Or heard or felt came not but from myself;\" (star (shim 0 200)))\n  [~ \"Or heard or felt came not but from myself;\"]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rust \"And there I found myself more truly and more strange.\" (jest 'And there I'))\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rust"
        ]
    },
    {
        "doc": "<h2><code>++scan</code></h2>\n\n<p>Parse tape or crash</p>\n\n<p>Parse a <code>tape</code> with a given <code>rule</code> and crash if the <code>tape</code> isn't entirely\nparsed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>los</code> is a <code>tape</code>.</p>\n\n<p><code>sab</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>Either a <code>tape</code> or a crash.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  scan  |*  [los=tape sab=rule]\n          =+  vex=((full sab) [[1 1] los])\n          ?~  q.vex\n            ~_  (show [%m '{%d %d}'] p.p.vex q.p.vex ~)\n            ~_(leaf+\"syntax error\" !!)\n          p.u.q.vex\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"I was the world in which I walked, and what I saw\" (star (shim 0 200)))\n  \"I was the world in which I walked, and what I saw\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"Or heard or felt came not but from myself;\" (star (shim 0 200)))\n  \"Or heard or felt came not but from myself;\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"And there I found myself more truly and more strange.\" (jest 'And there I'))\n  ! {1 12}\n  ! 'syntax-error'\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "scan"
        ]
    },
    {
        "doc": "<h2><code>++ace</code></h2>\n\n<p>Parse space</p>\n\n<p>Parses ASCII character 32, space.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ace  (just ' ')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \" \" ace)\n  ' '\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ace"
        ]
    },
    {
        "doc": "<h2><code>++bar</code></h2>\n\n<p>Parse vertical bar</p>\n\n<p>Parses ASCII character 124, the vertical bar.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bar  (just '|')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"|\" bar)\n  '|'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bar"
        ]
    },
    {
        "doc": "<h2><code>++bas</code></h2>\n\n<p>Parse backslash</p>\n\n<p>Parses ASCII character 92, the backslash. Note the extra <code>\\</code> in the calling of\n<code>bas</code> with <a href=\"/reference/hoon/stdlib/4f#just\"><code>just</code></a> is to escape the escape\ncharacter, <code>\\</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bas  (just '\\\\')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"\\\" bas)\n  '\\'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bas"
        ]
    },
    {
        "doc": "<h2><code>++buc</code></h2>\n\n<p>Parse dollar sign</p>\n\n<p>Parses ASCII character 36, the dollar sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  buc  (just '$')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"$\" buc)\n  '$'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "buc"
        ]
    },
    {
        "doc": "<h2><code>++cab</code></h2>\n\n<p>Parse underscore</p>\n\n<p>Parses ASCII character 95, the underscore.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cab  (just '_')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"<em>\" cab)\n  '</em>'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cab"
        ]
    },
    {
        "doc": "<h2><code>++cen</code></h2>\n\n<p>Parses percent sign</p>\n\n<p>Parses ASCII character 37, the percent sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cen  (just '%')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"%\" cen)\n  '%'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cen"
        ]
    },
    {
        "doc": "<h2><code>++col</code></h2>\n\n<p>Parse colon</p>\n\n<p>Parses ASCII character 58, the colon</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  col  (just ':')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \":\" col)\n  ':'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "col"
        ]
    },
    {
        "doc": "<h2><code>++com</code></h2>\n\n<p>Parse comma</p>\n\n<p>Parses ASCII character 44, the comma.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  com  (just ',')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \",\" com)\n  ','\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "com"
        ]
    },
    {
        "doc": "<h2><code>++doq</code></h2>\n\n<p>Parse double quote</p>\n\n<p>Parses ASCII character 34, the double quote.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  doq  (just '\"')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"\\\"\" doq)\n  '\"'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "doq"
        ]
    },
    {
        "doc": "<h2><code>++dot</code></h2>\n\n<p>Parse period</p>\n\n<p>Parses ASCII character 46, the period.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dot  (just '.')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \".\" dot)\n  '.'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dot"
        ]
    },
    {
        "doc": "<h2><code>++fas</code></h2>\n\n<p>Parse forward slash</p>\n\n<p>Parses ASCII character 47, the forward slash.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fas  (just '/')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"/\" fas)\n  '/'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "fas"
        ]
    },
    {
        "doc": "<h2><code>++gal</code></h2>\n\n<p>Parse less-than sign</p>\n\n<p>Parses ASCII character 60, the less-than sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gal  (just '&lt;')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"&lt;\" gal)\n  '&lt;'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gal"
        ]
    },
    {
        "doc": "<h2><code>++gar</code></h2>\n\n<p>Parse greater-than sign</p>\n\n<p>Parses ASCII character 62, the greater-than sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gar  (just '&gt;')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \">\" gar)\n  '>'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gar"
        ]
    },
    {
        "doc": "<h2><code>++hax</code></h2>\n\n<p>Parse number sign</p>\n\n<p>Parses ASCII character 35, the number sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hax  (just '#')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"#\" hax)\n  '#'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "hax"
        ]
    },
    {
        "doc": "<h2><code>++hep</code></h2>\n\n<p>Parse hyphen</p>\n\n<p>Parses ASCII character 45, the hyphen.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hep  (just '-')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"-\" hep)\n  '-'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "hep"
        ]
    },
    {
        "doc": "<h2><code>++kel</code></h2>\n\n<p>Parse left curley bracket</p>\n\n<p>Parses ASCII character 123, the left curly bracket. Note that <code>{</code> (<code>kel</code>) opens\na Hoon expression for Hoon string interpolation. To parse it, therefore, it must\nbe escaped.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  kel  (just '{')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"{\" kel)\n  '{'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "kel"
        ]
    },
    {
        "doc": "<h2><code>++ker</code></h2>\n\n<p>Parse right curley bracket</p>\n\n<p>Parses ASCII character 125, the right curly bracket.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ker  (just '}')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"}\" ker)\n  '}'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ker"
        ]
    },
    {
        "doc": "<h2><code>++ket</code></h2>\n\n<p>Parse caret</p>\n\n<p>Parses ASCII character 94, the caret.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ket  (just '^')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"^\" ket)\n  '^'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ket"
        ]
    },
    {
        "doc": "<h2><code>++lus</code></h2>\n\n<p>Parse plus sign</p>\n\n<p>Parses ASCII character 43, the plus sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lus  (just '+')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"+\" lus)\n  '+'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "lus"
        ]
    },
    {
        "doc": "<h2><code>++mic</code></h2>\n\n<p>Parse semicolon</p>\n\n<p>Parses ASCII character 59, the semicolon.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mic  (just ';')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \";\" mic)\n  ';'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mic"
        ]
    },
    {
        "doc": "<h2><code>++pal</code></h2>\n\n<p>Parse left parenthesis</p>\n\n<p>Parses ASCII character 40, the left parenthesis.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pal  (just '(')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"(\" pal)\n  '('\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pal"
        ]
    },
    {
        "doc": "<h2><code>++pam</code></h2>\n\n<p>Parse ampersand</p>\n\n<p>Parses ASCII character 38, the ampersand.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pam  (just '&amp;')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"&amp;\" pam)\n  '&amp;'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pam"
        ]
    },
    {
        "doc": "<h2><code>++par</code></h2>\n\n<p>Parse right parenthesis</p>\n\n<p>Parses ASCII character 41, the right parenthesis.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  par  (just ')')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \")\" par)\n  ')'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "par"
        ]
    },
    {
        "doc": "<h2><code>++pat</code></h2>\n\n<p>Parse \"at\" sign</p>\n\n<p>Parses ASCII character 64, the \"at\" sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pat  (just '@')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"@\" pat)\n  '@'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "pat"
        ]
    },
    {
        "doc": "<h2><code>++sel</code></h2>\n\n<p>Parse left square bracket</p>\n\n<p>Parses ASCII character 91, the left square bracket.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sel  (just '[')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"[\" sel)\n  '['\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sel"
        ]
    },
    {
        "doc": "<h2><code>++ser</code></h2>\n\n<p>Parse right square bracket</p>\n\n<p>Parses ASCII character 93, the right square bracket.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ser  (just ']')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"]\" ser)\n  ']'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ser"
        ]
    },
    {
        "doc": "<h2><code>++sig</code></h2>\n\n<p>Parse tilde</p>\n\n<p>Parses ASCII character 126, the tilde.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sig  (just '~')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~\" sig)\n  '~'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sig"
        ]
    },
    {
        "doc": "<h2><code>++soq</code></h2>\n\n<p>Parse single quote</p>\n\n<p>Parses ASCII character 39, soq. Note the <code>\\</code> in the example is to escape the soq\nbecause soq delimits a <code>cord</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  soq  (just '\\'')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"'\" soq)\n  '\\''\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "soq"
        ]
    },
    {
        "doc": "<h2><code>++tar</code></h2>\n\n<p>Parse asterisk</p>\n\n<p>Parses ASCII character 42, the asterisk.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tar  (just '*')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"<em>\" tar)\n  '</em>'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tar"
        ]
    },
    {
        "doc": "<h2><code>++tic</code></h2>\n\n<p>Parse backtick</p>\n\n<p>Parses ASCII character 96, the backtick.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tic  (just '`')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"<code>\" tic)\n'</code>'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tic"
        ]
    },
    {
        "doc": "<h2><code>++tis</code></h2>\n\n<p>Parse equals sign</p>\n\n<p>Parses ASCII character 61, the equals sign.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tis  (just '=')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"=\" tis)\n  '='\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "tis"
        ]
    },
    {
        "doc": "<h2><code>++wut</code></h2>\n\n<p>Parses question mark</p>\n\n<p>Parses ASCII character 63, the question mark.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wut  (just '?')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"?\" wut)\n  '?'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "wut"
        ]
    },
    {
        "doc": "<h2><code>++zap</code></h2>\n\n<p>Exclamation point</p>\n\n<p>Parses ASCII character 33, the exclamation point zap.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zap  (just '!')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"!\" zap)\n  '!'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "zap"
        ]
    },
    {
        "doc": "<h2><code>++alf</code></h2>\n\n<p>Alphabetic characters</p>\n\n<p>Parse alphabetic characters, both upper and lowercase.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  alf  ;~(pose low hig)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"a\" alf)\n  'a'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"A\" alf)\n  'A'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(scan \"AaBbCc\" (star alf))\n  \"AaBbCc\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "alf"
        ]
    },
    {
        "doc": "<h2><code>++aln</code></h2>\n\n<p>Alphanumeric characters</p>\n\n<p>Parse alphanumeric characters - both alphabetic characters and numbers.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  aln  ;~(pose low hig nud)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"0\" aln)\n  '0'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(scan \"alf42\" (star aln))\n  \"alf42\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "aln"
        ]
    },
    {
        "doc": "<h2><code>++alp</code></h2>\n\n<p>Alphanumeric and <code>-</code></p>\n\n<p>Parse alphanumeric strings and hep, \"-\".</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  alp  ;~(pose low hig nud hep)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"7\" alp)\n  '7'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"s\" alp)\n  's'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(scan \"123abc-\" (star alp))\n  \"123abc-\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "alp"
        ]
    },
    {
        "doc": "<h2><code>++bet</code></h2>\n\n<p>Axis syntax <code>-</code>, <code>+</code></p>\n\n<p>Parse the hep and lus axis syntax.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bet  ;~(pose (cold 2 hep) (cold 3 lus))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"-\" bet)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"+\" bet)\n  3\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bet"
        ]
    },
    {
        "doc": "<h2><code>++bin</code></h2>\n\n<p>Binary to atom</p>\n\n<p>Parse a tape of binary (0s and 1s) and produce its atomic representation.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bin  (bass 2 (most gon but))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"0000\" bin)\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0001\" bin)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0010\" bin)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"100000001111\" bin)\n  2.063\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "bin"
        ]
    },
    {
        "doc": "<h2><code>++but</code></h2>\n\n<p>Binary digit</p>\n\n<p>Parse a single binary digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  but  (cook |=(a=@ (sub a '0')) (shim '0' '1'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"0\" but)\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"1\" but)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"01\" but)\n  ! {1 2}\n  ! 'syntax-error'\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"01\" (star but))\n  ~[0 1]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "but"
        ]
    },
    {
        "doc": "<h2><code>++cit</code></h2>\n\n<p>Octal digit</p>\n\n<p>Parse a single octal digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cit  (cook |=(a=@ (sub a '0')) (shim '0' '7'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"1\" cit)\n  1\n  (scan \"7\" cit)\n  7\n  (scan \"8\" cit)\n  ! {1 1}\n  ! 'syntax-error'\n  ! exit\n  (scan \"60\" (star cit))\n  ~[6 0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cit"
        ]
    },
    {
        "doc": "<h2><code>++dem</code></h2>\n\n<p>Decimal to atom</p>\n\n<p>Parse a decimal number to an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dem  (bass 10 (most gon dit))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"7\" dem)\n  7</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"42\" dem)\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"150000000\" dem)\n  150.000.000</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"12456\" dem)\n  12.456\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dem"
        ]
    },
    {
        "doc": "<h2><code>++dit</code></h2>\n\n<p>Decimal digit</p>\n\n<p>Parse a single decimal digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dit  (cook |=(a=@ (sub a '0')) (shim '0' '9'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"7\" dit)\n  7</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"42\" (star dit))\n  ~[4 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"26000\" (star dit))\n  ~[2 6 0 0 0]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dit"
        ]
    },
    {
        "doc": "<h2><code>++dog</code></h2>\n\n<p><code>.</code> optional gap</p>\n\n<p>Dot followed by an optional gap, used with numbers.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dog  ;~(plug dot gay)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \".\" dog)\n  ['.' ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"a.        \" ;~(pfix alf dog))\n  ['.' ~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dog"
        ]
    },
    {
        "doc": "<h2><code>++dof</code></h2>\n\n<p><code>-</code> optional gap</p>\n\n<p>Hep followed by an optional gap, used with <code>@p</code> &amp; <code>@q</code> syntax.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dof  ;~(plug hep gay)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"-\" dof)\n  ['-' ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"-     \" dof)\n  ['-' ~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dof"
        ]
    },
    {
        "doc": "<h2><code>++doh</code></h2>\n\n<p><code>@p</code> separator</p>\n\n<p>Phonetic base phrase separator</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  doh  ;~(plug ;~(plug hep hep) gay)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"--\" doh)\n  [['-' '-'] ~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"--     \" doh)\n  [['-' '-'] ~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "doh"
        ]
    },
    {
        "doc": "<h2><code>++dun</code></h2>\n\n<p><code>--</code> to <code>~</code></p>\n\n<p>Parse phep, <code>--</code>, to null, <code>~</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dun  (cold ~ ;~(plug hep hep))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"--\" dun)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "dun"
        ]
    },
    {
        "doc": "<h2><code>++duz</code></h2>\n\n<p><code>==</code> to <code>~</code></p>\n\n<p>Parse stet, <code>==</code>, to null <code>~</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  duz  (cold ~ ;~(plug tis tis))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"==\" duz)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "duz"
        ]
    },
    {
        "doc": "<h2><code>++gah</code></h2>\n\n<p>Newline or ' '</p>\n\n<p>Whitespace component, either newline or space.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gah  (mask [`@`10 ' ' ~])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(scan \" \\0a \\0a\" (star gah))\n  \" \\0a \\0a\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gah"
        ]
    },
    {
        "doc": "<h2><code>++gap</code></h2>\n\n<p>Plural whitespace</p>\n\n<p>Separates tall runes</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gap  (cold ~ ;~(plug gaq (star ;~(pose vul gah))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(scan \" \\0a \\0a\" gap)\n  \"\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\\0a   \\0a XYZ\" ;~(pfix gap (jest 'XYZ')))\n  'XYZ'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gap"
        ]
    },
    {
        "doc": "<h2><code>++gaq</code></h2>\n\n<p>End of line</p>\n\n<p>Two spaces, a newline, or comment.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gaq  ;~  pose\n             (just `@`10)\n             ;~(plug gah ;~(pose gah vul))\n             vul\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"123\\0a\" ;~(sfix dem gaq))\n  123</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"123 :: foo\\0a\" ;~(sfix dem gaq))\n  123\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gaq"
        ]
    },
    {
        "doc": "<h2><code>++gaw</code></h2>\n\n<p>Classic whitespace</p>\n\n<p>Terran whitespace.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gaw  (cold ~ (star ;~(pose vul gah)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"  \\0a  :: foo  \\0a\" gaw)\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"  \" gaw)\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\\0a\" gaw)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gaw"
        ]
    },
    {
        "doc": "<h2><code>++gay</code></h2>\n\n<p>Optional gap</p>\n\n<p>Optional gap.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gay  ;~(pose gap (easy ~))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"  \" gay)\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"     \" gay)\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\\0a\" gay)\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\" gay)\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gay"
        ]
    },
    {
        "doc": "<h2><code>++gon</code></h2>\n\n<p>Long numbers</p>\n\n<p>Parse long numbers - Numbers which wrap around the shell with the line</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gon  ;~(pose ;~(plug bas gay fas) (easy ~))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>'abc\\\n    /def'\n  'abcdef'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\\\\0a/\" gon)\n  ['\\' ~ '/']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gon"
        ]
    },
    {
        "doc": "<h2><code>++gul</code></h2>\n\n<p>Axis syntax <code>&lt;</code> or <code>&gt;</code></p>\n\n<p>Parse the axis gal and gar axis syntax.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  gul  ;~(pose (cold 2 gal) (cold 3 gar))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"&lt;\" gul)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \">\" gul)\n  3\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "gul"
        ]
    },
    {
        "doc": "<h2><code>++hex</code></h2>\n\n<p>Hex to atom</p>\n\n<p>Parse any hexadecimal number to an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hex  (bass 16 (most gon hit))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"a\" hex)\n  10</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"A\" hex)\n  10</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"2A\" hex)\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"1ee7\" hex)\n  7.911</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"1EE7\" hex)\n  7.911</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"1EE7F7\" hex)\n  2.025.463</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"1EE7F7\" hex)\n  0x1e.e7f7\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "hex"
        ]
    },
    {
        "doc": "<h2><code>++hig</code></h2>\n\n<p>Uppercase</p>\n\n<p>Parse a single uppercase letter.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hig  (shim 'A' 'Z')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"G\" hig)\n  'G'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" (star hig))\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "hig"
        ]
    },
    {
        "doc": "<h2><code>++hit</code></h2>\n\n<p>Hex digits</p>\n\n<p>Parse a single hexadecimal digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hit  ;~  pose\n           dit\n           (cook |=(a=char (sub a 87)) (shim 'a' 'f'))\n           (cook |=(a=char (sub a 55)) (shim 'A' 'F'))\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"a\" hit)\n  10</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"A\" hit)\n  10</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"2A\" (star hit))\n  ~[2 10]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "hit"
        ]
    },
    {
        "doc": "<h2><code>++iny</code></h2>\n\n<p>Indentation block</p>\n\n<p>Apply <code>rule</code> to indented block starting at current column number, omitting\nthe leading whitespace.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sef</code> is a <code>rule</code></p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  iny\n  |*  sef=rule\n  |=  nail  ^+  (sef)\n  =+  [har tap]=[p q]:+&lt;\n  =+  lev=(fil 3 (dec q.har) ' ')\n  =+  eol=(just `@t`10)\n  =+  =-  roq=((star ;~(pose prn ;~(sfix eol (jest lev)) -)) har tap)\n      ;~(simu ;~(plug eol eol) eol)\n  ?~  q.roq  roq\n  =+  vex=(sef har(q 1) p.u.q.roq)\n  =+  fur=p.vex(q (add (dec q.har) q.p.vex))\n  ?~  q.vex  vex(p fur)\n  =-  vex(p fur, u.q -)\n  :+  &amp;3.vex\n    &amp;4.vex(q.p (add (dec q.har) q.p.&amp;4.vex))\n  =+  res=|4.vex\n  |-  ?~  res  |4.roq\n  ?.  =(10 -.res)  [-.res $(res +.res)]\n  (welp [`@t`10 (trip lev)] $(res +.res))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(scan \"   foo\\0a   bar\" ;~(pfix ace ace ace (iny (star ;~(pose prn (just '\\0a'))))))\n  \"foo\\0abar\"\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p>Note the amount of indentation whitespace to be stripped from the beginning of\neach line is determined by the value of <code>q</code> (the column) in the <code>hair</code> when\n<code>++iny</code> is first called. This means something like the <code>pfix</code> expression in the\nexample above is necessary to set the level of indentation. Additionally, the\n<code>rule</code> given to <code>++iny</code> must consume the whole line including the line ending.</p>\n\n<hr />\n",
        "keys": [
            "iny"
        ]
    },
    {
        "doc": "<h2><code>++low</code></h2>\n\n<p>Lowercase</p>\n\n<p>Parse a single lowercase letter.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  low  (shim 'a' 'z')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"g\" low)\n  'g'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "low"
        ]
    },
    {
        "doc": "<h2><code>++mes</code></h2>\n\n<p>Hexbyte</p>\n\n<p>Parse a hexbyte.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mes  %+  cook\n           |=({a/@ b/@} (add (mul 16 a) b))\n         ;~(plug hit hit)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"2A\" mes)\n  42</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"42\" mes)\n  66\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mes"
        ]
    },
    {
        "doc": "<h2><code>++nix</code></h2>\n\n<p>Letters and underscore</p>\n\n<p>Parse Letters and <code>_</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  nix  (boss 256 (star ;~(pose aln cab)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(scan \"as<em>me\" nix)\n  'as</em>me'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "nix"
        ]
    },
    {
        "doc": "<h2><code>++nud</code></h2>\n\n<p>Numeric</p>\n\n<p>Parse a numeric character - A number.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  nud  (shim '0' '9')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"0\" nud)\n  '0'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"7\" nud)\n  '7'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "nud"
        ]
    },
    {
        "doc": "<h2><code>++prn</code></h2>\n\n<p>Printable character</p>\n\n<p>Parse any printable character.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  prn  ;~(less (just `@`127) (shim 32 256))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"h\" prn)\n  'h'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"!\" prn)\n  '!'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\\01\" prn)\n  ! {1 1}\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "prn"
        ]
    },
    {
        "doc": "<h2><code>++qat</code></h2>\n\n<p>Chars in blockcord</p>\n\n<p>Parse a single character contained in a mult-line cord block.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qat  ;~  pose\n             prn\n             ;~(less ;~(plug (just `@`10) soz) (just `@`10))\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>^-  tape\n    %+  scan\n      \"'''\\0aabc\\0adef\\0aghi\\0a'''\"\n    %+  ifix\n      :-  ;~(plug soz (just <code>@</code>10))\n      ;~(plug (just <code>@</code>10) soz)\n    (star qat)\n  \"abc\\0adef\\0aghi\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "qat"
        ]
    },
    {
        "doc": "<h2><code>++qit</code></h2>\n\n<p>Chars in cord</p>\n\n<p>Parse an individual character to its cord atom representation. Escaped\ncharacters are converted to the value they represent.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qit  ;~  pose                                       ::  chars in a cord\n             ;~(less bas soq prn)\n             ;~(pfix bas ;~(pose bas soq mes))          ::  escape chars\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"%\" qit)\n  '%'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(scan \"cord\" (star qit))\n  \"cord\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(scan \"\\0a\" (star qit))\n  \"\\0a\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "qit"
        ]
    },
    {
        "doc": "<h2><code>++qut</code></h2>\n\n<p>Cord</p>\n\n<p>Parse single-soq cord with <code>\\{gap}/</code> anywhere in the middle, or triple-single\nquote (aka triple-soq) cord, between which must be in an indented block.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qut  ;~  simu  soq\n           ;~  pose\n             ;~  less  soz\n               (ifix [soq soq] (boss 256 (more gon qit)))\n             ==\n             =+  hed=;~(pose ;~(plug (plus ace) vul) (just '\\0a'))\n             %-  iny  %+  ifix\n               :-  ;~(plug soz hed)\n               ;~(plug (just '\\0a') soz)\n             (boss 256 (star qat))\n           ==\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(scan \"'cord'\" qut)\n  'cord'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"'''\\0aabc\\0adef\\0a'''\" qut)\n  'abc\\0adef'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "qut"
        ]
    },
    {
        "doc": "<h2><code>++soz</code></h2>\n\n<p>Delimiting <code>'''</code></p>\n\n<p>Parse a triple-single quote, used for multiline strings.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  soz  ;~(plug soq soq soq)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"'''\" soz)\n  ['\\'' '\\'' '\\'']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "soz"
        ]
    },
    {
        "doc": "<h2><code>++sym</code></h2>\n\n<p>Term</p>\n\n<p>A term: a lowercase letter, followed by letters, numbers, or <code>-</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sym\n  %+  cook\n    |=(a=tape (rap 3 ^-((list @) a)))\n  ;~(plug low (star ;~(pose nud low hep)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>term</code>(scan \"sam-2\" sym)\n  %sam-2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sym"
        ]
    },
    {
        "doc": "<h2><code>++mixed-case-symbol</code></h2>\n\n<p>Mixed-case term</p>\n\n<p>The same as <a href=\"#sym\"><code>++sym</code></a> but allowing uppercase letters.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mixed-case-symbol\n  %+  cook\n    |=(a=tape (rap 3 ^-((list @) a)))\n  ;~(plug alf (star alp))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>term</code>(scan \"sAm-2\" mixed-case-symbol)\n  %sAm-2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mixed-case-symbol"
        ]
    },
    {
        "doc": "<h2><code>++ven</code></h2>\n\n<p><code>+&gt;-</code> axis syntax</p>\n\n<p>Axis syntax parser</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ven  ;~  (comp |=([a=@ b=@] (peg a b)))\n           bet\n           =+  hom=`?`|\n           |=  tub=nail\n           ^-  (like @)\n           =+  vex=?:(hom (bet tub) (gul tub))\n           ?~  q.vex\n             [p.tub [~ 1 tub]]\n           =+  wag=$(p.tub p.vex, hom !hom, tub q.u.q.vex)\n           ?&gt;  ?=(^ q.wag)\n           [p.wag [~ (peg p.u.q.vex p.u.q.wag) q.u.q.wag]]\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"->+\" ven)\n  11</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"->+&lt;-\" ven)\n  44\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ven"
        ]
    },
    {
        "doc": "<h2><code>++vit</code></h2>\n\n<p>Base64 digit</p>\n\n<p>Parse a standard base64 digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  vit\n  ;~  pose\n    (cook |=(a=@ (sub a 65)) (shim 'A' 'Z'))\n    (cook |=(a=@ (sub a 71)) (shim 'a' 'z'))\n    (cook |=(a=@ (add a 4)) (shim '0' '9'))\n    (cold 62 (just '-'))\n    (cold 63 (just '+'))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"C\" vit)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"c\" vit)\n  28</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"2\" vit)\n  54</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"-\" vit)\n  62\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "vit"
        ]
    },
    {
        "doc": "<h2><code>++vul</code></h2>\n\n<p>Comments to null</p>\n\n<p>Parse comments and produce a null. Note that a comment must be ended\nwith a newline character.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  vul  %+  cold   ~\n         ;~  plug  col  col\n           (star prn)\n           (just `@`10)\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"::this is a comment \\0a\" vul)\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"::this is a comment \" vul)\n  ! {1 21}\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "vul"
        ]
    },
    {
        "doc": "<h2><code>++ab</code></h2>\n\n<p>Primitive parser engine</p>\n\n<p>A core containing numeric parser primitives.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ab\n  |%\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>ab\n  &lt;36.ecc 414.gly 100.xkc 1.ypj %164>\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bix:ab</code></h3>\n\n<p>Parse hex pair</p>\n\n<p>Parsing <code>rule</code>. Parses a pair of base-16 digits. Used in escapes.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bix  (bass 16 (stun [2 2] six))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"07\" bix:ab)\n  7\n  (scan \"51\" bix:ab)\n  81\n  (scan \"a3\" bix:ab)\n  163\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fem:ab</code></h3>\n\n<p>Parse base58check char</p>\n\n<p>Parse a single base58check character.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fem  (sear |=(a=@ (cha:fa a)) aln)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"6\" fem:ab)\n  5</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"Z\" fem:ab)\n  32</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"j\" fem:ab)\n  42\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++haf:ab</code></h3>\n\n<p>Parse non-doz phonetic pair</p>\n\n<p>Parsing <code>rule</code>. Parses an atom of aura <code>@pE</code>, a phrase of two bytes encoded\nphonetically. If the leading syllable is <code>doz</code> (<code>0</code>), parsing will fail.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  haf  (bass 256 ;~(plug tep tiq (easy ~)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@p</code>(scan \"sampel\" haf:ab)\n  ~sampel</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"dozpel\" haf:ab)\n  {1 4}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++hef:ab</code></h3>\n\n<p>Parse non-dozzod phonetic pair</p>\n\n<p>Parsing <code>rule</code>. Parses an atom of aura <code>@pE</code> without leading <code>~</code> or <code>.~</code>, a\nphrase of two bytes encoded phonetically. If it's <code>dozzod</code>, parsing will fail.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hef  %+  sear  |=(a=@ ?:(=(a 0) ~ (some a)))\n         %+  bass  256\n         ;~(plug tip tiq (easy ~))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@p</code>(scan \"sampel\" hef:ab)\n  ~sampel</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"dozpel\" hef:ab)\n  ~pel</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"dozzod\" hef:ab)\n  {1 7}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++hif:ab</code></h3>\n\n<p>Parse phonetic pair</p>\n\n<p>Parsing <code>rule</code>. Parses an atom of aura <code>@pE</code>, without leading <code>~</code> or <code>.~</code>. A\nphrase of two bytes encoded phonetically.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hif  (boss 256 ;~(plug tip tiq (easy ~)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@p</code>(scan \"doznec\" hif:ab)\n  ~nec</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"pittyp\" hif:ab)\n  ~pittyp\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++hof:ab</code></h3>\n\n<p>Parse 2-4 @q phonetic pairs</p>\n\n<p>Parsing <code>rule</code>. Parses an atom of aura <code>@q</code> (non-scrambled <code>@p</code>), without\nleading <code>~</code> or <code>.~</code>, of between two and four phrases.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hof  (bass 0x1.0000 ;~(plug hef (stun [1 3] ;~(pfix hep hif))))\n</code></p>\n\n<h4>Example</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-palnet\" hof:ab)\n  .~sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-sampel-palnet\" hof:ab)\n  .~sampel-sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-sampel-sampel-palnet\" hof:ab)\n  .~sampel-sampel-sampel-palnet\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++huf:ab</code></h3>\n\n<p>Parse 1-4 @q phonetic pairs</p>\n\n<p>Parsing <code>rule</code>. Parses an atom of aura <code>@q</code> (non-scrambled <code>@p</code>), without\nleading <code>~</code> or <code>.~</code>, of between one and four phrases.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  huf  (bass 0x1.0000 ;~(plug hef (stun [0 3] ;~(pfix hep hif))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel\" huf:ab)\n  .~sampel</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-palnet\" huf:ab)\n  .~sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-sampel-palnet\" huf:ab)\n  .~sampel-sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-sampel-sampel-palnet\" huf:ab)\n  .~sampel-sampel-sampel-palnet\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++hyf:ab</code></h3>\n\n<p>Parse four @q phonetic pairs</p>\n\n<p>Parsing <code>rule</code>. Parses an atom of aura <code>@q</code> (non-scrambled <code>@p</code>), without\nleading <code>~</code> or <code>.~</code>, of exactly four phrases.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hyf  (bass 0x1.0000 ;~(plug hif (stun [3 3] ;~(pfix hep hif))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-sampel-sampel-palnet\" hyf:ab)\n  .~sampel-sampel-sampel-palnet\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++pev:ab</code></h3>\n\n<p>Parse 1-5 @uv base-32 chars</p>\n\n<p>Parsing <code>rule</code>. Parses one to five <code>@uv</code> base-32 digits without the leading <code>0v</code>\nor leading zeros.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pev  (bass 32 ;~(plug sev (stun [0 4] siv)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"du3ja\" pev:ab)\n  0vdu3ja</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"3ja\" pev:ab)\n  0v3ja</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"a\" pev:ab)\n  0va\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++pew:ab</code></h3>\n\n<p>Parse 1-5 @uw base-64 chars</p>\n\n<p>Parsing <code>rule</code>. Parses one to five <code>@uw</code> base-64 digits without the leading <code>0w</code>\nor leading zeros.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pew  (bass 64 ;~(plug sew (stun [0 4] siw)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"6U0gP\" pew:ab)\n  0w6U0gP</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"gP\" pew:ab)\n  0wgP</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"P\" pew:ab)\n  0wP\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++piv:ab</code></h3>\n\n<p>Parse 5 @uv base-32 chars</p>\n\n<p>Parsing <code>rule</code>. Parses exactly five <code>@uv</code> base-32 digits without the leading\n<code>0v</code> or leading zeros.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  piv  (bass 32 (stun [5 5] siv))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"du3ja\" piv:ab)\n  0vdu3ja</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"u3ja\" piv:ab)\n  {1 5}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++piw:ab</code></h3>\n\n<p>Parse 5 @uw base-64 chars</p>\n\n<p>Parsing <code>rule</code>. Parses exactly five <code>@uw</code> base-64 digits without the leading\n<code>0w</code> or leading zeros.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  piw  (bass 64 (stun [5 5] siw))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"6U0gP\" piw:ab)\n  0w6U0gP</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"U0gP\" piw:ab)\n  {1 5}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++qeb:ab</code></h3>\n\n<p>Parse 1-4 binary digits</p>\n\n<p>Parsing <code>rule</code>. Parses a binary number of up to 4 digits in length without a\nleading zero.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qeb  (bass 2 ;~(plug seb (stun [0 3] sib)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"1010\" qeb:ab)\n  0b1010</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"10\" qeb:ab)\n  0b10</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"1\" qeb:ab)\n  0b1</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"0\" qeb:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++qex:ab</code></h3>\n\n<p>Parse 1-4 hex digits</p>\n\n<p>Parsing <code>rule</code>. Parses a hexadecimal number of up to 4 digits in length without\na leading zero.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qex  (bass 16 ;~(plug sex (stun [0 3] hit)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"beef\" qex:ab)\n  0xbeef</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"ef\" qex:ab)\n  0xef</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"f\" qex:ab)\n  0xf\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++qib:ab</code></h3>\n\n<p>Parse 4 binary</p>\n\n<p>Parsing <code>rule</code>. Parses exactly four binary digits - may have leading zeros.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qib  (bass 2 (stun [4 4] sib))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"0001\" qib:ab)\n  0b1</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"1001\" qib:ab)\n  0b1001</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"1\" qib:ab)\n  {1 2}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++qix:ab</code></h3>\n\n<p>Parse 4 hex</p>\n\n<p>Parsing <code>rule</code>. Parses exactly four hexadecimal digits - may have leading zeros.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  qix  (bass 16 (stun [4 4] six))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"beef\" qix:ab)\n  0xbeef</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"0000\" qix:ab)\n  0x0</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"ef\" qix:ab)\n  {1 3}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++seb:ab</code></h3>\n\n<p>Parse 1</p>\n\n<p>Parsing <code>rule</code>. Parses the number 1.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  seb  (cold 1 (just '1'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"1\" seb:ab)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"2\" seb:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sed:ab</code></h3>\n\n<p>Parse decimal</p>\n\n<p>Parsing <code>rule</code>. Parses a nonzero decimal digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sed  (cook |=(a=@ (sub a '0')) (shim '1' '9'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"5\" sed:ab)\n  5</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0\" sed:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sev:ab</code></h3>\n\n<p>Parse base-32</p>\n\n<p>Parsing <code>rule</code>. Parses a nonzero base-32 digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sev  ;~(pose sed sov)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"2\" sev:ab)\n  0v2</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"j\" sev:ab)\n  0vj</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"0\" sev:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sew:ab</code></h3>\n\n<p>Parse base-64</p>\n\n<p>Parsing <code>rule</code>. Parses a nonzero base-64 digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sew  ;~(pose sed sow)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"I\" sew:ab)\n  0wI</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"2\" sew:ab)\n  0w2</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"0\" sew:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sex:ab</code></h3>\n\n<p>Parse hex</p>\n\n<p>Parsing <code>rule</code>. Parses a non-zero hexadecimal digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sex  ;~(pose sed sox)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"a\" sex:ab)\n  0xa</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"2\" sex:ab)\n  0x2</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"0\" sex:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sib:ab</code></h3>\n\n<p>Parse binary</p>\n\n<p>Parsing <code>rule</code>. Parses a binary digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sib  (cook |=(a=@ (sub a '0')) (shim '0' '1'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"1\" sib:ab)\n  0b1</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"0\" sib:ab)\n  0b0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sid:ab</code></h3>\n\n<p>Parse decimal</p>\n\n<p>Parsing <code>rule</code>. Parses a decimal digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sid  (cook |=(a=@ (sub a '0')) (shim '0' '9'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"5\" sid:ab)\n  5</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0\" sid:ab)\n  0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++siv:ab</code></h3>\n\n<p>Parse base-32</p>\n\n<p>Parsing <code>rule</code>. Parses a base-32 digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  siv  ;~(pose sid sov)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"r\" siv:ab)\n  0vr</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"5\" siv:ab)\n  0v5</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"0\" siv:ab)\n  0v0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++siw:ab</code></h3>\n\n<p>Parse base-64</p>\n\n<p>Parsing <code>rule</code>. Parses a base-64 digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  siw  ;~(pose sid sow)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"M\" siw:ab)\n  0wM</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"0\" siw:ab)\n  0w0</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"c\" siw:ab)\n  0wc\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++six:ab</code></h3>\n\n<p>Parse hex</p>\n\n<p>Parsing <code>rule</code>. Parses a hexadecimal digit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  six  ;~(pose sid sox)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"e\" six:ab)\n  0xe</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"0\" six:ab)\n  0x0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sov:ab</code></h3>\n\n<p>Parse @uv base-32 letter</p>\n\n<p>Parsing <code>rule</code>. Parses a <code>@uv</code> base-32 letter (but not a number).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sov  (cook |=(a=@ (sub a 87)) (shim 'a' 'v'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"c\" sov:ab)\n  0vc</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"j\" sov:ab)\n  0vj</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"5\" sov:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sow:ab</code></h3>\n\n<p>Parse @uw base-64 letter/symbol</p>\n\n<p>Parsing <code>rule</code>. Parses a base-64 letter/symbol (but not number).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sow  ;~  pose\n           (cook |=(a=@ (sub a 87)) (shim 'a' 'z'))\n           (cook |=(a=@ (sub a 29)) (shim 'A' 'Z'))\n           (cold 62 (just '-'))\n           (cold 63 (just '~'))\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"M\" sow:ab)\n  0wM</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"5\" sow:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++sox:ab</code></h3>\n\n<p>Parse hex letter</p>\n\n<p>Parsing <code>rule</code>. Parses a hexadecimal letter (but not number).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sox  (cook |=(a=@ (sub a 87)) (shim 'a' 'f'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"e\" sox:ab)\n  0xe</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"5\" sox:ab)\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ted:ab</code></h3>\n\n<p>Parse 1-999 decimal</p>\n\n<p>Parsing <code>rule</code>. Parses a decimal number of up to 3 digits without a\nleading zero.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ted  (bass 10 ;~(plug sed (stun [0 2] sid)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"214\" ted:ab)\n  214</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"2\" ted:ab)\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"2161\" ted:ab)\n  {1 4}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tep:ab</code></h3>\n\n<p>Parse non-doz leading phonetic byte</p>\n\n<p>Parsing <code>rule</code>. Parses the leading phonetic byte , which represents a syllable.\nFails if it is <code>doz</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tep  (sear |=(a=@ ?:(=(a 'doz') ~ (ins:po a))) til)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"sam\" tep:ab)\n  4</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"wic\" tep:ab)\n  99\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tip:ab</code></h3>\n\n<p>Leading phonetic byte</p>\n\n<p>Parsing <code>rule</code>. Parses the leading phonetic byte, which represents a syllable.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tip  (sear |=(a=@ (ins:po a)) til)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"doz\" tip:ab)\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"pit\" tip:ab)\n  242\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tiq:ab</code></h3>\n\n<p>Trailing phonetic syllable</p>\n\n<p>Parsing <code>rule</code>. Parses the trailing phonetic byte, which represents a syllable.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tiq  (sear |=(a=@ (ind:po a)) til)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"zod\" tiq:ab)\n  0\n  (scan \"nec\" tiq:ab)\n  1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tid:ab</code></h3>\n\n<p>Parse 3 decimal digits</p>\n\n<p>Parsing <code>rule</code>. Parses exactly three decimal digits.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tid  (bass 10 (stun [3 3] sid))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"013\" tid:ab)\n  13</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"999\" tid:ab)\n  999</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"99\" tid:ab)\n  {1 3}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++til:ab</code></h3>\n\n<p>Parse 3 lowercase</p>\n\n<p>Parsing <code>rule</code>. Parses exactly three lowercase letters.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  til  (boss 256 (stun [3 3] low))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>(scan \"mer\" til:ab)\n  'mer'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scan \"me\" til:ab)\n  {1 3}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++urs:ab</code></h3>\n\n<p>Parse knot characters</p>\n\n<p>Parsing rule. Parses characters from an atom of the knot aura <code>@ta</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  urs  %+  cook\n           |=(a=tape (rap 3 ^-((list @) a)))\n         (star ;~(pose nud low hep dot sig cab))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ta</code>(scan \"asa-lom<em>tak\" urs:ab)\n  ~.asa-lom</em>tak\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++urt:ab</code></h3>\n\n<p>Parse knot without underscores</p>\n\n<p>Parsing <code>rule</code>. Parses all characters of the knot aura <code>@ta</code> except for cab,\n<code>_</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  urt  %+  cook\n           |=(a=tape (rap 3 ^-((list @) a)))\n         (star ;~(pose nud low hep dot sig))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ta</code>(scan \"asa-lom.t0k\" urt:ab)\n  ~.asa-lom.t0k\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++voy:ab</code></h3>\n\n<p>Parse bas, soq, or bix</p>\n\n<p>Parsing <code>rule</code>. Parses an escaped backslash, single quote, or hex pair byte.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  voy  ;~(pfix bas ;~(pose bas soq bix))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"\\\\\" voy:ab)\n  '\\'</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\\'\" voy:ab)\n  '\\''</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"\\0a\" voy:ab)\n  '\\0a'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ab"
        ]
    },
    {
        "doc": "<h2><code>++ag</code></h2>\n\n<p>Top-level atom parser engine</p>\n\n<p>A core containing top-level atom parsers.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ag\n  |%\n</code></p>\n\n<hr />\n\n<h3><code>++ape:ag</code></h3>\n\n<p>Parse 0 or rule</p>\n\n<p>Parser modifier. Parses 0 or the sample rule <code>fel</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>fel</code> is a <code>rule</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>rule</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ape  |*(fel=rule ;~(pose (cold 0 (just '0')) fel))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"0\" (ape:ag (cold 2 (just '2'))))\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"2\" (ape:ag (cold 2 (just '2'))))\n  2</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"3\" (ape:ag (cold 2 (just '2'))))\n  {1 1}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bay:ag</code></h3>\n\n<p>Parses binary number</p>\n\n<p>Parsing <code>rule</code>. Parses a binary number without a leading zero.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bay  (ape (bass 16 ;~(plug qeb:ab (star ;~(pfix dog qib:ab)))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ub</code>(scan \"101.1100.0011.1010\" bay:ag)\n  0b101.1100.0011.1010\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++bip:ag</code></h3>\n\n<p>Parse IPv6</p>\n\n<p>Parsing rule. Parses a <code>@is</code>, an IPv6 address.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bip  =+  tod=(ape qex:ab)\n         (bass 0x1.0000 ;~(plug tod (stun [7 7] ;~(pfix dog tod))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@is</code>(scan \"0.0.ea.3e6c.0.0.0.0\" bip:ag)\n  .0.0.ea.3e6c.0.0.0.0\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dem:ag</code></h3>\n\n<p>Parse decimal with dots</p>\n\n<p>Parsing <code>rule</code>. Parses a decimal number that includes dot separators.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dem  (ape (bass 1.000 ;~(plug ted:ab (star ;~(pfix dog tid:ab)))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"52\" dem:ag)\n  52\n  (scan \"13.507\" dem:ag)\n  13.507\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dim:ag</code></h3>\n\n<p>Parse decimal number</p>\n\n<p>Parsing rule. Parses a decimal number without a leading zero.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dim  (ape dip)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"52\" dim:ag)\n  52</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0\" dim:ag)\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"13507\" dim:ag)\n  13.507</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"013507\" dim:ag)\n  {1 2}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++dum:ag</code></h3>\n\n<p>Parse decimal with leading <code>0</code></p>\n\n<p>Parsing rule. Parses a decmial number with leading zeroes.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  dum  (bass 10 (plus sid:ab))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"52\" dum:ag)\n  52\n  (scan \"0000052\" dum:ag)\n  52\n  (scan \"13507\" dim:ag)\n  13.507\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fed:ag</code></h3>\n\n<p>Parse phonetic base</p>\n\n<p>Parsing rule. Parses an atom of aura <code>@p</code>, the phonetic base.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fed  %+  cook  fynd:ob\n         ;~  pose\n           %+  bass  0x1.0000.0000.0000.0000          ::  oversized\n             ;~  plug\n               huf:ab\n               (plus ;~(pfix doh hyf:ab))\n             ==\n           hof:ab                                     ::  planet or moon\n           haf:ab                                     ::  star\n           tiq:ab                                     ::  galaxy\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@p</code>(scan \"zod\" fed:ag)\n  ~zod</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"sampel\" fed:ag)\n  ~sampel</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"sampel-palnet\" fed:ag)\n  ~sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"sampel-palnet-sampel-palnet\" fed:ag)\n  ~sampel-palnet-sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(scan \"tillyn-nillyt-tasfyn-partyv--novweb-talrud-talmud-sonfyr\" fed:ag)\n  ~tillyn-nillyt-tasfyn-partyv--novweb-talrud-talmud-sonfyr\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++feq:ag</code></h3>\n\n<p>Parse <code>@q</code> phonetic base</p>\n\n<p>Parsing rule. Parses an atom of aura <code>@q</code> (an unscrambled <code>@p</code>).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  feq  %+  cook  |=(a=(list @) (rep 4 (flop a)))\n         ;~  plug\n           ;~(pose hif:ab tiq:ab)\n           (star ;~(pfix dof hif:ab))\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel\" feq:ag)\n  .~sampel</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-palnet\" feq:ag)\n  .~sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-sampel-palnet\" feq:ag)\n  .~sampel-sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-palnet-sampel-palnet\" feq:ag)\n  .~sampel-palnet-sampel-palnet</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@q</code>(scan \"sampel-sampel-sampel-sampel-palnet-sampel-palnet\" feq:ag)\n  .~sampel-sampel-sampel-sampel-palnet-sampel-palnet\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++fim:ag</code></h3>\n\n<p>Parse base58check</p>\n\n<p>Parse a base58check value, check checksum, and return decoded value sans-checksum. If\nthe checksum check fails, parsing will fail.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fim  (sear den:fa (bass 58 (plus fem:ab)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>With valid checksum:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(enc:fa 0xdead.beef)\n  0xdead.beef.938b.8b0c\n  (c-co:co 0xdead.beef.938b.8b0c)\n  \"eFGDJSVvRHd\"\n  <code>@ux</code>(scan \"eFGDJSVvRHd\" fim:ag)\n  0xdead.beef\n  ```</p>\n</blockquote>\n\n<p>With invalid checksum:</p>\n\n<p>```</p>\n\n<blockquote>\n  <p>(c-co:co 0xdead.beef.ffff)\n  \"2utUWE41U\"\n  <code>@ux</code>(scan \"2utUWE41U\" fim:ag)\n  {1 10}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++hex:ag</code></h3>\n\n<p>Parse hex</p>\n\n<p>Parsing <code>rule</code>. Parses a hexadecimal number</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hex  (ape (bass 0x1.0000 ;~(plug qex:ab (star ;~(pfix dog qix:ab)))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"4\" hex:ag)\n  0x4</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"1a\" hex:ag)\n  0x1a</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(scan \"3.ac8d\" hex:ag)\n  0x3.ac8d\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++lip:ag</code></h3>\n\n<p>Parse IPv4 address</p>\n\n<p>Parsing <code>rule</code>. Parses an IPv4 address.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  lip  =+  tod=(ape ted:ab)\n         (bass 256 ;~(plug tod (stun [3 3] ;~(pfix dog tod))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@if</code>(scan \"127.0.0.1\" lip:ag)\n  .127.0.0.1\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++mot:ag</code></h3>\n\n<p>Parse numerical month</p>\n\n<p>Parse a numerical month (1-12).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mot  ;~  pose\n           ;~  pfix\n             (just '1')\n             (cook |=(a=@ (add 10 (sub a '0'))) (shim '0' '2'))\n           ==\n           sed:ab\n         ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"0\" mot:ag)\n  {1 1}\n  syntax error</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"1\" mot:ag)\n  1</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"6\" mot:ag)\n  6</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"12\" mot:ag)\n  12</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"13\" mot:ag)\n  {1 2}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++viz:ag</code></h3>\n\n<p>Parse Base-32 with dots</p>\n\n<p>Parsing <code>rule</code>. Parses a Base-32 number with dot separators.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  viz  (ape (bass 0x200.0000 ;~(plug pev:ab (star ;~(pfix dog piv:ab)))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"e2.ol4pm\" viz:ag)\n  0ve2.ol4pm\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++vum:ag</code></h3>\n\n<p>Parse base-32 string</p>\n\n<p>Parsing <code>rule</code>. Parses a raw base-32 string (without dots).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  vum  (bass 32 (plus siv:ab))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uv</code>(scan \"e2ol4pm\" vum:ag)\n  0ve2.ol4pm\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++wiz:ag</code></h3>\n\n<p>Parse base-64</p>\n\n<p>Parsing <code>rule</code>. Parses a base-64 number.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  wiz  (ape (bass 0x4000.0000 ;~(plug pew:ab (star ;~(pfix dog piw:ab)))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@uw</code>(scan \"e2O.l4Xpm\" wiz:ag)\n  0we2O.l4Xpm\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ag"
        ]
    },
    {
        "doc": "<h2><code>++mu</code></h2>\n\n<p>Core used to scramble 16-bit atoms</p>\n\n<p>A door that contains arms that are used to scramble two atoms, <code>top</code>\nand <code>bot</code>. Used especially in the phonetic base to disguise the\nrelationship between a planet and its star.</p>\n\n<h4>Accepts</h4>\n\n<p><code>top</code> is an atom.</p>\n\n<p><code>bot</code> is an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mu\n  |_  [top=@ bot=@]\n</code></p>\n\n<hr />\n\n<h3><code>++zag:mu</code></h3>\n\n<p>Add bottom into top</p>\n\n<p>Produces the cell of <code>top</code> and <code>bot</code> with <code>top</code> scrambled to the result\nof adding <code>bot</code> to <code>top</code> modulo 16. Used to scramble the name of a\nplanet.</p>\n\n<h4>Accepts</h4>\n\n<p><code>top</code> &amp; <code>bot</code> are atoms, and are the sample of <code>+mu</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(pair @ @)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zag  [p=(end 4 (add top bot)) q=bot]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>[@ux @ux]</code>~(zag mu 0x20e0 0x201)\n  [0x22e1 0x201]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zig:mu</code></h3>\n\n<p>Subtract bottom from top</p>\n\n<p>The inverse of <a href=\"#zagmu\"><code>++zag</code></a>. Produces the cell of <code>top</code> and <code>bot</code> with\n<code>top</code> unscrambled. The unscrambled <code>top</code> is the sum of the sample <code>top</code> and the\n16-bit complement of <code>bot</code>. Used to unscramble the name of the planet.</p>\n\n<h4>Accepts</h4>\n\n<p><code>top</code> &amp; <code>bot</code> are atoms, and are the sample of <code>+mu</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(pair @ @)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zig  [p=(end 4 (add top (sub 0x1.0000 bot))) q=bot]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>[@ux @ux]</code>~(zig mu 0x22e1 0x201)\n  [0x20e0 0x201]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zug:mu</code></h3>\n\n<p>Concatenate into atom</p>\n\n<p>Produces the concatenation of <code>top</code> and <code>bot</code>. Used to assemble a\nplanet name.</p>\n\n<h4>Accepts</h4>\n\n<p><code>top</code> &amp; <code>bot</code> are atoms, and are the sample of <code>+mu</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zug  (mix (lsh 4 top) bot)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@ux</code>~(zug mu 0x22e1 0x201)\n  0x22e1.0201\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mu"
        ]
    },
    {
        "doc": "<h2><code>++ne</code></h2>\n\n<p>Digit rendering engine</p>\n\n<p>A door containing arms that render digits at bases 10, 16, 32, and 64.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tig</code> is an <code>atom</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ne\n  |_  tig=@\n</code></p>\n\n<hr />\n\n<h3><code>++c:ne</code></h3>\n\n<p>Render base58check</p>\n\n<p>Render a single base58check character.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tig</code> is an <code>atom</code>, and is the sample of <code>+ne</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  c  (cut 3 [tig 1] key:fa)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>~(c ne 7)\n  '8'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(c ne 27)\n  'U'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(c ne 57)\n  'z'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(c ne 58)\n  ''\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++d:ne</code></h3>\n\n<p>Render decimal</p>\n\n<p>Renders a decimal digit as an atom of an ACII byte value.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tig</code> is an <code>atom</code>, and is the sample of <code>+ne</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  d  (add tig '0')\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>~(d ne 7)\n  '7'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++x:ne</code></h3>\n\n<p>Render hex</p>\n\n<p>Renders a hexadecimal digit as an atom of an ASCII byte value.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tig</code> is an <code>atom</code>, and is the sample of <code>+ne</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  x  ?:((gte tig 10) (add tig 87) d)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>~(x ne 7)\n  '7'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(x ne 14)\n  'e'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++v:ne</code></h3>\n\n<p>Render base-32</p>\n\n<p>Renders a base-32 digit as an atom of an ASCII byte value.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tig</code> is an <code>atom</code>, and is the sample of <code>+ne</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  v  ?:((gte tig 10) (add tig 87) d)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>~(v ne 7)\n  '7'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(v ne 14)\n  'e'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(v ne 25)\n  'p'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++w:ne</code></h3>\n\n<p>Render base-64</p>\n\n<p>Renders a base-64 digit as an atom of an ASCII byte value.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tig</code> is an <code>atom</code>, and is the sample of <code>+ne</code>.</p>\n\n<h4>Produces</h4>\n\n<p>An atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  w  ?:(=(tig 63) '~' ?:(=(tig 62) '-' ?:((gte tig 36) (add tig 29) x)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@t</code>~(w ne 7)\n  '7'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(w ne 14)\n  'e'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(w ne 25)\n  'p'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(w ne 52)\n  'Q'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(w ne 61)\n  'Z'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(w ne 63)\n  '~'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(w ne 62)\n  '-'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ne"
        ]
    },
    {
        "doc": "<h2><code>++co</code></h2>\n\n<p>Literal rendering engine</p>\n\n<p><code>++co</code> contains three parts:</p>\n\n<ul>\n<li>A door that contains arms that operate on the sample coin <code>lot</code>.</li>\n<li>A core of rendering idioms.</li>\n<li>A core of additional formatting functions used internally.</li>\n</ul>\n\n<h4>Accepts</h4>\n\n<p><code>lot</code> is a <code>coin</code>.</p>\n\n<h4>Source</h4>\n\n<p>The arm begins with the door:</p>\n\n<p><code>hoon\n++  co\n  !:\n  ~%  %co  ..co  ~\n  =&lt;  |_  lot=coin\n</code></p>\n\n<p>Then after that the rendering idiom core begins with:</p>\n\n<p><code>hoon\n=|  rep=tape\n=&lt;  |%\n</code></p>\n\n<p>And finally the third core:</p>\n\n<p><code>hoon\n|%\n</code></p>\n\n<hr />\n\n<h3><code>++rear:co</code></h3>\n\n<p>Prepend &amp; render as tape</p>\n\n<p>Renders a coin <code>lot</code> as a tape prepended to the sample tape <code>rom</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>lot</code> is a <code>coin</code>, and is the sample of <code>++co</code>.</p>\n\n<p><code>rom</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rear  |=(rom=tape rend(rep rom))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(~(rear co %$ %ux 200) \"--ha\")\n  \"0xc8--ha\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rent:co</code></h3>\n\n<p>Render as knot</p>\n\n<p>Renders a coin <code>lot</code> as a <code>knot</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>lot</code> is a <code>coin</code>, and is the sample of <code>++co</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>knot</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rent  ~+  `@ta`(rap 3 rend)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rent co %$ %ux 200)\n  ~.0xc8</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>~(rent co %$ %ux 200)\n  '0xc8'\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++rend:co</code></h3>\n\n<p>Render as tape</p>\n\n<p>Renders a coin <code>lot</code> as a <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>lot</code> is a <code>coin</code>, and is the sample of <code>++co</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rend\n  ^-  tape\n  ~+\n  ?:  ?=(%blob -.lot)\n    ['~' '0' ((v-co 1) (jam p.lot))]\n  ?:  ?=(%many -.lot)\n    :-  '.'\n    |-  ^-  tape\n    ?~   p.lot\n      ['_' '_' rep]\n    ['_' (weld (trip (wack rent(lot i.p.lot))) $(p.lot t.p.lot))]\n  =+  [yed=(end 3 p.p.lot) hay=(cut 3 [1 1] p.p.lot)]\n  |-  ^-  tape\n  ?+    yed  (z-co q.p.lot)\n      %c   ['~' '-' (weld (rip 3 (wood (tuft q.p.lot))) rep)]\n      %d\n    ?+    hay  (z-co q.p.lot)\n        %a\n      =+  yod=(yore q.p.lot)\n      =?  rep  ?=(^ f.t.yod)  ['.' (s-co f.t.yod)]\n      =?  rep  !&amp;(?=(~ f) =(0 h) =(0 m) =(0 s)):t.yod\n        =.  rep  ['.' (y-co s.t.yod)]\n        =.  rep  ['.' (y-co m.t.yod)]\n        ['.' '.' (y-co h.t.yod)]\n      =.  rep  ['.' (a-co d.t.yod)]\n      =.  rep  ['.' (a-co m.yod)]\n      =?  rep  !a.yod  ['-' rep]\n      ['~' (a-co y.yod)]\n    ::\n        %r\n      =+  yug=(yell q.p.lot)\n      =?  rep  ?=(^ f.yug)  ['.' (s-co f.yug)]\n      :-  '~'\n      ?:  &amp;(=(0 d.yug) =(0 m.yug) =(0 h.yug) =(0 s.yug))\n        ['s' '0' rep]\n      =?  rep  !=(0 s.yug)  ['.' 's' (a-co s.yug)]\n      =?  rep  !=(0 m.yug)  ['.' 'm' (a-co m.yug)]\n      =?  rep  !=(0 h.yug)  ['.' 'h' (a-co h.yug)]\n      =?  rep  !=(0 d.yug)  ['.' 'd' (a-co d.yug)]\n      +.rep\n    ==\n  ::\n      %f\n    ?:  =(&amp; q.p.lot)\n      ['.' 'y' rep]\n    ?:(=(| q.p.lot) ['.' 'n' rep] (z-co q.p.lot))\n  ::\n      %n   ['~' rep]\n      %i\n    ?+  hay  (z-co q.p.lot)\n      %f  ((ro-co [3 10 4] |=(a=@ ~(d ne a))) q.p.lot)\n      %s  ((ro-co [4 16 8] |=(a=@ ~(x ne a))) q.p.lot)\n    ==\n  ::\n      %p\n    =+  sxz=(fein:ob q.p.lot)\n    =+  dyx=(met 3 sxz)\n    :-  '~'\n    ?:  (lte dyx 1)\n      (weld (trip (tod:po sxz)) rep)\n    =+  dyy=(met 4 sxz)\n    =|  imp=@ud\n    |-  ^-  tape\n    ?:  =(imp dyy)\n      rep\n    %=  $\n      imp  +(imp)\n      rep  =/  log  (cut 4 [imp 1] sxz)\n           ;:  weld\n             (trip (tos:po (rsh 3 log)))\n             (trip (tod:po (end 3 log)))\n             ?:(=((mod imp 4) 0) ?:(=(imp 0) \"\" \"--\") \"-\")\n             rep\n    ==     ==\n  ::\n      %q\n    :+  '.'  '~'\n    =;  res=(pair ? tape)\n      (weld q.res rep)\n    %+  roll\n      =*  val  q.p.lot\n      ?:(=(0 val) ~[0] (rip 3 val))\n    |=  [q=@ s=? r=tape]\n    :-  !s\n    %+  weld\n     (trip (?:(s tod:po tos:po) q))\n    ?.(&amp;(s !=(r \"\")) r ['-' r])\n  ::\n      %r\n    ?+  hay  (z-co q.p.lot)\n      %d  ['.' '~' (r-co (rlyd q.p.lot))]\n      %h  ['.' '~' '~' (r-co (rlyh q.p.lot))]\n      %q  ['.' '~' '~' '~' (r-co (rlyq q.p.lot))]\n      %s  ['.' (r-co (rlys q.p.lot))]\n    ==\n  ::\n      %u\n    ?:  ?=(%c hay)\n      %+  welp  ['0' 'c' (reap (pad:fa q.p.lot) '1')]\n      (c-co (enc:fa q.p.lot))\n    ::\n    =;  gam=(pair tape tape)\n      (weld p.gam ?:(=(0 q.p.lot) `tape`['0' ~] q.gam))\n    ?+  hay  [~ ((ox-co [10 3] |=(a=@ ~(d ne a))) q.p.lot)]\n      %b  [['0' 'b' ~] ((ox-co [2 4] |=(a=@ ~(d ne a))) q.p.lot)]\n      %i  [['0' 'i' ~] ((d-co 1) q.p.lot)]\n      %x  [['0' 'x' ~] ((ox-co [16 4] |=(a=@ ~(x ne a))) q.p.lot)]\n      %v  [['0' 'v' ~] ((ox-co [32 5] |=(a=@ ~(x ne a))) q.p.lot)]\n      %w  [['0' 'w' ~] ((ox-co [64 5] |=(a=@ ~(w ne a))) q.p.lot)]\n    ==\n  ::\n      %s\n    %+  weld\n      ?:((syn:si q.p.lot) \"--\" \"-\")\n    $(yed 'u', q.p.lot (abs:si q.p.lot))\n  ::\n      %t\n    ?:  =('a' hay)\n      ?:  =('s' (cut 3 [2 1] p.p.lot))\n        (weld (rip 3 q.p.lot) rep)\n      ['~' '.' (weld (rip 3 q.p.lot) rep)]\n    ['~' '~' (weld (rip 3 (wood q.p.lot)) rep)]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~(rend co %$ %ux 200)\n  \"0xc8\"</p>\n</blockquote>\n\n<blockquote>\n  <p>~(rend co %many ~[[%$ ux+200] [%$ p+40]])\n  \".<em>0xc8</em>~~tem__\"</p>\n</blockquote>\n\n<blockquote>\n  <p>~(rend co %$ %p 32.819)\n  \"~lasmev\"</p>\n</blockquote>\n\n<blockquote>\n  <p>~(rend co %$ %ux 18)\n  \"0x12\"</p>\n</blockquote>\n\n<blockquote>\n  <p>~(rend co [%$ p=[p=%if q=0x7f00.0001]])\n  \".127.0.0.1\"</p>\n</blockquote>\n\n<blockquote>\n  <p>~(rend co %many ~[[%$ %ud 20] [%$ %uw 133] [%$ %tas 'sam']])\n  \".<em>20</em>0w25<em>sam</em>_\"</p>\n</blockquote>\n\n<blockquote>\n  <p>~(rend co %blob [1 1])\n  \"~0ph\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++a-co:co</code></h3>\n\n<p>Render decimal</p>\n\n<p>Render <code>dat</code> as a decimal integer without separators.</p>\n\n<h4>Accepts</h4>\n\n<p><code>dat</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  a-co  |=(dat=@ ((d-co 1) dat))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(a-co:co 123.456.789)\n  \"123456789\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++c-co:co</code></h3>\n\n<p>Render base58check</p>\n\n<p>Renders the given <code>atom</code> as a base58check <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p>An <code>atom</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  c-co  (em-co [58 1] |=([? b=@ c=tape] [~(c ne b) c]))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(enc:fa 0xdead.beef)\n  0xdead.beef.938b.8b0c</p>\n</blockquote>\n\n<blockquote>\n  <p>(c-co:co 0xdead.beef.938b.8b0c)\n  \"eFGDJSVvRHd\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++d-co:co</code></h3>\n\n<p>Render decimal with min length</p>\n\n<p>Render <code>hol</code> as a decimal integer without separators and with a minimum length\nof <code>min</code>. If <code>hol</code> has less than <code>min</code> digits, leading zeros will be added to\nmake up the difference.</p>\n\n<h4>Accepts</h4>\n\n<p><code>min</code> is an atom.</p>\n\n<p><code>hol</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  d-co  |=(min=@ (em-co [10 min] |=([? b=@ c=tape] [~(d ne b) c])))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((d-co:co 1) 123.456)\n  \"123456\"</p>\n</blockquote>\n\n<blockquote>\n  <p>((d-co:co 9) 123.456)\n  \"000123456\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++r-co:co</code></h3>\n\n<p>Render floating point</p>\n\n<p>Render decimal float <code>a</code> as a <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>++dn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  r-co\n  |=  a=dn\n  ?:  ?=([%i *] a)  (weld ?:(s.a \"inf\" \"-inf\") rep)\n  ?:  ?=([%n *] a)  (weld \"nan\" rep)\n  =;  rep  ?:(s.a rep ['-' rep])\n  =/  f  ((d-co 1) a.a)\n  =^  e  e.a\n    =/  e=@s  (sun:si (lent f))\n    =/  sci  :(sum:si e.a e -1)\n    ?:  (syn:si (dif:si e.a --3))  [--1 sci]  :: 12000 -&gt; 12e3 e&gt;+2\n    ?:  !(syn:si (dif:si sci -2))  [--1 sci]  :: 0.001 -&gt; 1e-3 e&lt;-2\n    [(sum:si sci --1) --0] :: 1.234e2 -&gt; '.'@3 -&gt; 123 .4\n  =?  rep  !=(--0 e.a)\n    :(weld ?:((syn:si e.a) \"e\" \"e-\") ((d-co 1) (abs:si e.a)))\n  (weld (ed-co e f) rep)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(r-co:co (rlys .3.14))\n  \"3.14\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(r-co:co (rlys .1.681557e-39))\n  \"1.681557e-39\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++s-co:co</code></h3>\n\n<p>Render hex list</p>\n\n<p>Render <code>esc</code>, a list of atoms, as hex with a dot before each value. Values less\nthan two bytes in length will be padded with zeros.</p>\n\n<h4>Accepts</h4>\n\n<p><code>esc</code> is a <code>(list @)</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  s-co\n  |=  esc=(list @)  ^-  tape\n  ?~  esc  rep\n  ['.' =&gt;(.(rep $(esc t.esc)) ((x-co 4) i.esc))]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>(s-co:co ~[0xdead 0xbeef 0xcafe])\n  \".dead.beef.cafe\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(s-co:co ~[0xa 0xb 0xc])\n  \".000a.000b.000c\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>(s-co:co ~[0xdead.beef])\n  \".deadbeef\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++v-co:co</code></h3>\n\n<p>Render base-32 with minimum length</p>\n\n<p>Render <code>hol</code> as base-32 with a minimum length of <code>min</code>. If <code>hol</code> is shorter than\n<code>min</code> it will be padded with zeros.</p>\n\n<h4>Accepts</h4>\n\n<p><code>min</code> is a <code>@ud</code>.</p>\n\n<p><code>hol</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  v-co  |=(min=@ (em-co [32 min] |=([? b=@ c=tape] [~(v ne b) c])))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>((v-co:co 1) 0v2l7.eiug3.0mbd9)\n  \"2l7eiug30mbd9\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>((v-co:co 20) 0v2l7.eiug3.0mbd9)\n  \"00000002l7eiug30mbd9\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++w-co:co</code></h3>\n\n<p>Render base-64 with minimum length</p>\n\n<p>Render <code>hol</code> as base-64 with a minimum length of <code>min</code>. If <code>hol</code> is horter than\n<code>min</code> it will be padded with zeros.</p>\n\n<h4>Accepts</h4>\n\n<p><code>min</code> is a <code>@ud</code>.</p>\n\n<p><code>hol</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  w-co  |=(min=@ (em-co [64 min] |=([? b=@ c=tape] [~(w ne b) c])))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>((w-co:co 1) 0w2.OtBSR.pPVeT)\n  \"2OtBSRpPVeT\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>((w-co:co 20) 0w2.OtBSR.pPVeT)\n  \"0000000002OtBSRpPVeT\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++x-co:co</code></h3>\n\n<p>Render hex with minimum length</p>\n\n<p>Render <code>hol</code> as hex with a minimum length of <code>min</code>. If <code>hol</code> is horter than\n<code>min</code> it will be padded with zeros.</p>\n\n<h4>Accepts</h4>\n\n<p><code>min</code> is a <code>@ud</code>.</p>\n\n<p><code>hol</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  x-co  |=(min=@ (em-co [16 min] |=([? b=@ c=tape] [~(x ne b) c])))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>tape</code>((x-co:co 1) 0xdead.beef)\n  \"deadbeef\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tape</code>((x-co:co 20) 0xdead.beef)\n  \"000000000000deadbeef\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++y-co:co</code></h3>\n\n<p>Render decimal with at least two digits</p>\n\n<p>Render <code>dat</code> as a decimal with a minimum of two digits. If <code>dat</code> is less than\ntwo digits it will be padded with zeros.</p>\n\n<h4>Accepts</h4>\n\n<p><code>dat</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  y-co  |=(dat=@ ((d-co 2) dat))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(y-co:co 0)\n  \"00\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(y-co:co 1)\n  \"01\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(y-co:co 123)\n  \"123\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(y-co:co 123.456)\n  \"123456\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++z-co:co</code></h3>\n\n<p>Render '0x'-prefixed hex</p>\n\n<p>Render <code>dat</code> as hex with a <code>0x</code> prefix.</p>\n\n<h4>Accepts</h4>\n\n<p><code>dat</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  z-co  |=(dat=@ `tape`['0' 'x' ((x-co 1) dat)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(z-co:co 123)\n  \"0x7b\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(z-co:co 0xdead.beef)\n  \"0xdeadbeef\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(z-co:co 0)\n  \"0x0\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++em-co:co</code></h3>\n\n<p>Render in numeric base</p>\n\n<p>In base <code>bas</code>, format <code>min</code> digits of <code>hol</code> with <code>par</code>. This is used internally\nby other rendering functions.</p>\n\n<ul>\n<li><code>hol</code> is processed least-significant digit first.</li>\n<li>All available digits in <code>hol</code> will be processed, but\n<code>min</code> digits can exceed the number available in <code>hol</code></li>\n<li><code>par</code> handles all accumulated output on each call, and can edit it, prepend or\nappend digits, etc.</li>\n<li>Until <code>hol</code> is exhausted, <code>par</code>'s sample is <code>[| digit output]</code>, subsequently,\nit's <code>[&amp; 0 output]</code>.</li>\n</ul>\n\n<h4>Accepts</h4>\n\n<p><code>[bas=@ min=@]</code>, where <code>bas</code> is the numeric base and <code>min</code> is the minimum\nlength.</p>\n\n<p><code>par</code> is a <code>gate</code> of <code>$-([? @ tape] tape)</code>.</p>\n\n<p><code>hol</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  em-co\n  |=  [[bas=@ min=@] par=$-([? @ tape] tape)]\n  |=  hol=@\n  ^-  tape\n  ?:  &amp;(=(0 hol) =(0 min))\n    rep\n  =/  [dar=@ rad=@]  (dvr hol bas)\n  %=  $\n    min  ?:(=(0 min) 0 (dec min))\n    hol  dar\n    rep  (par =(0 dar) rad rep)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((em-co:co [16 10] |=([? b=@ c=tape] [~(x ne b) c])) 0xbeef)\n  \"000000beef\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ed-co:co</code></h3>\n\n<p>Format with decimal place</p>\n\n<p>Format <code>int</code> by specifying its size with <code>exp</code>, which may be negative. This is\nused internally by other rendering functions.</p>\n\n<h4>Accepts</h4>\n\n<p><code>exp</code> is a <code>@s</code>.</p>\n\n<p><code>int</code> is a <code>tape</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ed-co\n  |=  [exp=@s int=tape]  ^-  tape\n  =/  [pos=? dig=@u]  [=(--1 (cmp:si exp --0)) (abs:si exp)]\n  ?.  pos\n    (into (weld (reap +(dig) '0') int) 1 '.')\n  =/  len  (lent int)\n  ?:  (lth dig len)  (into int dig '.')\n  (weld int (reap (sub dig len) '0'))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ed-co:co --3 \"100\")\n  \"100\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(ed-co:co --5 \"100\")\n  \"10000\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(ed-co:co -1 \"100\")\n  \"0.0100\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(ed-co:co -5 \"100\")\n  \"0.00000100\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ox-co:co</code></h3>\n\n<p>Format dot-separated digits in numeric base</p>\n\n<p>In base <code>bas</code>, format each digit of <code>hol</code> with gate <code>dug</code>, with '.' separators\nevery <code>gop</code> digits. This is used internally by other rendering functions.</p>\n\n<ul>\n<li><code>hol</code> is processed least-significant digit first.</li>\n<li><code>dug</code> handles individual digits, output is prepended.</li>\n<li>Every segment but the last is zero-padded to <code>gop</code>.</li>\n</ul>\n\n<h4>Accepts</h4>\n\n<p><code>[bas=@ gop=@]</code> where <code>bas</code> is the numeric base and <code>gop</code> is dot separator\nfrequency.</p>\n\n<p><code>dug</code> is a <code>gate</code> of <code>$-(@ @)</code>.</p>\n\n<p><code>hol</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ox-co\n  |=  [[bas=@ gop=@] dug=$-(@ @)]\n  %+  em-co\n    [(pow bas gop) 0]\n  |=  [top=? seg=@ res=tape]\n  %+  weld\n    ?:(top ~ `tape`['.' ~])\n  %.  seg\n  %+  em-co(rep res)\n    [bas ?:(top 0 gop)]\n  |=([? b=@ c=tape] [(dug b) c])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((ox-co:co [2 4] |=(a=@ ~(d ne a))) 0b1011.1101)\n  \"1011.1101\"</p>\n</blockquote>\n\n<blockquote>\n  <p>((ox-co:co [2 1] |=(a=@ ~(d ne a))) 0b1011.1101)\n  \"1.0.1.1.1.1.0.1\"</p>\n</blockquote>\n\n<blockquote>\n  <p>((ox-co:co [2 100] |=(a=@ ~(d ne a))) 0b1011.1101)\n  \"10111101\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++ro-co:co</code></h3>\n\n<p>Format dot-prefixed bloqs in numeric base</p>\n\n<p>In base <code>bas</code>, for <code>buz</code> bloqs 0 to <code>dop</code>, format at least one digit of <code>hol</code>,\nprefixed with <code>.</code>. This is used internally for <code>@i</code> address rendering functions.</p>\n\n<h4>Accepts</h4>\n\n<p><code>[buz=@ bas=@ dop=@]</code> where <code>buz</code> is the bloq size, <code>bas</code> is the numeric base,\nand <code>dop</code> is the number of bloqs.</p>\n\n<p><code>dug</code> is a <code>gate</code> of <code>$-(@ @)</code>.</p>\n\n<p><code>hol</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ro-co\n  |=  [[buz=@ bas=@ dop=@] dug=$-(@ @)]\n  |=  hol=@\n  ^-  tape\n  ?:  =(0 dop)\n    rep\n  :-  '.'\n  =/  pod  (dec dop)\n  %.  (cut buz [pod 1] hol)\n  %+  em-co(rep $(dop pod))\n    [bas 1]\n  |=([? b=@ c=tape] [(dug b) c])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((ro-co:co [3 10 4] |=(a=@ ~(d ne a))) .127.0.0.1)\n  \".127.0.0.1\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "co"
        ]
    },
    {
        "doc": "<h2><code>++so</code></h2>\n\n<p>Coin parser engine</p>\n\n<p>Core containing arms that parse atoms encoded in strings.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  so\n  ~%  %so  +  ~\n  |%\n</code></p>\n\n<hr />\n\n<h3><code>++bisk:so</code></h3>\n\n<p>Parse aura-atom pair</p>\n\n<p>Parsing <code>rule</code>. Parses an <code>@u</code> of any permitted base,\nproducing a <code>dime</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bisk\n  ~+\n  ;~  pose\n    ;~  pfix  (just '0')\n      ;~  pose\n        (stag %ub ;~(pfix (just 'b') bay:ag))\n        (stag %uc ;~(pfix (just 'c') fim:ag))\n        (stag %ui ;~(pfix (just 'i') dim:ag))\n        (stag %ux ;~(pfix (just 'x') hex:ag))\n        (stag %uv ;~(pfix (just 'v') viz:ag))\n        (stag %uw ;~(pfix (just 'w') wiz:ag))\n      ==\n    ==\n    (stag %ud dem:ag)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"25\" bisk:so)\n  [%ud 25]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0x12.6401\" bisk:so)\n  [%ux 1.205.249]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++crub:so</code></h3>\n\n<p>Parse <code>@da</code>, <code>@dr</code>, <code>@p</code>, <code>@t</code></p>\n\n<p>Parsing <code>rule</code>. Parses any atom of any of the following auras after a leading\nsig: <code>@da</code>, <code>@dr</code>, <code>@p</code>, and <code>@t</code>. Produces a <code>dime</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  crub\n  ~+\n  ;~  pose\n    (cook |=(det=date `dime`[%da (year det)]) when)\n  ::\n    %+  cook\n      |=  [a=(list [p=?(%d %h %m %s) q=@]) b=(list @)]\n      =+  rop=`tarp`[0 0 0 0 b]\n      |-  ^-  dime\n      ?~  a\n        [%dr (yule rop)]\n      ?-  p.i.a\n        %d  $(a t.a, d.rop (add q.i.a d.rop))\n        %h  $(a t.a, h.rop (add q.i.a h.rop))\n        %m  $(a t.a, m.rop (add q.i.a m.rop))\n        %s  $(a t.a, s.rop (add q.i.a s.rop))\n      ==\n    ;~  plug\n      %+  most\n        dot\n      ;~  pose\n        ;~(pfix (just 'd') (stag %d dim:ag))\n        ;~(pfix (just 'h') (stag %h dim:ag))\n        ;~(pfix (just 'm') (stag %m dim:ag))\n        ;~(pfix (just 's') (stag %s dim:ag))\n      ==\n      ;~(pose ;~(pfix ;~(plug dot dot) (most dot qix:ab)) (easy ~))\n    ==\n  ::\n    (stag %p fed:ag)\n    ;~(pfix dot (stag %ta urs:ab))\n    ;~(pfix sig (stag %t urx:ab))\n    ;~(pfix hep (stag %c (cook taft urx:ab)))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"1926.5.12\" crub:so)\n  [p=~.da q=170.141.184.449.747.016.871.285.095.307.149.312.000]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;([%da @da] (scan \"1926.5.12\" crub:so))\n  [%da ~1926.5.12]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"s10\" crub:so)\n  [p=~.dr q=184.467.440.737.095.516.160]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;([%dr @dr] (scan \"s10\" crub:so))\n  [%dr ~s10]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"sampel\" crub:so)\n  [%p 1.135]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \".mas\" crub:so)\n  [%ta 7.561.581]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++nuck:so</code></h3>\n\n<p>Top-level coin parser</p>\n\n<p>Parsing <code>rule</code>. Switches on the first character and applies the\ncorresponding <code>coin</code> parser.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  nuck\n  ~/  %nuck  |=  a=nail  %.  a\n  %+  knee  *coin  |.  ~+\n  %-  stew\n  ^.  stet  ^.  limo\n  :~  :-  ['a' 'z']  (cook |=(a=@ta [%$ %tas a]) sym)\n      :-  ['0' '9']  (stag %$ bisk)\n      :-  '-'        (stag %$ tash)\n      :-  '.'        ;~(pfix dot perd)\n      :-  '~'        ;~(pfix sig ;~(pose twid (easy [%$ %n 0])))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~pillyt\" nuck:so)\n  [%$ p=[p=~.p q=13.184]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0x12\" nuck:so)\n  [%$ p=[p=~.ux q=18]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \".127.0.0.1\" nuck:so)\n  [%$ p=[p=~.if q=2.130.706.433]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \".<em>20</em>0w25<em>sam</em>_\" nuck:so)\n  [ %many\n      p\n    ~[\n      [%$ p=[p=~.ud q=20]]\n      [%$ p=[p=~.uw q=133]]\n      [%$ p=[p=~.tas q=7.168.371]]\n    ]\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++nusk:so</code></h3>\n\n<p>Parse coin literal with escapes</p>\n\n<p>Parsing <code>rule</code>. Parses a coin literal with escapes.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  nusk\n  ~+\n  :(sear |=(a=@ta (rush a nuck)) wick urt:ab)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>~.asd<em>a\n  ~.asd</em>a</p>\n</blockquote>\n\n<blockquote>\n  <p>.<em>1</em>~~.asd~-a<em>_\n  [1 ~.asd</em>a]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"~~.asd~-a\" nusk:so)\n  [%$ p=[p=~.ta q=418.212.246.369]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++perd:so</code></h3>\n\n<p>Parsing coin literal without prefixes</p>\n\n<p>Parsing <code>rule</code>. Parses a dime or tuple without their respective standard\nprefixes.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  perd\n  ~+\n  ;~  pose\n    (stag %$ zust)\n    (stag %many (ifix [cab ;~(plug cab cab)] (more cab nusk)))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"y\" perd:so)\n  [%$ [%f %.y]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"n\" perd:so)\n  [%$ [%f %.n]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"<em>20</em>x__\" perd:so)\n  [%many [[%$ p=[p=~.ud q=20]] [i=[%$ p=[p=~.tas q=120]] t=~]]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++royl:so</code></h3>\n\n<p>Parse dime float</p>\n\n<p>Parsing <code>rule</code>. Parses a number into a <code>dime</code> float.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  royl\n  ~+\n  ;~  pose\n    (stag %rh royl-rh)\n    (stag %rq royl-rq)\n    (stag %rd royl-rd)\n    (stag %rs royl-rs)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~3.14\" royl:so)\n  [%rd .~3.14]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"3.14\" royl:so)\n  [%rs .3.14]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++royl-rh:so</code></h3>\n\n<p>Parse half-precision float</p>\n\n<p>Parsing <code>rule</code>. Parses a <code>@rh</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  royl-rh  (cook rylh ;~(pfix ;~(plug sig sig) (cook royl-cell royl-rn)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~~3.14\" royl-rh:so)\n  .~~3.14\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++royl-rq:so</code></h3>\n\n<p>Parse quad-precision float</p>\n\n<p>Parsing <code>rule</code>. Parses a <code>@rq</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  royl-rq  (cook rylq ;~(pfix ;~(plug sig sig sig) (cook royl-cell royl-rn)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~~~3.14\" royl-rq:so)\n  .~~~3.14\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++royl-rd:so</code></h3>\n\n<p>Parse double-precision float</p>\n\n<p>Parsing <code>rule</code>. Parses a <code>@rd</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  royl-rd  (cook ryld ;~(pfix sig (cook royl-cell royl-rn)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~3.14\" royl-rd:so)\n  .~3.14\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++royl-rs:so</code></h3>\n\n<p>Parse single-precision float</p>\n\n<p>Parsing <code>rule</code>. Parses a <code>@rs</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  royl-rs  (cook ryls (cook royl-cell royl-rn))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"3.14\" royl-rs:so)\n  .3.14\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++royl-rn:so</code></h3>\n\n<p>Parse real number</p>\n\n<p>Parsing <code>rule</code>. Parses a real number to a <a href=\"/reference/hoon/stdlib/3b#rn\"><code>++rn</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  royl-rn\n  =/  moo\n    |=  a=tape\n    :-  (lent a)\n    (scan a (bass 10 (plus sid:ab)))\n  ;~  pose\n    ;~  plug\n      (easy %d)\n      ;~(pose (cold | hep) (easy &amp;))\n      ;~  plug  dim:ag\n        ;~  pose\n          ;~(pfix dot (cook moo (plus (shim '0' '9'))))\n          (easy [0 0])\n        ==\n        ;~  pose\n          ;~  pfix\n            (just 'e')\n            ;~(plug ;~(pose (cold | hep) (easy &amp;)) dim:ag)\n          ==\n          (easy [&amp; 0])\n        ==\n      ==\n    ==\n    ::\n    ;~  plug\n      (easy %i)\n      ;~  sfix\n        ;~(pose (cold | hep) (easy &amp;))\n        (jest 'inf')\n      ==\n    ==\n    ::\n    ;~  plug\n      (easy %n)\n      (cold ~ (jest 'nan'))\n    ==\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"3.14\" royl-rn:so)\n  [%d %.y 3 [2 14] [%.y 0]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"-3.14e-39\" royl-rn:so)\n  [%d %.n 3 [2 14] [%.n 39]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"3\" royl-rn:so)\n  [%d %.y 3 [0 0] [%.y 0]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++royl-cell:so</code></h3>\n\n<p>Convert rn to dn</p>\n\n<p>Intermediate parsed float converter. Convert a\n<a href=\"/reference/hoon/stdlib/3b#rn\"><code>++rn</code></a> to\n<a href=\"/reference/hoon/stdlib/3b#dn\"><code>++dn</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p>A <code>++rn</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>++dn</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  royl-cell\n  |=  rn\n  ^-  dn\n  ?.  ?=([%d *] +&lt;)  +&lt;\n  =+  ^=  h\n    (dif:si (new:si f.b i.b) (sun:si d.b))\n  [%d a h (add (mul c.b (pow 10 d.b)) e.b)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(royl-cell:so (scan \"3.14\" royl-rn:so))\n  [%d s=%.y e=-2 a=314]</p>\n</blockquote>\n\n<blockquote>\n  <p>(ryls (royl-cell:so (scan \"3.14\" royl-rn:so)))\n  .3.14\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++tash:so</code></h3>\n\n<p>Parse signed dime</p>\n\n<p>Parsing <code>rule</code>. Parse a <code>@s</code> to a <code>dime</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  tash\n  ~+\n  =+  ^=  neg\n      |=  [syn=? mol=dime]  ^-  dime\n      ?&gt;  =('u' (end 3 p.mol))\n      [(cat 3 's' (rsh 3 p.mol)) (new:si syn q.mol)]\n  ;~  pfix  hep\n    ;~  pose\n      (cook |=(a=dime (neg | a)) bisk)\n      ;~(pfix hep (cook |=(a=dime (neg &amp; a)) bisk))\n    ==\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"-20\" tash:so)\n  [p=~.sd q=39]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;([%sd @sd] (scan \"-20\" tash:so))\n  [%sd -20]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;([%sd @sd] (scan \"--20\" tash:so))\n  [%sd --20]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;([%sx @sx] (scan \"--0x2e\" tash:so))\n  [%sx --0x2e]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++twid:so</code></h3>\n\n<p>Parse coins without <code>~</code> prefix</p>\n\n<p>Parsing rule. Parses coins after a leading sig, <code>~</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  twid\n  ~+\n  ;~  pose\n    %+  stag  %blob\n    %+  sear  |=(a=@ (mole |.((cue a))))\n    ;~(pfix (just '0') vum:ag)\n  ::\n    (stag %$ crub)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"zod\" twid:so)\n  [%$ [%p 0]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \".sam\" twid:so)\n  [%$ [%ta 7.168.371]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"0ph\" twid:so)\n  [%blob [1 1]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++when:so</code></h3>\n\n<p>Parse date</p>\n\n<p>Parsing <code>rule</code>. Parse a <code>@da</code>-formatted date string (sans the leading <code>~</code>) to a\n<code>date</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  when\n  ~+\n  ;~  plug\n    %+  cook\n      |=([a=@ b=?] [b a])\n    ;~(plug dim:ag ;~(pose (cold | hep) (easy &amp;)))\n    ;~(pfix dot mot:ag)   ::  month\n    ;~(pfix dot dip:ag)   ::  day\n    ;~  pose\n      ;~  pfix\n        ;~(plug dot dot)\n        ;~  plug\n          dum:ag\n          ;~(pfix dot dum:ag)\n          ;~(pfix dot dum:ag)\n          ;~(pose ;~(pfix ;~(plug dot dot) (most dot qix:ab)) (easy ~))\n        ==\n      ==\n      (easy [0 0 0 ~])\n    ==\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>date</code>(scan \"2000.1.1..12.00.00..ffff\" when:so)\n  [[a=%.y y=2.000] m=1 t=[d=1 h=12 m=0 s=0 f=~[0xffff]]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++zust:so</code></h3>\n\n<p>Parse dimes from <code>@i</code>, <code>@f</code>, <code>@r</code> or <code>@q</code></p>\n\n<p>Parsing rule. Parses an atom of either <code>@if</code> (IP address), <code>@f</code> (loobean), <code>@r</code>\n(floating point) into a <code>dime</code>. The <code>@q</code> alone requires a leading <code>~</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  zust\n  ~+\n  ;~  pose\n    (stag %is bip:ag)\n    (stag %if lip:ag)\n    royl\n    (stag %f ;~(pose (cold &amp; (just 'y')) (cold | (just 'n'))))\n    (stag %q ;~(pfix sig feq:ag))\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"~sampel\" zust:so)\n  [%q 1.135]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"y\" zust:so)\n  [%f %.y]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"127.0.0.1\" zust:so)\n  [%if 2.130.706.433]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"af.0.0.0.0.e7a5.30d2.7\" zust:so)\n  [%is 908.651.950.243.594.834.993.091.554.288.205.831]</p>\n</blockquote>\n\n<blockquote>\n  <p>(scan \"12.09\" zust:so)\n  [%rs .12.09]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "so"
        ]
    },
    {
        "doc": "<h2><code>++scot</code></h2>\n\n<p>Render dime as cord</p>\n\n<p>Renders a dime <code>mol</code> as a cord.</p>\n\n<h4>Accepts</h4>\n\n<p><code>mol</code> is a <code>dime</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>cord</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  scot\n  ~/  %scot\n  |=(mol=dime ~(rent co %$ mol))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scot %p ~pillyt)\n  ~.~pillyt</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scot %p ~pillyt)\n  '~pillyt'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scot %ux 0x12)\n  '0x12'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scot %if .127.0.0.1)\n  '.127.0.0.1'</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@t</code>(scot %ta ~.asd<em>a)\n  '~.asd</em>a'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "scot"
        ]
    },
    {
        "doc": "<h2><code>++scow</code></h2>\n\n<p>Render dime as tape</p>\n\n<p>Renders a dime <code>mol</code> as a tape.</p>\n\n<h4>Accepts</h4>\n\n<p><code>mol</code> is a <code>dime</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  scow\n  ~/  %scow\n  |=(mol=dime ~(rend co %$ mol))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scow %p ~pillyt)\n  \"~pillyt\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scow %ux 0x12)\n  \"0x12\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scow %if .127.0.0.1)\n  \".127.0.0.1\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(scow %ta ~.asd<em>a)\n  \"~.asd</em>a\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "scow"
        ]
    },
    {
        "doc": "<h2><code>++slat</code></h2>\n\n<p>Curried slaw</p>\n\n<p>Produces a <code>gate</code> that parses a <code>knot</code> <code>txt</code> to a <code>unit</code> containing the atom of\nthe aura specified by <code>mod</code>. The <code>unit</code> will be null if parsing failed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>mod</code> is a <code>knot</code>.</p>\n\n<p><code>txt</code> is a <code>cord</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slat  |=(mod=@tas |=(txt=@ta (slaw mod txt)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(unit @p)</code>((slat %p) '~pillyt')\n  [~ ~pillyt]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @ux)</code>((slat %ux) '0x12')\n  [~ 0x12]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @if)</code>((slat %if) '.127.0.0.1')\n  [~ .127.0.0.1]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @ta)</code>((slat %ta) '~.asd<em>a')\n  [~ ~.asd</em>a]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slat"
        ]
    },
    {
        "doc": "<h2><code>++slav</code></h2>\n\n<p>Demand: parse cord with input aura</p>\n\n<p>Parses a cord <code>txt</code> to an atom of the aura specificed by <code>mod</code>.\nCrashes if it fails to parse.</p>\n\n<h4>Accepts</h4>\n\n<p><code>mod</code> is a <code>term</code></p>\n\n<p><code>txt</code> is a <code>knot</code>.</p>\n\n<h4>Produces</h4>\n\n<p>an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slav  |=([mod=@tas txt=@ta] (need (slaw mod txt)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>@p</code>(slav %p '~pillyt')\n  ~pillyt</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@p</code>(slav %p '~pillam')\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(slav %ux '0x12')\n  0x12</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ux</code>(slav %ux '0b10')\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@if</code>(slav %if '.127.0.0.1')\n  .127.0.0.1</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@if</code>(slav %if '.fe80.0.0.202')\n  ! exit</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ta</code>(slav %ta '~.asd<em>a')\n  ~.asd</em>a</p>\n</blockquote>\n\n<blockquote>\n  <p><code>@ta</code>(slav %ta '~~asd-a')\n  ! exit\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slav"
        ]
    },
    {
        "doc": "<h2><code>++slaw</code></h2>\n\n<p>Parse cord to input aura</p>\n\n<p>Parses a cord <code>txt</code> to a <code>unit</code> containing the atom of the aura specified by\n<code>mod</code>. The <code>unit</code> is null if parsing failed.</p>\n\n<h4>Accepts</h4>\n\n<p><code>mod</code> is a <code>term</code>.</p>\n\n<p><code>txt</code> is a <code>knot</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit @)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slaw\n  ~/  %slaw\n  |=  [mod=@tas txt=@ta]\n  ^-  (unit @)\n  ?+    mod\n      ::  slow fallback case to the full slay\n      ::\n      =+  con=(slay txt)\n      ?.(&amp;(?=([~ %$ @ @] con) =(p.p.u.con mod)) ~ [~ q.p.u.con])\n  ::\n      %da\n    (rush txt ;~(pfix sig (cook year when:so)))\n  ::\n      %p\n    (rush txt ;~(pfix sig fed:ag))\n  ::\n      %ud\n    (rush txt dem:ag)\n  ::\n      %ux\n    (rush txt ;~(pfix (jest '0x') hex:ag))\n  ::\n      %uv\n    (rush txt ;~(pfix (jest '0v') viz:ag))\n  ::\n      %ta\n    (rush txt ;~(pfix ;~(plug sig dot) urs:ab))\n  ::\n      %tas\n    (rush txt sym)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>(unit @p)</code>(slaw %p '~pillyt')\n  [~ ~pillyt]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @p)</code>(slaw %p '~pillam')\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @ux)</code>(slaw %ux '0x12')\n  [~ 0x12]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @ux)</code>(slaw %ux '0b10')\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @if)</code>(slaw %if '.127.0.0.1')\n  [~ .127.0.0.1]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @if)</code>(slaw %if '.fe80.0.0.202')\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @ta)</code>(slaw %ta '~.asd<em>a')\n  [~ ~.asd</em>a]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>(unit @ta)</code>(slaw %ta '~~asd-a')\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slaw"
        ]
    },
    {
        "doc": "<h2><code>++slay</code></h2>\n\n<p>Parse cord to coin</p>\n\n<p>Parses a cord <code>txt</code> to the unit of a <code>coin</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>txt</code> is a <code>@ta</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit coin)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slay\n  |=  txt=@ta  ^-  (unit coin)\n  =+  ^=  vex\n      ?:  (gth 0x7fff.ffff txt)                         ::  XX  petty cache\n        ~+  ((full nuck:so) [[1 1] (trip txt)])\n      ((full nuck:so) [[1 1] (trip txt)])\n  ?~  q.vex\n    ~\n  [~ p.u.q.vex]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slay '~pillyt')\n  [~ [%$ p=[p=~.p q=13.184]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(slay '0x12')\n  [~ [%$ p=[p=~.ux q=18]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(slay '.127.0.0.1')\n  [~ [%$ p=[p=~.if q=2.130.706.433]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(slay '!')\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slay"
        ]
    },
    {
        "doc": "<h2><code>++smyt</code></h2>\n\n<p>Render path as tank</p>\n\n<p>Renders the path <code>bon</code> as a <code>tank</code>, which is used for\npretty-printing.</p>\n\n<h4>Accepts</h4>\n\n<p><code>bon</code> is a <code>path</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tank</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  smyt\n  |=  bon=path  ^-  tank\n  :+  %rose  [['/' ~] ['/' ~] ~]\n  (turn bon |=(a=@ [%leaf (trip a)]))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(smyt %)\n  [ %rose\n    p=[p=\"/\" q=\"/\" r=\"\"]\n      q\n    ~[\n      [%leaf p=\"~zod\"]\n      [%leaf p=\"base\"]\n      [%leaf p=\"~2022.1.6..14.22.14..40bf\"]\n    ]\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>(smyt /as/les/top)\n  [ %rose\n    p=[p=\"/\" q=\"/\" r=\"\"]\n    q=~[[%leaf p=\"as\"] [%leaf p=\"les\"] [%leaf p=\"top\"]]\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "smyt"
        ]
    },
    {
        "doc": "<h2><code>++spat</code></h2>\n\n<p>Render path as cord</p>\n\n<p>Renders a path <code>pax</code> as cord.</p>\n\n<h4>Accepts</h4>\n\n<p><code>pax</code> is a <code>path</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>cord</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  spat  |=(pax=path (crip (spud pax)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(spat %)\n  '/~zod/base/~2022.1.6..14.23.31..e367'</p>\n</blockquote>\n\n<blockquote>\n  <p>(spat %/lib)\n  '/~zod/base/~2022.1.6..14.23.43..829e/lib'</p>\n</blockquote>\n\n<blockquote>\n  <p>(spat /as/les/top)\n  '/as/les/top'\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "spat"
        ]
    },
    {
        "doc": "<h2><code>++spud</code></h2>\n\n<p>Render path as tape</p>\n\n<p>Renders a path <code>pax</code> as tape.</p>\n\n<h4>Accepts</h4>\n\n<p><code>pax</code> is a <code>path</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  spud  |=(pax=path ~(ram re (smyt pax)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(spud %)\n  \"/~zod/base/~2022.1.6..14.24.35..cddf\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(spud %/lib)\n  \"/~zod/base/~2022.1.6..14.24.43..3efb/lib\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(spud /as/les/top)\n  \"/as/les/top\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "spud"
        ]
    },
    {
        "doc": "<h2><code>++stab</code></h2>\n\n<p>Parse cord to path</p>\n\n<p>Parses a cord <code>zep</code> to a static <code>path</code>.\nCrashes if it fails to parse.</p>\n\n<h4>Accepts</h4>\n\n<p><code>zep</code> is a <code>@t</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>path</code>, or crash.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  stab  |=(zep=@t `path`(rash zep stap))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(stab '/as/lek/tor')\n  /as/lek/tor\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "stab"
        ]
    },
    {
        "doc": "<h2><code>++stap</code></h2>\n\n<p>Path parser</p>\n\n<p>Parsing <code>rule</code>. Parses a <code>path</code>, used internally by <code>++stab</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  stap\n  %+  sear\n    |=  p=path\n    ^-  (unit path)\n    ?:  ?=([~ ~] p)  `~\n    ?.  =(~ (rear p))  `p\n    ~\n  ;~(pfix fas (most fas urs:ab))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(scan \"/foo/bar/baz\" stap)\n  /foo/bar/baz\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "stap"
        ]
    },
    {
        "doc": "<h2><code>++mack</code></h2>\n\n<p>Nock subject to unit</p>\n\n<p>Accepts a nock subject-formula cell and wraps it into a <code>unit</code>.\n<code>fol</code> is pure nock, meaning that nock <code>11</code> operations result in a block,\nproducing a <code>~</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sub</code> is a subject noun.</p>\n\n<p><code>fol</code> is a formula noun, which is generally a <code>nock</code>.</p>\n\n<h4>Produces</h4>\n\n<p>The <code>unit</code> of a noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mack\n  |=  [sub=* fol=*]\n  ^-  (unit)\n  =/  ton  (mink [sub fol] |~(^ ~))\n  ?.(?=(%0 -.ton) ~ `product.ton)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mack [[1 2 3] [0 1]])\n  [~ [1 2 3]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mack [41 4 0 1])\n  [~ 42]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mack [4 0 4])\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(mack [[[0 2] [1 3]] 4 4 4 4 0 5])\n  [~ 6]</p>\n</blockquote>\n\n<blockquote>\n  <p>;;((unit @tas) (mack [[1 %yes %no] 6 [0 2] [0 6] 0 7]))\n  [~ %no]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mack"
        ]
    },
    {
        "doc": "<h2><code>++mink</code></h2>\n\n<p>Mock interpreter</p>\n\n<p>Bottom-level mock (virtual nock) interpreter. Produces a\n<code>tone</code>, a nock computation result. If nock 12 is invoked, <code>scry</code>\ncomputes on the subject and produces a <code>(unit (unit))</code> result. An empty\nresult becomes a <code>%1</code> <code>tone</code>, indicating a block.</p>\n\n<h4>Accepts</h4>\n\n<p><code>subject</code> is the subject as a noun.</p>\n\n<p><code>formula</code> is the formula as a noun.</p>\n\n<p><code>scry</code> is an <code>%iron</code> gate invoked with nock operator 12.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tone</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mink  !.\n  ~/  %mink\n  |=  $:  [subject=* formula=*]\n          scry=$-(^ (unit (unit)))\n      ==\n  =|  trace=(list [@ta *])\n  |^  ^-  tone\n      ?+  formula  [%2 trace]\n          [^ *]\n        =/  head  $(formula -.formula)\n        ?.  ?=(%0 -.head)  head\n        =/  tail  $(formula +.formula)\n        ?.  ?=(%0 -.tail)  tail\n        [%0 product.head product.tail]\n      ::\n          [%0 axis=@]\n        =/  part  (frag axis.formula subject)\n        ?~  part  [%2 trace]\n        [%0 u.part]\n      ::\n          [%1 constant=*]\n        [%0 constant.formula]\n      ::\n          [%2 subject=* formula=*]\n        =/  subject  $(formula subject.formula)\n        ?.  ?=(%0 -.subject)  subject\n        =/  formula  $(formula formula.formula)\n        ?.  ?=(%0 -.formula)  formula\n        %=  $\n          subject  product.subject\n          formula  product.formula\n        ==\n      ::\n          [%3 argument=*]\n        =/  argument  $(formula argument.formula)\n        ?.  ?=(%0 -.argument)  argument\n        [%0 .?(product.argument)]\n      ::\n          [%4 argument=*]\n        =/  argument  $(formula argument.formula)\n        ?.  ?=(%0 -.argument)  argument\n        ?^  product.argument  [%2 trace]\n        [%0 .+(product.argument)]\n      ::\n          [%5 a=* b=*]\n        =/  a  $(formula a.formula)\n        ?.  ?=(%0 -.a)  a\n        =/  b  $(formula b.formula)\n        ?.  ?=(%0 -.b)  b\n        [%0 =(product.a product.b)]\n      ::\n          [%6 test=* yes=* no=*]\n        =/  result  $(formula test.formula)\n        ?.  ?=(%0 -.result)  result\n        ?+  product.result\n              [%2 trace]\n          %&amp;  $(formula yes.formula)\n          %|  $(formula no.formula)\n        ==\n      ::\n          [%7 subject=* next=*]\n        =/  subject  $(formula subject.formula)\n        ?.  ?=(%0 -.subject)  subject\n        %=  $\n          subject  product.subject\n          formula  next.formula\n        ==\n      ::\n          [%8 head=* next=*]\n        =/  head  $(formula head.formula)\n        ?.  ?=(%0 -.head)  head\n        %=  $\n          subject  [product.head subject]\n          formula  next.formula\n        ==\n      ::\n          [%9 axis=@ core=*]\n        =/  core  $(formula core.formula)\n        ?.  ?=(%0 -.core)  core\n        =/  arm  (frag axis.formula product.core)\n        ?~  arm  [%2 trace]\n        %=  $\n          subject  product.core\n          formula  u.arm\n        ==\n      ::\n          [%10 [axis=@ value=*] target=*]\n        ?:  =(0 axis.formula)  [%2 trace]\n        =/  target  $(formula target.formula)\n        ?.  ?=(%0 -.target)  target\n        =/  value  $(formula value.formula)\n        ?.  ?=(%0 -.value)  value\n        =/  mutant=(unit *)\n          (edit axis.formula product.target product.value)\n        ?~  mutant  [%2 trace]\n        [%0 u.mutant]\n      ::\n          [%11 tag=@ next=*]\n        =/  next  $(formula next.formula)\n        ?.  ?=(%0 -.next)  next\n        :-  %0\n        .*  subject\n        [11 tag.formula 1 product.next]\n      ::\n          [%11 [tag=@ clue=*] next=*]\n        =/  clue  $(formula clue.formula)\n        ?.  ?=(%0 -.clue)  clue\n        =/  next\n          =?    trace\n              ?=(?(%hunk %hand %lose %mean %spot) tag.formula)\n            [[tag.formula product.clue] trace]\n          $(formula next.formula)\n        ?.  ?=(%0 -.next)  next\n        :-  %0\n        .*  subject\n        [11 [tag.formula 1 product.clue] 1 product.next]\n      ::\n          [%12 ref=* path=*]\n        =/  ref  $(formula ref.formula)\n        ?.  ?=(%0 -.ref)  ref\n        =/  path  $(formula path.formula)\n        ?.  ?=(%0 -.path)  path\n        =/  result  (scry product.ref product.path)\n        ?~  result\n          [%1 product.path]\n        ?~  u.result\n          [%2 [%hunk product.ref product.path] trace]\n        [%0 u.u.result]\n      ==\n  ::\n  ++  frag\n    |=  [axis=@ noun=*]\n    ^-  (unit)\n    ?:  =(0 axis)  ~\n    |-  ^-  (unit)\n    ?:  =(1 axis)  `noun\n    ?@  noun  ~\n    =/  pick  (cap axis)\n    %=  $\n      axis  (mas axis)\n      noun  ?-(pick %2 -.noun, %3 +.noun)\n    ==\n  ::\n  ++  edit\n    |=  [axis=@ target=* value=*]\n    ^-  (unit)\n    ?:  =(1 axis)  `value\n    ?@  target  ~\n    =/  pick  (cap axis)\n    =/  mutant\n      %=  $\n        axis    (mas axis)\n        target  ?-(pick %2 -.target, %3 +.target)\n      ==\n    ?~  mutant  ~\n    ?-  pick\n      %2  `[u.mutant +.target]\n      %3  `[-.target u.mutant]\n    ==\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mink [20 [4 0 1]] ,~)\n  [%0 product=21]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mink [[[4 5] [6 14 15]] [0 7]] ,~)\n  [%0 product=[14 15]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mink [42 12 [0 1] [1 73]] |=(a=^ ``(add (,[@ @] a))))\n  [%0 product=115]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mink [0 12 [1 0] [1 0]] |=(* ~))\n  [%1 block=0]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mink [42 0 2] ,~)\n  [%2 trace=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mink"
        ]
    },
    {
        "doc": "<h2><code>++mock</code></h2>\n\n<p>Compute formula on subject with hint</p>\n\n<p>Produces a <code>toon</code>, which is either a sucessful, blocked, or\ncrashed result. If nock 11 is invoked, <code>gul</code> computes on the subject and\nproduces a <code>(unit (unit))</code> result. An empty result becomes a <code>%1</code> <code>tune</code>,\nindicating a block.</p>\n\n<h4>Accepts</h4>\n\n<p><code>sub</code> is the subject as a noun.</p>\n\n<p><code>fol</code> is the formula as a noun.</p>\n\n<p><code>gul</code> is an %iron gate invoked with nock operator 11.</p>\n\n<h4>Produces</h4>\n\n<p>The <code>unit</code> of a noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mock\n  |=  [[sub=* fol=*] gul=$-(^ (unit (unit)))]\n  (mook (mink [sub fol] gul))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mock [5 4 0 1] ,~)\n  [%0 p=6]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mock [0 12 [0 1] [0 1]] |=(* ``999))\n  [%0 p=999]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mock [42 12 [0 1] [0 1]] |=(* ~))\n  [%1 p=42]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mock [42 0 2] ,~)\n  [%2 p=~]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mock"
        ]
    },
    {
        "doc": "<h2><code>++mook</code></h2>\n\n<p>Intelligently render crash annotation</p>\n\n<p>Converts a <code>%2</code> <code>tone</code> nock stack trace to a list of <code>tank</code>. Each may be a\n<code>tank</code>, <code>cord</code>, <code>spot</code>, or trapped <code>tank</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>ton</code> is a <code>tone</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>toon</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mook\n  |=  ton=tone\n  ^-  toon\n  ?.  ?=([%2 *] ton)\n    ton\n  |^  [%2 (turn skip rend)]\n  ::\n  ++  skip\n    ^+  trace.ton\n    =/  yel  (lent trace.ton)\n    ?.  (gth yel 1.024)  trace.ton\n    %+  weld\n      (scag 512 trace.ton)\n    ^+  trace.ton\n    :_  (slag (sub yel 512) trace.ton)\n    :-  %lose\n    (crip \"[skipped {(scow %ud (sub yel 1.024))} frames]\")\n  ::\n  ::  +rend: raw stack frame to tank\n  ::\n  ::    $%  [%hunk ref=* path]            ::  failed scry ([~ ~])\n  ::        [%lose cord]                  ::  skipped frames\n  ::        [%hand *]                     ::  mug any\n  ::        [%mean $@(cord (trap tank))]  ::  ~_ et al\n  ::        [%spot spot]                  ::  source location\n  ::    ==\n  ::\n  ++  rend\n    |=  [tag=@ta dat=*]\n    ^-  tank\n    ?+    tag\n    ::\n      leaf+\"mook.{(rip 3 tag)}\"\n    ::\n        %hunk\n      ?@  dat  leaf+\"mook.hunk\"\n      =/  sof=(unit path)  ((soft path) +.dat)\n      ?~  sof  leaf+\"mook.hunk\"\n      (smyt u.sof)\n    ::\n        %lose\n      ?^  dat  leaf+\"mook.lose\"\n      leaf+(rip 3 dat)\n    ::\n        %hand\n      leaf+(scow %p (mug dat))\n    ::\n        %mean\n      ?@  dat  leaf+(rip 3 dat)\n      =/  mac  (mack dat -.dat)\n      ?~  mac  leaf+\"####\"\n      =/  sof  ((soft tank) u.mac)\n      ?~  sof  leaf+\"mook.mean\"\n      u.sof\n    ::\n        %spot\n      =/  sof=(unit spot)  ((soft spot) dat)\n      ?~  sof  leaf+\"mook.spot\"\n      :+  %rose  [\":\" ~ ~]\n      :~  (smyt p.u.sof)\n          =*  l   p.q.u.sof\n          =*  r   q.q.u.sof\n          =/  ud  |=(a=@u (scow %ud a))\n          leaf+\"&lt;[{(ud p.l)} {(ud q.l)}].[{(ud p.r)} {(ud q.r)}]&gt;\"\n      ==\n    ==\n  --\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mook [%0 5 4 5 1])\n  [%0 p=[5 4 5 1]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mook [%2 ~[[%hunk %rose [\"&lt;\" \",\" \">\"] ~[[%leaf \"err\"]]]]])\n  [%2 p=~[[%leaf p=\"mook.hunk\"]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mook [%2 ~[[%mean |.(&gt;(add 5 6)&lt;)]]])\n  [%2 p=~[[%leaf p=\"11\"]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mook [%2 ~[[%spot /b/repl [1 1]^[1 2]] [%mean |.(!!)]]])\n  [ %2\n      p\n    ~[\n      [ %rose\n        p=[p=\":\" q=\"\" r=\"\"]\n          q\n        [   i\n          [ %rose\n            p=[p=\"/\" q=\"/\" r=\"\"]\n            q=[i=[%leaf p=\"b\"] t=[i=[%leaf p=\"repl\"] t=~]]\n          ]\n          t=[i=[%leaf p=\"&lt;[1 1].[1 2]&gt;\"] t=~]\n        ]\n      ]\n      [%leaf p=\"####\"]\n    ]\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mook"
        ]
    },
    {
        "doc": "<h2><code>++mole</code></h2>\n\n<p>Typed unitary virtual</p>\n\n<p>Kicks a <code>trap</code>, producing its result in a <code>unit</code> if successful, or a null <code>unit</code>\nif it crashed. Unitized version of <a href=\"#mule\"><code>++mule</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tap</code> is a <code>trap</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit *)</code>, where the <code>*</code> will be the type produced by the expression.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mole\n  ~/  %mole\n  |*  tap=(trap)\n  ^-  (unit _$:tap)\n  =/  mur  (mure tap)\n  ?~(mur ~ `$:tap)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mole |.(<code>@t</code>(add 50 47)))\n  [~ 'a']</p>\n</blockquote>\n\n<blockquote>\n  <p>(mole |.(~|('Error!' !!)))\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mole"
        ]
    },
    {
        "doc": "<h2><code>++mong</code></h2>\n\n<p>Slam gate with sample</p>\n\n<p>Produces a <code>toon</code> computation result from slamming <code>gat</code> with\n<code>sam</code>, using <code>gul</code> to compute or block on nock 11 when applicable.</p>\n\n<h4>Accepts</h4>\n\n<p><code>gat</code> is a noun that is generally a <code>gate</code>.</p>\n\n<p><code>sam</code> is a sample noun.</p>\n\n<p><code>gul</code> is an <code>%iron</code> gate invoked with nock operator 11.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>toon</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mong\n  |=  [[gat=* sam=*] gul=$-(^ (unit (unit)))]\n  ^-  toon\n  ?.  ?=([* ^] gat)  [%2 ~]\n  (mock [gat(+&lt; sam) %9 2 %0 1] gul)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mong [|=(@ 20) ~] ,~)\n  [%0 p=20]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mong [|=(@ !!) ~] ,~)\n  [%2 p=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mong [|=(a=@ (add 20 a)) ~] ,~)\n  [%0 p=20]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mong [|=(a=[@ @] (add 20 -.a)) ~] ,~)\n  [%2 p=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mong [|=(a=[@ @] (add 20 -.a)) [4 6]] ,~)\n  [%0 p=24]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mong [|=(a=@ .^(* a)) 99] |=(^ ``+&lt;))\n  [%0 p=[[140 1.853.189.998] 99]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mong [|=(a=@ .^(@ a)) 99] |=([* a=*] ``+((,@ a))))\n  [%0 p=100]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mong"
        ]
    },
    {
        "doc": "<h2><code>++mule</code></h2>\n\n<p>Typed virtual</p>\n\n<p>Kicks a <code>trap</code>, producing its results or any errors that occur along\nthe way. Used to lazily compute stack traces.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tap</code> is a <code>trap</code>, generally producing a list of <code>tank</code>s.</p>\n\n<h4>Produces</h4>\n\n<p>An <code>(each * (list tank))</code> - <code>%.y</code> indicates success and <code>%.n</code> indicates a crash.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mule\n  ~/  %mule\n  |*  tap=(trap)\n  =/  mud  (mute tap)\n  ?-  -.mud\n    %&amp;  [%&amp; p=$:tap]\n    %|  [%| p=p.mud]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mule |.((add 1 1)))\n  [%.y p=2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mule |.(~|(%error !!)))\n  [%.n p=~[[%leaf p=\"%error\"]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mule"
        ]
    },
    {
        "doc": "<h2><code>++mure</code></h2>\n\n<p>Untyped unitary virtual</p>\n\n<p>Kicks a <code>trap</code>, producing its results in a <code>unit</code> which is null if it crashed.\nThe result is just a noun, no type information is preserved.</p>\n\n<h4>Accepts</h4>\n\n<p>A <code>trap</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit *)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mure\n  |=  tap=(trap)\n  ^-  (unit)\n  =/  ton  (mink [tap %9 2 %0 1] |=((pair) ``.*(~ [%12 1+p 1+q])))\n  ?.(?=(%0 -.ton) ~ `product.ton)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mure |.(~|(%error !!)))\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>(mure |.((add 1 1)))\n  [~ 2]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mure |.('foo'))\n  [~ 7.303.014]</p>\n</blockquote>\n\n<blockquote>\n  <p>((unit @t) (mure |.('foo')))\n  [~ 'foo']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mure"
        ]
    },
    {
        "doc": "<h2><code>++mute</code></h2>\n\n<p>Untyped virtual</p>\n\n<p>Kicks a <code>trap</code>, producing its result as a noun or the tanks of any error that\noccurs. Similar to <a href=\"#mule\"><code>++mule</code></a>, but preserves no type information.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tap</code> is a <code>trap</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(each * (list tank))</code>, where <code>%.y</code> indicates success and <code>%.n</code> indicates\nfailure.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mute\n  |=  tap=(trap)\n  ^-  (each * (list tank))\n  =/  ton  (mock [tap %9 2 %0 1] |=((pair) ``.*(~ [%12 1+p 1+q])))\n  ?-  -.ton\n    %0  [%&amp; p.ton]\n  ::\n    %1  =/  sof=(unit path)  ((soft path) p.ton)\n        [%| ?~(sof leaf+\"mute.hunk\" (smyt u.sof)) ~]\n  ::\n    %2  [%| p.ton]\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mute |.(leaf+\"hello\"))\n  [%.y p=[1.717.658.988 104 101 108 108 111 0]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mute |.(!!))\n  [%.n p=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mute |.(~|(%error !!)))\n  [%.n p=~[[%leaf p=\"%error\"]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(mute |.((cat 3 'foo' 'bar')))\n  [%.y p=125.762.588.864.358]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mute"
        ]
    },
    {
        "doc": "<h2><code>++slum</code></h2>\n\n<p>Slam a gate on a sample using raw nock, untyped</p>\n\n<p>Slam <code>gat</code> with <code>sam</code>. Uses a raw <code>.*</code> nock expression internally and does not\npreserve type information for the result. This will crash if evaluation crashes.</p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slum |=([a=@ b=@] (add a b)) [7 9])\n  16</p>\n</blockquote>\n\n<blockquote>\n  <p>(slum (cury cat 3) ['foo' 'bar'])\n  125.762.588.864.358</p>\n</blockquote>\n\n<blockquote>\n  <p>(@t (slum (cury cat 3) ['foo' 'bar']))\n  'foobar'</p>\n</blockquote>\n\n<blockquote>\n  <p>(slum |=(* !!) 42)\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slum"
        ]
    },
    {
        "doc": "<h2><code>++soft</code></h2>\n\n<p>Virtual clam</p>\n\n<p>Clam (mold) noun <code>fud</code> with <code>mold</code> <code>han</code>, producing a <code>unit</code> of the result. The\n<code>unit</code> is null if clamming failed. This is curried, so the soft-clamming gate can\nbe stored and called repeatedly.</p>\n\n<h4>Accepts</h4>\n\n<p><code>han</code> is a <code>mold</code>.</p>\n\n<p><code>fud</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit *)</code>, where the <code>*</code> will be the type produced by the mold.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  soft\n  |*  han=$-(* *)\n  |=(fud=* (mole |.((han fud))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>((soft @t) 97)\n  [~ 'a']</p>\n</blockquote>\n\n<blockquote>\n  <p>((soft @t) [1 2])\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>((soft ,[@ux @ux]) ['a' 'b'])\n  [~ [0x61 0x62]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "soft"
        ]
    },
    {
        "doc": "<h2><code>+$abel</code></h2>\n\n<p>Original sin: type</p>\n\n<p>Old type, same as the new <code>type</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  abel  typo\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*abel</p>\n  \n  <h1>t/*</h1>\n</blockquote>\n\n<p>```</p>\n\n<hr />\n",
        "keys": [
            "$abel"
        ]
    },
    {
        "doc": "<h2><code>+$alas</code></h2>\n\n<p>Alias list</p>\n\n<p>This is the type used in <code>%brcb</code> (<code>|_</code> door) <code>hoon</code> type for <code>+*</code> alias arms.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  alas  (list (pair term hoon))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$alas"
        ]
    },
    {
        "doc": "<h2><code>+$atom</code></h2>\n\n<p>Just an atom</p>\n\n<p>This is the same as <code>@</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  atom  @\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*atom\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p><code>atom</code>'foo'\n  7.303.014\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$atom"
        ]
    },
    {
        "doc": "<h2><code>+$aura</code></h2>\n\n<p>'type' of atom</p>\n\n<p>By convention, a short name for a category of atom. <code>aura</code> is circularly\ndefined, with <code>@ta</code> being the <code>aura</code> of the ASCII subset commonly used in urbit.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  aura  @ta\n</code></p>\n\n<h4>Examples</h4>\n\n<p>See also: <a href=\"#base\"><code>+$base</code></a>, aura reference</p>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>aura</code>'ux'\n  ~.ux\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$aura"
        ]
    },
    {
        "doc": "<h2><code>+$base</code></h2>\n\n<p>Base type</p>\n\n<p>A base type that nouns are built from. A <code>base</code> is either a noun, atom with\naura, cell, boolean, null, or an empty set.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  base            ::  base mold\n  $@  $?  %noun     ::  any noun\n          %cell     ::  any cell\n          %flag     ::  loobean\n          %null     ::  ~ == 0\n          %void     ::  empty set\n      ==            ::\n  [%atom p=aura]    ::  atom\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*base\n  %void</p>\n</blockquote>\n\n<blockquote>\n  <p>(ream '=|(^ !!)')\n  [%tsbr p=[%base p=%cell] q=[%zpzp ~]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$base"
        ]
    },
    {
        "doc": "<h2><code>+$woof</code></h2>\n\n<p>Simple embed</p>\n\n<p>An atom or some <code>hoon</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  woof  $@(@ [~ p=hoon])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*woof\n  0</p>\n</blockquote>\n\n<blockquote>\n  <p><code>woof</code>[~ %base p=%cell]\n  [~ p=[%base p=%cell]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>woof</code>'foo'\n  7.303.014\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$woof"
        ]
    },
    {
        "doc": "<h2><code>+$chum</code></h2>\n\n<p>Jet hint information</p>\n\n<p>Jet hint information that must be present in the body of a <code>~/</code> or <code>~%</code> rune. A\n<code>chum</code> can optionally contain a kelvin version, jet vendor, and version number.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  chum  $?  lef=term                                  ::  jet name\n              [std=term kel=@]                          ::  kelvin version\n              [ven=term pro=term kel=@]                 ::  vendor and product\n              [ven=term pro=term ver=@ kel=@]           ::  all of the above\n          ==                                            ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>chum</code>'hi'\n  lef=%hi</p>\n</blockquote>\n\n<blockquote>\n  <p>(ream '~/(%lob.314 !!)')\n  [%sgfs p=[std=%lob kel=314] q=[%zpzp ~]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$chum"
        ]
    },
    {
        "doc": "<h2><code>+$coil</code></h2>\n\n<p>Tuple of core information</p>\n\n<p>Variance <code>p</code>, subject type <code>q</code>, and <code>r</code>: optional compiled nock, and arms. Used\nas an intermediate step during compilation and converted to a core.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  coil  $:  p=garb                               ::  name, wet=dry, vary\n              q=type                               ::  context\n              r=(pair seminoun (map term tome))    ::  chapters\n          ==                                       ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$coil"
        ]
    },
    {
        "doc": "<h2><code>+$garb</code></h2>\n\n<p>Core metadata</p>\n\n<p>A triple of an optional name, polarity (wet/dry), and variance (<code>%iron</code>, etc).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  garb  (trel (unit term) poly vair)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$garb"
        ]
    },
    {
        "doc": "<h2><code>+$poly</code></h2>\n\n<p>Polarity</p>\n\n<p>Whether a core is wet or dry.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  poly  ?(%wet %dry)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$poly"
        ]
    },
    {
        "doc": "<h2><code>+$foot</code></h2>\n\n<p>Cases of arms by variance model.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  foot  $%  [%dry p=hoon]    ::  dry arm, geometric\n              [%wet p=hoon]    ::  wet arm, generic\n          ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "$foot"
        ]
    },
    {
        "doc": "<h2><code>+$link</code></h2>\n\n<p>Lexical segment</p>\n\n<p>Used for documentation.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  link                               ::  lexical segment\n          $%  [%chat p=term]           ::  |chapter\n              [%cone p=aura q=atom]    ::  %constant\n              [%frag p=term]           ::  .leg\n              [%funk p=term]           ::  +arm\n          ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "$link"
        ]
    },
    {
        "doc": "<h2><code>+$crib</code></h2>\n\n<p>Summary and details</p>\n\n<p>Summary and details for documentation.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  crib  [summary=cord details=(list sect)]\n</code></p>\n\n<hr />\n",
        "keys": [
            "$crib"
        ]
    },
    {
        "doc": "<h2><code>+$help</code></h2>\n\n<p>Documentation</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  help  [links=(list link) =crib]\n</code></p>\n\n<hr />\n",
        "keys": [
            "$help"
        ]
    },
    {
        "doc": "<h2><code>+$limb</code></h2>\n\n<p>Wing element</p>\n\n<p>Reference into subject by tree address or name.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  limb  $@  term                                      ::  wing element\n          $%  [%&amp; p=axis]                               ::  by geometry\n              [%| p=@ud q=(unit term)]                  ::  by name\n          ==                                            ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(ream '^^$')\n  [%wing p=~[[%.n p=2 q=[~ %$]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$limb"
        ]
    },
    {
        "doc": "<h2><code>+$null</code></h2>\n\n<p>Null, nil, etc</p>\n\n<p>Just <code>~</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  null  ~\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*null\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$null"
        ]
    },
    {
        "doc": "<h2><code>+$onyx</code></h2>\n\n<p>Arm activation</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  onyx  (list (pair type foot))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$onyx"
        ]
    },
    {
        "doc": "<h2><code>+$opal</code></h2>\n\n<p>Wing match</p>\n\n<p>Arm or leg of a wing.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  opal                                            ::  limb match\n          $%  [%&amp; p=type]                           ::  leg\n              [%| p=axis q=(set [p=type q=foot])]   ::  arm\n          ==                                        ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$opal"
        ]
    },
    {
        "doc": "<h2><code>+$pica</code></h2>\n\n<p>Prose or code</p>\n\n<p>A <code>(pair ? cord)</code>. If <code>%.y</code> it's prose and if <code>%.n</code> it's code. Used in\ndocumentation.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  pica  (pair ? cord)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$pica"
        ]
    },
    {
        "doc": "<h2><code>+$palo</code></h2>\n\n<p>Wing trace, match</p>\n\n<p>A <a href=\"#vein\"><code>$vein</code></a> and a <a href=\"#opal\"><code>$opal</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  palo  (pair vein opal)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$palo"
        ]
    },
    {
        "doc": "<h2><code>+$plat</code></h2>\n\n<p>%hoon, %type, %nock or %tank</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  plat\n          $?  %hoon\n              %type\n              %nock\n              %tank\n          ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "$plat"
        ]
    },
    {
        "doc": "<h2><code>+$pock</code></h2>\n\n<p>Changes</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  pock  (pair axis nock)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$pock"
        ]
    },
    {
        "doc": "<h2><code>+$port</code></h2>\n\n<p>Successful wing match</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  port  (each palo (pair type nock))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$port"
        ]
    },
    {
        "doc": "<h2><code>+$spec</code></h2>\n\n<p>Structure definition AST.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  spec                                                ::  structure definition\n          $~  [%base %null]                             ::\n          $%  [%base p=base]                            ::  base type\n              [%dbug p=spot q=spec]                     ::  set debug\n              [%leaf p=term q=@]                        ::  constant atom\n              [%like p=wing q=(list wing)]              ::  reference\n              [%loop p=term]                            ::  hygienic reference\n              [%made p=(pair term (list term)) q=spec]  ::  annotate synthetic\n              [%make p=hoon q=(list spec)]              ::  composed spec\n              [%name p=term q=spec]                     ::  annotate simple\n              [%over p=wing q=spec]                     ::  relative to subject\n          ::                                            ::\n              [%bcgr p=spec q=spec]                     ::  $&gt;, filter: require\n              [%bcbc p=spec q=(map term spec)]          ::  $$, recursion\n              [%bcbr p=spec q=hoon]                     ::  $|, verify\n              [%bccb p=hoon]                            ::  $_, example\n              [%bccl p=[i=spec t=(list spec)]]          ::  $:, tuple\n              [%bccn p=[i=spec t=(list spec)]]          ::  $%, head pick\n              [%bcdt p=spec q=(map term spec)]          ::  $., read-write core\n              [%bcgl p=spec q=spec]                     ::  $&lt;, filter: exclude\n              [%bchp p=spec q=spec]                     ::  $-, function core\n              [%bckt p=spec q=spec]                     ::  $^, cons pick\n              [%bcls p=stud q=spec]                     ::  $+, standard\n              [%bcfs p=spec q=(map term spec)]          ::  $/, write-only core\n              [%bcmc p=hoon]                            ::  $;, manual\n              [%bcpm p=spec q=hoon]                     ::  $&amp;, repair\n              [%bcsg p=hoon q=spec]                     ::  $~, default\n              [%bctc p=spec q=(map term spec)]          ::  $`, read-only core\n              [%bcts p=skin q=spec]                     ::  $=, name\n              [%bcpt p=spec q=spec]                     ::  $@, atom pick\n              [%bcwt p=[i=spec t=(list spec)]]          ::  $?, full pick\n              [%bczp p=spec q=(map term spec)]          ::  $!, opaque core\n          ==                                            ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*spec\n  [%base p=%null]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>spec</code>[%bccl ~[leaf+ud+1 leaf+ud+2]]\n  [%bccl p=[i=[%leaf p=%ud q=1] t=~[[%leaf p=%ud q=2]]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$spec"
        ]
    },
    {
        "doc": "<h2><code>+$tent</code></h2>\n\n<p>Model builder</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tent\n          $%  [%| p=wing q=tent r=(list spec)]    ::  ~(p q r...)\n              [%&amp; p=(list wing)]                  ::  a.b:c.d\n          ==                                      ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tent"
        ]
    },
    {
        "doc": "<h2><code>+$tiki</code></h2>\n\n<p>Test case</p>\n\n<p>This is used when compiling <code>?-</code> expressions and similar.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tiki                                                ::  test case\n          $%  [%&amp; p=(unit term) q=wing]                 ::  simple wing\n              [%| p=(unit term) q=hoon]                 ::  named wing\n          ==                                            ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tiki"
        ]
    },
    {
        "doc": "<h2><code>+$skin</code></h2>\n\n<p>Texture</p>\n\n<p>This type is used for faces and similar by the compiler.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  skin                             ::  texture\n          $@  =term                  ::  name/~[term %none]\n          $%  [%base =base]          ::  base match\n              [%cell =skin =skin]    ::  pair\n              [%dbug =spot =skin]    ::  trace\n              [%leaf =aura =atom]    ::  atomic constant\n              [%help =help =skin]    ::  describe\n              [%name =term =skin]    ::  apply label\n              [%over =wing =skin]    ::  relative to\n              [%spec =spec =skin]    ::  cast to\n              [%wash depth=@ud]      ::  strip faces\n          ==                         ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$skin"
        ]
    },
    {
        "doc": "<h2><code>+$tome</code></h2>\n\n<p>Core chapter</p>\n\n<p>This type is used by the compiler for the contents of arms in cores.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tome  (pair what (map term hoon))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tome"
        ]
    },
    {
        "doc": "<h2><code>+$tope</code></h2>\n\n<p>Topographic type</p>\n\n<p>Describes the structure of a noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tope              ::  topographic type\n  $@  $?  %&amp;          ::  cell or atom\n          %|          ::  atom\n      ==              ::\n  (pair tope tope)    ::  cell\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*tope\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p><code>tope</code>[%| %&amp;]\n  [p=%.n q=%.y]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$tope"
        ]
    },
    {
        "doc": "<h2><code>++hoot</code></h2>\n\n<p>Hoon tools</p>\n\n<p>Container core for internally-used XML structure types. XML structure types\nyou'd typically use directly are defined in <a href=\"/reference/hoon/stdlib/5e\">Standard Library section\n5e</a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hoot\n  |%\n</code></p>\n\n<hr />\n\n<h3><code>+$beer:hoot</code></h3>\n\n<p>Simple embed</p>\n\n<p>Either a tape element or interpolated hoon expression in an XML attribute.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  beer  $@(char [~ p=hoon])\n</code></p>\n\n<hr />\n\n<h3><code>+$mane:hoot</code></h3>\n\n<p>XML name+space</p>\n\n<p>XML tag name and optional namespace.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  mane  $@(@tas [@tas @tas])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(en-xml:html ;foo;)\n  \"<foo></foo>\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html ;foo_bar;)\n  \"<foo:bar></foo:bar>\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>manx:hoot</code>;foo_bar;\n  [g=[n=[%foo %bar] a=~] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mane:hoot</code>n.g:<code>manx</code>;foo_bar;\n  [%foo %bar]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mane:hoot</code>n.g:<code>manx:hoot</code>;foo;\n  %foo\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>+$manx:hoot</code></h3>\n\n<p>Dynamic XML node</p>\n\n<p>An XML element which may contain text, attributes, and other elements.</p>\n\n<p><code>g</code> is a <a href=\"#marxhoot\"><code>$marx:hoot</code></a> (a tag) and <code>c</code> is a\n<a href=\"#marlhoot\"><code>$marl:hoot</code></a> (its contents).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  manx  $~([[%$ ~] ~] [g=marx c=marl])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*manx:hoot\n  [g=[n=%$ a=~] c=~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>manx:hoot</code>;foo;\n  [g=[n=%foo a=~] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html <code>manx:hoot</code>;foo;)\n  \"<foo></foo>\"</p>\n</blockquote>\n\n<blockquote>\n  <p>=a ^-  manx:hoot\n       ;foo\n         ;bar: abc\n         ;baz\n           ;xxx: hello\n         ==\n       ==</p>\n</blockquote>\n\n<blockquote>\n  <p>a\n  [ g=[n=%foo a=~]\n      c\n    ~[\n      [ g=[n=%bar a=~]\n        c=~[[g=[n=%$ a=~[[n=%$ v=\"abc\"]]] c=~]]\n      ]\n      [ g=[n=%baz a=~]\n          c\n        ~[\n          [ g=[n=%xxx a=~]\n            c=~[[g=[n=%$ a=~[[n=%$ v=\"hello\"]]] c=~]]\n          ]\n        ]\n      ]\n    ]\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html a)\n  \"<foo><bar>abc</bar><baz><xxx>hello</xxx></baz></foo>\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>+$marl:hoot</code></h3>\n\n<p>Dynamic XML nodes</p>\n\n<p>A list of XML nodes - maybe with interpolation and recursion. See\n<a href=\"#tunahoot\"><code>$tuna:hoot</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  marl  (list tuna)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*marl\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>^-  marl:hoot\n    ;=\n      ;foo: abc\n      ;bar: def\n    ==\n  ~[\n    [g=[n=%foo a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['a' 'b' 'c']]]] c=~]]]\n    [g=[n=%bar a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['d' 'e' 'f']]]] c=~]]]\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>%-  en-xml:html\n    ;baz\n      ;=\n        ;foo: abc\n        ;bar: def\n      ==\n    ==\n  \"<baz><foo>abc</foo><bar>def</bar></baz>\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>+$mart:hoot</code></h3>\n\n<p>Dynamic XML attributes</p>\n\n<p>A list of atributes for an XML tag. For each list item, <code>n</code> is a\n<a href=\"#manehoot\"><code>$mane:hoot</code></a> (an attribute name with optional namespace) and <code>v</code> is\na <code>(list beer:hoot)</code> (the attribute itself, maybe with interpolated hoon).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  mart  (list [n=mane v=(list beer)])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*mart:hoot\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>manx:hoot</code>;foo.bar;\n  [g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mart:hoot</code>a.g:<code>manx:hoot</code>;foo.bar;\n  ~[[n=%class v=~['b' 'a' 'r']]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html ;foo.bar;)\n  \"<foo class=\\\"bar\\\"></foo>\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>+$marx:hoot</code></h3>\n\n<p>Dynamic XML tag</p>\n\n<p>An XML tag with optional attributes. <code>n</code> is a <a href=\"#manehoot\"><code>$mane:hoot</code></a> (the tag\nname with optional namespace) and <code>a</code> is a <a href=\"#marthoot\"><code>$mart:hoot</code></a> (any XML\nattributes).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  marx  $~([%$ ~] [n=mane a=mart])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>manx:hoot</code>;foo.bar;\n  [g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>marx:hoot</code>g:<code>manx:hoot</code>;foo.bar;\n  [n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html ;foo.bar;)\n  \"<foo class=\\\"bar\\\"></foo>\"\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>+$mare:hoot</code></h3>\n\n<p>Node or nodes</p>\n\n<p>If <code>%.y</code>, a <a href=\"#manxhoot\"><code>$manx:hoot</code></a> (single XML node). If <code>%.n</code>, a\n<a href=\"#marlhoot\"><code>$marl:hoot</code></a> (list of XML nodes).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  mare  (each manx marl)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*mare:hoot\n  [%.y p=[g=[n=%$ a=~] c=~]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mare:hoot</code>[%.y ;foo.bar;]\n  [%.y p=[g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~]]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mare:hoot</code>[%.n ~[;foo.bar; ;baz;]]\n  [%.n p=~[[g=[n=%foo a=~[[n=%class v=~['b' 'a' 'r']]]] c=~] [g=[n=%baz a=~] c=~]]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>+$maru:hoot</code></h3>\n\n<p>Interpolation or nodes</p>\n\n<p>If <code>%.y</code>, a <a href=\"#tunahoot\"><code>$tuna:hoot</code></a>. If <code>%.n</code>, a <a href=\"#marlhoot\"><code>$marl:hoot</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  maru  (each tuna marl)\n</code></p>\n\n<hr />\n\n<h3><code>+$tuna:hoot</code></h3>\n\n<p>Maybe interpolation</p>\n\n<p>Kinds of nodes. Either an ordinary <a href=\"#manxhoot\"><code>$manx:hoot</code></a>, or else a plain tape, a\n<a href=\"#marlhoot\"><code>$marl:hoot</code></a>, or a function call.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tuna\n    $~  [[%$ ~] ~]\n    $^  manx\n    $:  ?(%tape %manx %marl %call)\n        p=hoon\n    ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "hoot"
        ]
    },
    {
        "doc": "<h2><code>+$hoon</code></h2>\n\n<p>Hoon AST</p>\n\n<p>See the <a href=\"/reference/hoon/rune\">Rune section</a> of the Hoon reference for\ndetails of what many of these relate to.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  hoon                                                ::\n  $~  [%zpzp ~]\n  $^  [p=hoon q=hoon]                                   ::\n  $%                                                    ::\n    [%$ p=axis]                                         ::  simple leg\n  ::                                                    ::\n    [%base p=base]                                      ::  base spec\n    [%bust p=base]                                      ::  bunt base\n    [%dbug p=spot q=hoon]                               ::  debug info in trace\n    [%eror p=tape]                                      ::  assembly error\n    [%hand p=type q=nock]                               ::  premade result\n    [%note p=note q=hoon]                               ::  annotate\n    [%fits p=hoon q=wing]                               ::  underlying ?=\n    [%knit p=(list woof)]                               ::  assemble string\n    [%leaf p=(pair term @)]                             ::  symbol spec\n    [%limb p=term]                                      ::  take limb\n    [%lost p=hoon]                                      ::  not to be taken\n    [%rock p=term q=*]                                  ::  fixed constant\n    [%sand p=term q=*]                                  ::  unfixed constant\n    [%tell p=(list hoon)]                               ::  render as tape\n    [%tune p=$@(term tune)]                             ::  minimal face\n    [%wing p=wing]                                      ::  take wing\n    [%yell p=(list hoon)]                               ::  render as tank\n    [%xray p=manx:hoot]                                 ::  ;foo; templating\n  ::                                            ::::::  cores\n    [%brbc sample=(lest term) body=spec]                ::  |$\n    [%brcb p=spec q=alas r=(map term tome)]             ::  |_\n    [%brcl p=hoon q=hoon]                               ::  |:\n    [%brcn p=(unit term) q=(map term tome)]             ::  |%\n    [%brdt p=hoon]                                      ::  |.\n    [%brkt p=hoon q=(map term tome)]                    ::  |^\n    [%brhp p=hoon]                                      ::  |-\n    [%brsg p=spec q=hoon]                               ::  |~\n    [%brtr p=spec q=hoon]                               ::  |*\n    [%brts p=spec q=hoon]                               ::  |=\n    [%brpt p=(unit term) q=(map term tome)]             ::  |@\n    [%brwt p=hoon]                                      ::  |?\n  ::                                            ::::::  tuples\n    [%clcb p=hoon q=hoon]                               ::  :_ [q p]\n    [%clkt p=hoon q=hoon r=hoon s=hoon]                 ::  :^ [p q r s]\n    [%clhp p=hoon q=hoon]                               ::  :- [p q]\n    [%clls p=hoon q=hoon r=hoon]                        ::  :+ [p q r]\n    [%clsg p=(list hoon)]                               ::  :~ [p ~]\n    [%cltr p=(list hoon)]                               ::  :* p as a tuple\n  ::                                            ::::::  invocations\n    [%cncb p=wing q=(list (pair wing hoon))]            ::  %_\n    [%cndt p=hoon q=hoon]                               ::  %.\n    [%cnhp p=hoon q=hoon]                               ::  %-\n    [%cncl p=hoon q=(list hoon)]                        ::  %:\n    [%cntr p=wing q=hoon r=(list (pair wing hoon))]     ::  %*\n    [%cnkt p=hoon q=hoon r=hoon s=hoon]                 ::  %^\n    [%cnls p=hoon q=hoon r=hoon]                        ::  %+\n    [%cnsg p=wing q=hoon r=(list hoon)]                 ::  %~\n    [%cnts p=wing q=(list (pair wing hoon))]            ::  %=\n  ::                                            ::::::  nock\n    [%dtkt p=spec q=hoon]                               ::  .^  nock 11\n    [%dtls p=hoon]                                      ::  .+  nock 4\n    [%dttr p=hoon q=hoon]                               ::  .*  nock 2\n    [%dtts p=hoon q=hoon]                               ::  .=  nock 5\n    [%dtwt p=hoon]                                      ::  .?  nock 3\n  ::                                            ::::::  type conversion\n    [%ktbr p=hoon]                                      ::  ^|  contravariant\n    [%ktdt p=hoon q=hoon]                               ::  ^.  self-cast\n    [%ktls p=hoon q=hoon]                               ::  ^+  expression cast\n    [%kthp p=spec q=hoon]                               ::  ^-  structure cast\n    [%ktpm p=hoon]                                      ::  ^&amp;  covariant\n    [%ktsg p=hoon]                                      ::  ^~  constant\n    [%ktts p=skin q=hoon]                               ::  ^=  label\n    [%ktwt p=hoon]                                      ::  ^?  bivariant\n    [%kttr p=spec]                                      ::  ^*  example\n    [%ktcl p=spec]                                      ::  ^:  filter\n  ::                                            ::::::  hints\n    [%sgbr p=hoon q=hoon]                               ::  ~|  sell on trace\n    [%sgcb p=hoon q=hoon]                               ::  ~_  tank on trace\n    [%sgcn p=chum q=hoon r=tyre s=hoon]                 ::  ~%  general jet hint\n    [%sgfs p=chum q=hoon]                               ::  ~/  function j-hint\n    [%sggl p=$@(term [p=term q=hoon]) q=hoon]           ::  ~&lt;  backward hint\n    [%sggr p=$@(term [p=term q=hoon]) q=hoon]           ::  ~&gt;  forward hint\n    [%sgbc p=term q=hoon]                               ::  ~$  profiler hit\n    [%sgls p=@ q=hoon]                                  ::  ~+  cache=memoize\n    [%sgpm p=@ud q=hoon r=hoon]                         ::  ~&amp;  printf=priority\n    [%sgts p=hoon q=hoon]                               ::  ~=  don't duplicate\n    [%sgwt p=@ud q=hoon r=hoon s=hoon]                  ::  ~?  tested printf\n    [%sgzp p=hoon q=hoon]                               ::  ~!  type on trace\n  ::                                            ::::::  miscellaneous\n    [%mcts p=marl:hoot]                                 ::  ;=  list templating\n    [%mccl p=hoon q=(list hoon)]                        ::  ;:  binary to nary\n    [%mcfs p=hoon]                                      ::  ;/  [%$ [%$ p ~] ~]\n    [%mcgl p=spec q=hoon r=hoon s=hoon]                 ::  ;&lt;  bind\n    [%mcsg p=hoon q=(list hoon)]                        ::  ;~  kleisli arrow\n    [%mcmc p=spec q=hoon]                               ::  ;;  normalize\n  ::                                            ::::::  compositions\n    [%tsbr p=spec q=hoon]                               ::  =|  push bunt\n    [%tscl p=(list (pair wing hoon)) q=hoon]            ::  =:  q w= p changes\n    [%tsfs p=skin q=hoon r=hoon]                        ::  =/  typed variable\n    [%tsmc p=skin q=hoon r=hoon]                        ::  =;  =/(q p r)\n    [%tsdt p=wing q=hoon r=hoon]                        ::  =.  r with p as q\n    [%tswt p=wing q=hoon r=hoon s=hoon]                 ::  =?  conditional =.\n    [%tsgl p=hoon q=hoon]                               ::  =&lt;  =&gt;(q p)\n    [%tshp p=hoon q=hoon]                               ::  =-  =+(q p)\n    [%tsgr p=hoon q=hoon]                               ::  =&gt;  q w=subject p\n    [%tskt p=skin q=wing r=hoon s=hoon]                 ::  =^  state machine\n    [%tsls p=hoon q=hoon]                               ::  =+  q w=[p subject]\n    [%tssg p=(list hoon)]                               ::  =~  hoon stack\n    [%tstr p=(pair term (unit spec)) q=hoon r=hoon]     ::  =*  new style\n    [%tscm p=hoon q=hoon]                               ::  =,  overload p in q\n  ::                                            ::::::  conditionals\n    [%wtbr p=(list hoon)]                               ::  ?|  loobean or\n    [%wthp p=wing q=(list (pair spec hoon))]            ::  ?-  pick case in q\n    [%wtcl p=hoon q=hoon r=hoon]                        ::  ?:  if=then=else\n    [%wtdt p=hoon q=hoon r=hoon]                        ::  ?.  ?:(p r q)\n    [%wtkt p=wing q=hoon r=hoon]                        ::  ?^  if p is a cell\n    [%wtgl p=hoon q=hoon]                               ::  ?&lt;  ?:(p !! q)\n    [%wtgr p=hoon q=hoon]                               ::  ?&gt;  ?:(p q !!)\n    [%wtls p=wing q=hoon r=(list (pair spec hoon))]     ::  ?+  ?-  w=default\n    [%wtpm p=(list hoon)]                               ::  ?&amp;  loobean and\n    [%wtpt p=wing q=hoon r=hoon]                        ::  ?@  if p is atom\n    [%wtsg p=wing q=hoon r=hoon]                        ::  ?~  if p is null\n    [%wthx p=skin q=wing]                               ::  ?#  if q matches p\n    [%wtts p=spec q=wing]                               ::  ?=  if q matches p\n    [%wtzp p=hoon]                                      ::  ?!  loobean not\n  ::                                            ::::::  special\n    [%zpcm p=hoon q=hoon]                               ::  !,\n    [%zpgr p=hoon]                                      ::  !&gt;\n    [%zpgl p=spec q=hoon]                               ::  !&lt;\n    [%zpmc p=hoon q=hoon]                               ::  !;\n    [%zpts p=hoon]                                      ::  !=\n    [%zppt p=(list wing) q=hoon r=hoon]                 ::  !@\n    [%zpwt p=$@(p=@ [p=@ q=@]) q=hoon]                  ::  !?\n    [%zpzp ~]                                           ::  !!\n  ==                                                    ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*hoon\n  [%zpzp ~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>hoon</code>(ream '|=([a=@ b=@] [b a])')\n  [ %brts\n      p\n    [ %bccl\n        p\n      [ i=[%bcts p=term=%a q=[%base p=[%atom p=~.]]]\n        t=~[[%bcts p=term=%b q=[%base p=[%atom p=~.]]]]\n      ]\n    ]\n    q=[%cltr p=~[[%wing p=~[%b]] [%wing p=~[%a]]]]\n  ]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$hoon"
        ]
    },
    {
        "doc": "<h2><code>+$tyre</code></h2>\n\n<p>List, term hoon</p>\n\n<p>Associative list of <code>term</code> <code>hoon</code>, used in jet hint processing.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tyre  (list [p=term q=hoon])                        ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tyre"
        ]
    },
    {
        "doc": "<h2><code>+$tyke</code></h2>\n\n<p>List of 'maybe' hoons</p>\n\n<p>List of <code>unit</code> <code>hoon</code>, or gaps left to be inferred, in <code>path</code> parsing. When you\nuse a path such as <code>/=base=/gen/code</code> the path is in fact a <code>tyke</code>, where the\n<code>=</code> are inferred from your current path.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tyke  (list (unit hoon))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tyke"
        ]
    },
    {
        "doc": "<h2><code>+$nock</code></h2>\n\n<p>Virtual nock.</p>\n\n<p>See the <a href=\"/reference/nock/definition\">Nock documentation</a> for details.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  nock  $^  [p=nock q=nock]                      ::  autocons\n          $%  [%1 p=*]                             ::  constant\n              [%2 p=nock q=nock]                   ::  compose\n              [%3 p=nock]                          ::  cell test\n              [%4 p=nock]                          ::  increment\n              [%5 p=nock q=nock]                   ::  equality test\n              [%6 p=nock q=nock r=nock]            ::  if, then, else\n              [%7 p=nock q=nock]                   ::  serial compose\n              [%8 p=nock q=nock]                   ::  push onto subject\n              [%9 p=@ q=nock]                      ::  select arm and fire\n              [%10 p=[p=@ q=nock] q=nock]          ::  edit\n              [%11 p=$@(@ [p=@ q=nock]) q=nock]    ::  hint\n              [%12 p=nock q=nock]                  ::  grab data from sky\n              [%0 p=@]                             ::  axis select\n          ==                                       ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!=([+(.) 20 -&lt;])\n  [[4 0 1] [1 20] 0 4]</p>\n</blockquote>\n\n<blockquote>\n  <p>(nock !=([+(.) 20]))\n  [p=[%4 p=[%0 p=1]] q=[%1 p=20]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$nock"
        ]
    },
    {
        "doc": "<h2><code>+$note</code></h2>\n\n<p>Type annotation</p>\n\n<p>Used for documentation.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  note                                             ::  type annotation\n          $%  [%help p=help]                         ::  documentation\n              [%know p=stud]                         ::  global standard\n              [%made p=term q=(unit (list wing))]    ::  structure\n          ==                                         ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$note"
        ]
    },
    {
        "doc": "<h2><code>+$type</code></h2>\n\n<p>Hoon type type</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  type  $~  %noun                                ::\n          $@  $?  %noun                            ::  any nouns\n                  %void                            ::  no noun\n              ==                                   ::\n          $%  [%atom p=term q=(unit @)]            ::  atom / constant\n              [%cell p=type q=type]                ::  ordered pair\n              [%core p=type q=coil]                ::  object\n              [%face p=$@(term tune) q=type]       ::  namespace\n              [%fork p=(set type)]                 ::  union\n              [%hint p=(pair type note) q=type]    ::  annotation\n              [%hold p=type q=hoon]                ::  lazy evaluation\n          ==                                       ::\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>type</code>[%cell [%atom %ud ~] [%atom %ud ~]]</p>\n  \n  <h1>t/[@ud @ud]</h1>\n</blockquote>\n\n<p>```</p>\n\n<hr />\n",
        "keys": [
            "$type"
        ]
    },
    {
        "doc": "<h2><code>+$tony</code></h2>\n\n<p><code>$tone</code> done right</p>\n\n<p>An intermediate Nock computation result. Similar to a\n<a href=\"/reference/hoon/stdlib/3g#toon\"><code>$toon</code></a> but without a rendered stack\ntrace.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tony                               ::  ++tone done right\n          $%  [%0 p=tine q=*]          ::  success\n              [%1 p=(set)]             ::  blocks\n              [%2 p=(list [@ta *])]    ::  error ~_s\n          ==                           ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tony"
        ]
    },
    {
        "doc": "<h2><code>+$tine</code></h2>\n\n<p>Partial noun</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tine                            ::  partial noun\n          $@  ~                     ::  open\n          $%  [%&amp; p=tine q=tine]    ::  half-blocked\n              [%| p=(set)]          ::  fully blocked\n          ==                        ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tine"
        ]
    },
    {
        "doc": "<h2><code>+$tool</code></h2>\n\n<p>Type decoration</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tool  $@(term tune)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tool"
        ]
    },
    {
        "doc": "<h2><code>+$tune</code></h2>\n\n<p>Complex</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  tune                                  ::  complex\n          $~  [~ ~]                       ::\n          $:  p=(map term (unit hoon))    ::  aliases\n              q=(list hoon)               ::  bridges\n          ==                              ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$tune"
        ]
    },
    {
        "doc": "<h2><code>+$typo</code></h2>\n\n<p>Old type</p>\n\n<p>Same as <code>$type</code></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  typo  type\n</code></p>\n\n<hr />\n",
        "keys": [
            "$typo"
        ]
    },
    {
        "doc": "<h2><code>+$vase</code></h2>\n\n<p>Type-value pair</p>\n\n<p>Typed data. A <code>$vase</code> is used wherever typed data is explicitly worked with.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  vase  [p=type q=*]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><em>vase\n  [#t/</em> q=0]</p>\n</blockquote>\n\n<blockquote>\n  <p>!>([2 2])\n  [#t/[@ud @ud] q=[2 2]]</p>\n</blockquote>\n\n<blockquote>\n  <p>!>('foo')\n  [#t/@t q=7.303.014]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$vase"
        ]
    },
    {
        "doc": "<h2><code>+$vise</code></h2>\n\n<p>Old vase</p>\n\n<p>Same as a <a href=\"#vase\"><code>$vase</code></a>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  vise  [p=typo q=*]\n</code></p>\n\n<hr />\n",
        "keys": [
            "$vise"
        ]
    },
    {
        "doc": "<h2><code>+$vial</code></h2>\n\n<p>co/contra/in/bi</p>\n\n<p>Covariant, contravariant, invariant, bivariant.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  vial  ?(%read %rite %both %free)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$vial"
        ]
    },
    {
        "doc": "<h2><code>+$vair</code></h2>\n\n<p>in/contra/bi/co</p>\n\n<p>Core variance.</p>\n\n<ul>\n<li><code>%gold</code> - invariant payload.</li>\n<li><code>%iron</code> - contravariant sample.</li>\n<li><code>%lead</code> - bivariant sample.</li>\n<li><code>%zinc</code> - covariant sample.</li>\n</ul>\n\n<p>See the Hoon School lesson on <a href=\"/guides/core/hoon-school/R-metals\">type\npolymorphism</a> for more details.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  vair  ?(%gold %iron %lead %zinc)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$vair"
        ]
    },
    {
        "doc": "<h2><code>+$vein</code></h2>\n\n<p>Search trace</p>\n\n<p>Noun search trace.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  vein  (list (unit axis))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$vein"
        ]
    },
    {
        "doc": "<h2><code>+$sect</code></h2>\n\n<p>Paragraph</p>\n\n<p>Used in documentation.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  sect  (list pica)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$sect"
        ]
    },
    {
        "doc": "<h2><code>+$whit</code></h2>\n\n<p>Documentation</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  whit                                                ::\n          $:  lab=(unit term)                           ::  label\n              boy=(unit (pair cord (list sect)))        ::  body\n              def=(map term (pair cord (list sect)))    ::  definitions\n              use=(set term)                            ::  defs used\n          ==                                            ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$whit"
        ]
    },
    {
        "doc": "<h2><code>+$what</code></h2>\n\n<p>Help slogan/section</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  what  (unit (pair cord (list sect)))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$what"
        ]
    },
    {
        "doc": "<h2><code>+$block</code></h2>\n\n<p>Abstract identity of resource awaited</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  block\n  path\n</code></p>\n\n<hr />\n",
        "keys": [
            "$block"
        ]
    },
    {
        "doc": "<h2><code>+$result</code></h2>\n\n<p>Internal interpreter result</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  result\n  $@(~ seminoun)\n</code></p>\n\n<hr />\n",
        "keys": [
            "$result"
        ]
    },
    {
        "doc": "<h2><code>+$thunk</code></h2>\n\n<p>Fragment constructor</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  thunk\n  $-(@ud (unit noun))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$thunk"
        ]
    },
    {
        "doc": "<h2><code>+$doss</code></h2>\n\n<p>Profiling</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  doss\n  $:  mon=moan               ::  sample count\n      hit=(map term @ud)     ::  hit points\n      cut=(map path hump)    ::  cut points\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "$doss"
        ]
    },
    {
        "doc": "<h2><code>+$moan</code></h2>\n\n<p>Profiling: sample metric</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  moan         ::  sample metric\n  $:  fun=@ud    ::  samples in C\n      noc=@ud    ::  samples in nock\n      glu=@ud    ::  samples in glue\n      mal=@ud    ::  samples in alloc\n      far=@ud    ::  samples in frag\n      coy=@ud    ::  samples in copy\n      euq=@ud    ::  samples in equal\n  ==             ::\n</code></p>\n\n<hr />\n",
        "keys": [
            "$moan"
        ]
    },
    {
        "doc": "<h2><code>+$hump</code></h2>\n\n<p>Profiling</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  hump\n  $:  mon=moan              ::  sample count\n      out=(map path @ud)    ::  calls out of\n      inn=(map path @ud)    ::  calls into\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "$hump"
        ]
    },
    {
        "doc": "<h2><code>++musk</code></h2>\n\n<p>Nock with block set</p>\n\n<h4>Source</h4>\n\n<p>This function is extremely large, please refer to <code>hoon.hoon</code> for the source.</p>\n\n<hr />\n",
        "keys": [
            "musk"
        ]
    },
    {
        "doc": "<h2><code>++bool</code></h2>\n\n<p>Make loobean</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  bool  `type`(fork [%atom %f `0] [%atom %f `1] ~)\n</code></p>\n\n<hr />\n",
        "keys": [
            "bool"
        ]
    },
    {
        "doc": "<h2><code>++cell</code></h2>\n\n<p>Make <code>%cell</code> type</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cell\n  ~/  %cell\n  |=  [hed=type tal=type]\n  ^-  type\n  ?:(=(%void hed) %void ?:(=(%void tal) %void [%cell hed tal]))\n</code></p>\n\n<hr />\n",
        "keys": [
            "cell"
        ]
    },
    {
        "doc": "<h2><code>++core</code></h2>\n\n<p>Make <code>%core</code> type</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  core\n  ~/  %core\n  |=  [pac=type con=coil]\n  ^-  type\n  ?:(=(%void pac) %void [%core pac con])\n</code></p>\n\n<hr />\n",
        "keys": [
            "core"
        ]
    },
    {
        "doc": "<h2><code>++hint</code></h2>\n\n<p>Make <code>%hint</code> type</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hint\n  |=  [p=(pair type note) q=type]\n  ^-  type\n  ?:  =(%void q)  %void\n  ?:  =(%noun q)  %noun\n  [%hint p q]\n</code></p>\n\n<hr />\n",
        "keys": [
            "hint"
        ]
    },
    {
        "doc": "<h2><code>++face</code></h2>\n\n<p>Make <code>%face</code> type</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  face\n  ~/  %face\n  |=  [giz=$@(term tune) der=type]\n  ^-  type\n  ?:  =(%void der)\n    %void\n  [%face giz der]\n</code></p>\n\n<hr />\n",
        "keys": [
            "face"
        ]
    },
    {
        "doc": "<h2><code>++fork</code></h2>\n\n<p>Make <code>%fork</code> type</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fork\n  ~/  %fork\n  |=  yed=(list type)\n  =|  lez=(set type)\n  |-  ^-  type\n  ?~  yed\n    ?~  lez  %void\n    ?:  ?=([* ~ ~] lez)  n.lez\n    [%fork lez]\n  %=    $\n      yed  t.yed\n      lez\n    ?:  =(%void i.yed)  lez\n    ?:  ?=([%fork *] i.yed)  (~(uni in lez) p.i.yed)\n    (~(put in lez) i.yed)\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "fork"
        ]
    },
    {
        "doc": "<h2><code>++cove</code></h2>\n\n<p>Extract [0 *] axis</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cove\n  |=  nug=nock\n  ?-    nug\n      [%0 *]   p.nug\n      [%11 *]  $(nug q.nug)\n      *        ~_(leaf+\"cove\" !!)\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "cove"
        ]
    },
    {
        "doc": "<h2><code>++comb</code></h2>\n\n<p>Combine two formulas</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  comb\n  ~/  %comb\n  |=  [mal=nock buz=nock]\n  ^-  nock\n  ?:  ?&amp;(?=([%0 *] mal) !=(0 p.mal))\n    ?:  ?&amp;(?=([%0 *] buz) !=(0 p.buz))\n      [%0 (peg p.mal p.buz)]\n    ?:  ?=([%2 [%0 *] [%0 *]] buz)\n      [%2 [%0 (peg p.mal p.p.buz)] [%0 (peg p.mal p.q.buz)]]\n    [%7 mal buz]\n  ?:  ?=([^ [%0 %1]] mal)\n    [%8 p.mal buz]\n  ?:  =([%0 %1] buz)\n    mal\n  [%7 mal buz]\n</code></p>\n\n<hr />\n",
        "keys": [
            "comb"
        ]
    },
    {
        "doc": "<h2><code>++cond</code></h2>\n\n<p><code>?:</code> compile</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cond\n  ~/  %cond\n  |=  [pex=nock yom=nock woq=nock]\n  ^-  nock\n  ?-  pex\n    [%1 %0]  yom\n    [%1 %1]  woq\n    *        [%6 pex yom woq]\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "cond"
        ]
    },
    {
        "doc": "<h2><code>++cons</code></h2>\n\n<p>Make formula cell</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cons\n  ~/  %cons\n  |=  [vur=nock sed=nock]\n  ^-  nock\n  ::  this optimization can remove crashes which are essential\n  ::\n  ::  ?:  ?=([[%0 *] [%0 *]] +&lt;)\n  ::  ?:  ?&amp;(=(+(p.vur) p.sed) =((div p.vur 2) (div p.sed 2)))\n  ::    [%0 (div p.vur 2)]\n  ::  [vur sed]\n  ?:  ?=([[%1 *] [%1 *]] +&lt;)\n    [%1 p.vur p.sed]\n  [vur sed]\n</code></p>\n\n<hr />\n",
        "keys": [
            "cons"
        ]
    },
    {
        "doc": "<h2><code>++fitz</code></h2>\n\n<p>Aura compatibility</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  fitz\n  ~/  %fitz\n  |=  [yaz=term wix=term]\n  =+  ^=  fiz\n      |=  mot=@ta  ^-  [p=@ q=@ta]\n      =+  len=(met 3 mot)\n      ?:  =(0 len)\n        [0 %$]\n      =+  tyl=(rsh [3 (dec len)] mot)\n      ?:  &amp;((gte tyl 'A') (lte tyl 'Z'))\n        [(sub tyl 64) (end [3 (dec len)] mot)]\n      [0 mot]\n  =+  [yoz=(fiz yaz) wux=(fiz wix)]\n  ?&amp;  ?|  =(0 p.yoz)\n          =(0 p.wux)\n          &amp;(!=(0 p.wux) (lte p.wux p.yoz))\n      ==\n      |-  ?|  =(%$ p.yoz)\n              =(%$ p.wux)\n              ?&amp;  =((end 3 p.yoz) (end 3 p.wux))\n                  $(p.yoz (rsh 3 p.yoz), p.wux (rsh 3 p.wux))\n              ==\n          ==\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "fitz"
        ]
    },
    {
        "doc": "<h2><code>++flan</code></h2>\n\n<p>Loobean &amp;</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  flan\n  ~/  %flan\n  |=  [bos=nock nif=nock]\n  ^-  nock\n  ?:  =(bos nif)  bos\n  ?:  =([%0 0] bos)  nif\n  ?:  =([%0 0] nif)  bos\n  ?-    bos\n      [%1 %1]   bos\n      [%1 %0]   nif\n      *\n    ?-    nif\n        [%1 %1]   nif\n        [%1 %0]   bos\n        *       [%6 bos nif [%1 1]]\n    ==\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "flan"
        ]
    },
    {
        "doc": "<h2><code>++flip</code></h2>\n\n<p>Loobean negation</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  flip\n  ~/  %flip\n  |=  dyr=nock\n  ?:  =([%0 0] dyr)  dyr\n  [%6 dyr [%1 1] [%1 0]]\n</code></p>\n\n<hr />\n",
        "keys": [
            "flip"
        ]
    },
    {
        "doc": "<h2><code>++flor</code></h2>\n\n<p>Loobean |</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  flor\n  ~/  %flor\n  |=  [bos=nock nif=nock]\n  ^-  nock\n  ?:  =(bos nif)  bos\n  ?:  =([%0 0] bos)  nif\n  ?:  =([%0 0] nif)  bos\n  ?-  bos\n      [%1 %1]   nif\n      [%1 %0]   bos\n      *\n    ?-  nif\n        [%1 %1]   bos\n        [%1 %0]   nif\n        *         [%6 bos [%1 0] nif]\n    ==\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "flor"
        ]
    },
    {
        "doc": "<h2><code>++hike</code></h2>\n\n<p>Compiler utility</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  hike\n  ~/  %hike\n  |=  [a=axis pac=(list (pair axis nock))]\n  |^  =/  rel=(map axis nock)  (roll pac insert)\n      =/  ord=(list axis)      (sort ~(tap in ~(key by rel)) gth)\n      |-  ^-  nock\n      ?~  ord\n        [%0 a]\n      =/  b=axis  i.ord\n      =/  c=nock  (~(got by rel) b)\n      =/  d=nock  $(ord t.ord)\n      [%10 [b c] d]\n  ::\n  ++  contains\n    |=  [container=axis contained=axis]\n    ^-  ?\n    =/  big=@    (met 0 container)\n    =/  small=@  (met 0 contained)\n    ?:  (lte small big)  |\n    =/  dif=@  (sub small big)\n    =(container (rsh [0 dif] contained))\n  ::\n  ++  parent\n    |=  a=axis\n    `axis`(rsh 0 a)\n  ::\n  ++  sibling\n    |=  a=axis\n    ^-  axis\n    ?~  (mod a 2)\n      +(a)\n    (dec a)\n  ::\n  ++  insert\n    |=  [e=[axe=axis fol=nock] n=(map axis nock)]\n    ^-  (map axis nock)\n    ?:  =/  a=axis  axe.e\n        |-  ^-  ?\n        ?:  =(1 a)  |\n        ?:  (~(has by n) a)\n          &amp;\n        $(a (parent a))\n      ::  parent already in\n      n\n    =.  n\n      ::  remove children\n      %+  roll  ~(tap by n)\n      |=  [[axe=axis fol=nock] m=_n]\n      ?.  (contains axe.e axe)  m\n      (~(del by m) axe)\n    =/  sib  (sibling axe.e)\n    =/  un   (~(get by n) sib)\n    ?~  un   (~(put by n) axe.e fol.e)\n    ::  replace sibling with parent\n    %=  $\n      n  (~(del by n) sib)\n      e  :-  (parent sib)\n         ?:  (gth sib axe.e)\n           (cons fol.e u.un)\n         (cons u.un fol.e)\n    ==\n  --\n</code></p>\n\n<hr />\n",
        "keys": [
            "hike"
        ]
    },
    {
        "doc": "<h2><code>++jock</code></h2>\n\n<p>Compiler utility</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  jock\n  |=  rad=?\n  |=  lot=coin  ^-  hoon\n  ?-    -.lot\n      ~\n    ?:(rad [%rock p.lot] [%sand p.lot])\n  ::\n      %blob\n    ?:  rad\n      [%rock %$ p.lot]\n    ?@(p.lot [%sand %$ p.lot] [$(p.lot -.p.lot) $(p.lot +.p.lot)])\n  ::\n      %many\n    [%cltr (turn p.lot |=(a=coin ^$(lot a)))]\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "jock"
        ]
    },
    {
        "doc": "<h2><code>++look</code></h2>\n\n<p>Compiler utility</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  look\n  ~/  %look\n  |=  [cog=term dab=(map term hoon)]\n  =+  axe=1\n  |-  ^-  (unit [p=axis q=hoon])\n  ?-  dab\n      ~  ~\n  ::\n      [* ~ ~]\n    ?:(=(cog p.n.dab) [~ axe q.n.dab] ~)\n  ::\n      [* ~ *]\n    ?:  =(cog p.n.dab)\n      [~ (peg axe 2) q.n.dab]\n    ?:  (gor cog p.n.dab)\n      ~\n    $(axe (peg axe 3), dab r.dab)\n  ::\n      [* * ~]\n    ?:  =(cog p.n.dab)\n      [~ (peg axe 2) q.n.dab]\n    ?:  (gor cog p.n.dab)\n      $(axe (peg axe 3), dab l.dab)\n    ~\n  ::\n      [* * *]\n    ?:  =(cog p.n.dab)\n      [~ (peg axe 2) q.n.dab]\n    ?:  (gor cog p.n.dab)\n      $(axe (peg axe 6), dab l.dab)\n    $(axe (peg axe 7), dab r.dab)\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "look"
        ]
    },
    {
        "doc": "<h2><code>++loot</code></h2>\n\n<p>Compiler utility</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  loot\n  ~/  %loot\n  |=  [cog=term dom=(map term tome)]\n  =+  axe=1\n  |-  ^-  (unit [p=axis q=hoon])\n  ?-  dom\n      ~  ~\n  ::\n      [* ~ ~]\n    %+  bind  (look cog q.q.n.dom)\n    |=((pair axis hoon) [(peg axe p) q])\n  ::\n      [* ~ *]\n    =+  yep=(look cog q.q.n.dom)\n    ?^  yep\n      [~ (peg (peg axe 2) p.u.yep) q.u.yep]\n    $(axe (peg axe 3), dom r.dom)\n  ::\n      [* * ~]\n    =+  yep=(look cog q.q.n.dom)\n    ?^  yep\n      [~ (peg (peg axe 2) p.u.yep) q.u.yep]\n    $(axe (peg axe 3), dom l.dom)\n  ::\n      [* * *]\n    =+  yep=(look cog q.q.n.dom)\n    ?^  yep\n      [~ (peg (peg axe 2) p.u.yep) q.u.yep]\n    =+  pey=$(axe (peg axe 6), dom l.dom)\n    ?^  pey  pey\n    $(axe (peg axe 7), dom r.dom)\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "loot"
        ]
    },
    {
        "doc": "<h2><code>++ah</code></h2>\n\n<p>Tiki engine</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ah\n  |_  tik=tiki\n  ++  blue\n    |=  gen=hoon\n    ^-  hoon\n    ?.  &amp;(?=(%| -.tik) ?=(~ p.tik))  gen\n    [%tsgr [%$ 3] gen]\n  ::\n  ++  teal\n    |=  mod=spec\n    ^-  spec\n    ?:  ?=(%&amp; -.tik)  mod\n    [%over [%&amp; 3]~ mod]\n  ::\n  ++  tele\n    |=  syn=skin\n    ^-  skin\n    ?:  ?=(%&amp; -.tik)  syn\n    [%over [%&amp; 3]~ syn]\n  ::\n  ++  gray\n    |=  gen=hoon\n    ^-  hoon\n    ?-  -.tik\n      %&amp;  ?~(p.tik gen [%tstr [u.p.tik ~] [%wing q.tik] gen])\n      %|  [%tsls ?~(p.tik q.tik [%ktts u.p.tik q.tik]) gen]\n    ==\n  ::\n  ++  puce\n    ^-  wing\n    ?-  -.tik\n      %&amp;  ?~(p.tik q.tik [u.p.tik ~])\n      %|  [[%&amp; 2] ~]\n    ==\n  ::\n  ++  wthp  |=  opt=(list (pair spec hoon))\n            %+  gray  %wthp\n            [puce (turn opt |=([a=spec b=hoon] [a (blue b)]))]\n  ++  wtkt  |=([sic=hoon non=hoon] (gray [%wtkt puce (blue sic) (blue non)]))\n  ++  wtls  |=  [gen=hoon opt=(list (pair spec hoon))]\n            %+  gray  %wtls\n            [puce (blue gen) (turn opt |=([a=spec b=hoon] [a (blue b)]))]\n  ++  wtpt  |=([sic=hoon non=hoon] (gray [%wtpt puce (blue sic) (blue non)]))\n  ++  wtsg  |=([sic=hoon non=hoon] (gray [%wtsg puce (blue sic) (blue non)]))\n  ++  wthx  |=(syn=skin (gray [%wthx (tele syn) puce]))\n  ++  wtts  |=(mod=spec (gray [%wtts (teal mod) puce]))\n  --\n::\n</code></p>\n\n<hr />\n",
        "keys": [
            "ah"
        ]
    },
    {
        "doc": "<h2><code>++ax</code></h2>\n\n<p>Spec engine</p>\n\n<h4>Source</h4>\n\n<p>This core is very large, refer to <code>hoon.hoon</code> for the source.</p>\n\n<hr />\n",
        "keys": [
            "ax"
        ]
    },
    {
        "doc": "<h2><code>++ap</code></h2>\n\n<p>Hoon engine</p>\n\n<h4>Source</h4>\n\n<p>This core is very large, refer to <code>hoon.hoon</code> for the source.</p>\n\n<hr />\n",
        "keys": [
            "ap"
        ]
    },
    {
        "doc": "<h2><code>++ut</code></h2>\n\n<p>Hoon compiler backend</p>\n\n<h4>Source</h4>\n\n<p>This core is too large to include here, refer to <code>hoon.hoon</code> for the source.</p>\n\n<hr />\n",
        "keys": [
            "ut"
        ]
    },
    {
        "doc": "<h2><code>++us</code></h2>\n\n<p>Pretty-printer backend</p>\n\n<h4>Source</h4>\n\n<p>This core is too large to include here, refer to <code>hoon.hoon</code> for the source.</p>\n\n<hr />\n",
        "keys": [
            "us"
        ]
    },
    {
        "doc": "<h2><code>++cain</code></h2>\n\n<p>Tank pretty-print</p>\n\n<p>Pretty-print a <code>vase</code> as a <code>tank</code> using <code>++deal</code>. This is the same as\n<a href=\"#sell\"><code>++sell</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tank</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  cain  sell\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(cain !>(['foo' 'bar']))\n  [%rose p=[p=\" \" q=\"[\" r=\"]\"] q=~[[%leaf p=\"'foo'\"] [%leaf p=\"'bar'\"]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "cain"
        ]
    },
    {
        "doc": "<h2><code>++noah</code></h2>\n\n<p>Tape pretty-print</p>\n\n<p>Pretty-print a <code>vase</code> as a <code>tape</code>. This is the same as <a href=\"#text\"><code>++text</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  noah  text\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(noah !>(['foo' 'bar']))\n  \"['foo' 'bar']\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "noah"
        ]
    },
    {
        "doc": "<h2><code>++onan</code></h2>\n\n<p>Vise to vase</p>\n\n<p>Convert a <code>vise</code> (old <code>vase</code>) to the new <code>vase</code>. This is the same as\n<a href=\"#seer\"><code>++seer</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p>A <code>vise</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  onan  seer\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(onan <code>vise</code>!>(['foo' 'bar']))\n  [#t/[@t @t] q=[7.303.014 7.496.034]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "onan"
        ]
    },
    {
        "doc": "<h2><code>++levi</code></h2>\n\n<p>Type nests or crash</p>\n\n<p>Check if type <code>b</code> nests under type <code>a</code>. Produces <code>%.y</code> if it nests and crashes\nif it does not.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>type</code>.</p>\n\n<p><code>b</code> is a <code>type</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>?</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  levi\n  |=  [a=type b=type]\n  (~(nest ut a) &amp; b)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(levi -:!>('foo') -:!>(%foo))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(levi -:!>(%foo) -:!>('foo'))\n  -need.%foo\n  -have.@t\n  nest-fail\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "levi"
        ]
    },
    {
        "doc": "<h2><code>++text</code></h2>\n\n<p>Tape pretty-print</p>\n\n<p>Pretty print vase <code>vax</code> as a <code>tape</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vax</code> is a <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tape</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  text\n  |=  vax=vase  ^-  tape\n  ~(ram re (sell vax))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(text !>(['foo' 'bar']))\n  \"['foo' 'bar']\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "text"
        ]
    },
    {
        "doc": "<h2><code>++seem</code></h2>\n\n<p>Promote typo</p>\n\n<p>Convert <code>typo</code> (old type) to the new <code>type</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>toy</code> is a <code>typo</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>type</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  seem  |=(toy=typo `type`toy)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(seem -:!>('foo'))</p>\n  \n  <h1>t/@t</h1>\n</blockquote>\n\n<p>```</p>\n\n<hr />\n",
        "keys": [
            "seem"
        ]
    },
    {
        "doc": "<h2><code>++seer</code></h2>\n\n<p>Promote vise</p>\n\n<p>Convert a <code>vise</code> (old <code>vase</code>) to the new <code>vase</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vix</code> is a <code>vise</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  seer  |=(vix=vise `vase`vix)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(seer !>('foo'))\n  [#t/@t q=7.303.014]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "seer"
        ]
    },
    {
        "doc": "<h2><code>++sell</code></h2>\n\n<p>Pretty-print vase to a tank</p>\n\n<p>Pretty-print vase <code>vax</code> to a <code>tank</code> using <code>++deal:us</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vax</code> is a <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tank</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sell\n  ~/  %sell\n  |=  vax=vase\n  ^-  tank\n  ~|  %sell\n  (~(deal us p.vax) q.vax)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sell !>(['foo' 'bar']))\n  [%rose p=[p=\" \" q=\"[\" r=\"]\"] q=~[[%leaf p=\"'foo'\"] [%leaf p=\"'bar'\"]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sell"
        ]
    },
    {
        "doc": "<h2><code>++skol</code></h2>\n\n<p>Pretty-print type to tank</p>\n\n<p>Pretty-print type <code>typ</code> to a <code>tank</code> using <code>++duck:ut</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>typ</code> is a <code>type</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>tank</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  skol\n  |=  typ=type\n  ^-  tank\n  ~(duck ut typ)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(skol -:!>(['foo' 'bar']))\n  [%rose p=[p=\" \" q=\"[\" r=\"]\"] q=~[[%leaf p=\"@t\"] [%leaf p=\"@t\"]]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "skol"
        ]
    },
    {
        "doc": "<h2><code>++slam</code></h2>\n\n<p>Slam a gate</p>\n\n<p>Slam <code>gat</code>, a gate in a <code>vase</code>, with <code>sam</code>, a sample in a <code>vase</code>. Produces a\n<code>vase</code> containing the result.</p>\n\n<h4>Accepts</h4>\n\n<p><code>gat</code> is a gate in a <code>vase</code>.</p>\n\n<p><code>sam</code> is a noun in a <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slam\n  |=  [gat=vase sam=vase]  ^-  vase\n  =+  :-  ^=  typ  ^-  type\n          [%cell p.gat p.sam]\n      ^=  gen  ^-  hoon\n      [%cnsg [%$ ~] [%$ 2] [%$ 3] ~]\n  =+  gun=(~(mint ut typ) %noun gen)\n  [p.gun (slum q.gat q.sam)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slam !>(|=([a=@ud b=@ud] [b a])) !>([1 2]))\n  [#t/[@ud @ud] q=[2 1]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slam"
        ]
    },
    {
        "doc": "<h2><code>++slab</code></h2>\n\n<p>Test if contains</p>\n\n<p>States whether you can access named wing <code>cog</code> in type <code>typ</code> using access method <code>way</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>way</code> is a <code>?(%read %rite %both)</code> (A <code>$vial</code> without <code>%free</code>). This represents\nthe access method (read, write, or both read and write).</p>\n\n<p><code>cog</code> is a <code>@tas</code>, the name of a wing.</p>\n\n<p><code>typ</code> is a <code>type</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>?</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slab\n  |=  [way=?(%read %rite %both) cog=@tas typ=type]\n  ?=  [%&amp; *]\n  (~(fond ut typ) way ~[cog])\n</code></p>\n\n<p>```</p>\n\n<blockquote>\n  <p>=au |=(a=@ +(a))\n  (slab %read %a -:!>(au))\n  %.y\n  (slab %rite %a -:!>(au))\n  %.y\n  (slab %both %a -:!>(au))\n  %.y</p>\n</blockquote>\n\n<blockquote>\n  <p>(slab %both %blah -:!>(au))\n  %.n</p>\n</blockquote>\n\n<blockquote>\n  <p>=fe ^|(|=(a=@ +(a)))\n  (slab %read %a -:!>(fe))\n  %.n\n  (slab %rite %a -:!>(fe))\n  %.y\n  (slab %both %a -:!>(fe))\n  %.n\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slab"
        ]
    },
    {
        "doc": "<h2><code>++slap</code></h2>\n\n<p>Untyped vase <code>.*</code></p>\n\n<p>Compile hoon <code>gen</code> with subject <code>vax</code> using <code>.*</code>, producing a <code>vase</code> of the\nresult.</p>\n\n<h4>Accepts</h4>\n\n<p><code>vax</code> is a noun in a <code>vase</code>, and is the subject.</p>\n\n<p><code>gen</code> is some <code>hoon</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slap\n  |=  [vax=vase gen=hoon]  ^-  vase\n  =+  gun=(~(mint ut p.vax) %noun gen)\n  [p.gun .*(q.vax q.gun)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slap !>(b='foo') (ream '|=(a=@t [a b])'))\n  [#t/&lt;1.qgm [a=@t b=@t]&gt; q=[[[0 6] 0 7] 0 7.303.014]]</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;($-(@t [@t @t]) (slap !>(b='foo') (ream '|=(a=@t [a b])')))\n  &lt;1|xpg [@t @t @t @t]&gt;</p>\n</blockquote>\n\n<blockquote>\n  <p>(!&lt;($-(@t [@t @t]) (slap !>(b='foo') (ream '|=(a=@t [a b])'))) 'bar')\n  ['bar' 'foo']\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slap"
        ]
    },
    {
        "doc": "<h2><code>++slog</code></h2>\n\n<p>Deify printf</p>\n\n<p>Prints stack trace <code>a</code> if the stack trace isn't null, then produces the other\ninput. <code>+slog</code> first takes <code>a</code>, producing a gate. The gate then takes some hoon.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>tang</code>, and is the sample of <code>+slog</code>.</p>\n\n<p><code>(slog a)</code> takes some <code>hoon</code>.</p>\n\n<h4>Produces</h4>\n\n<p>The result of the hoon given to <code>(slog a)</code>, with <code>a</code> printed to the terminal.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slog\n  =|  pri=@\n  |=  a=tang  ^+  same\n  ?~(a same ~&gt;(%slog.[pri i.a] $(a t.a)))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```\nfoo</p>\n\n<blockquote>\n  <p>((slog leaf+\"foo\" ~) (add 1 1))\n  2\n  ```</p>\n</blockquote>\n\n<h4>Discussion</h4>\n\n<p><code>slog</code> is intended to be put in the middle of a bunch of chained function\ncalls that string a piece of data through them, so that an error message will be\nprinted if there's one to print.</p>\n\n<hr />\n",
        "keys": [
            "slog"
        ]
    },
    {
        "doc": "<h2><code>++mean</code></h2>\n\n<p>Crash and printf</p>\n\n<p>Ends the program and prints <code>a</code>, a tracing error message.</p>\n\n<h4>Accepts</h4>\n\n<p><code>a</code> is a <code>tang</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A crash, with <code>a</code> printed to the terminal.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  mean\n  |=  a=tang\n  ^+  !!\n  ?~  a  !!\n  ~_(i.a $(a t.a))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(mean leaf+\"foo\" ~)\n  foo\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "mean"
        ]
    },
    {
        "doc": "<h2><code>++road</code></h2>\n\n<p>Evaluate trap</p>\n\n<p>Evaluate a <code>trap</code>, producing the result if successful or else\ncrashing with a trace.</p>\n\n<h4>Accepts</h4>\n\n<p>A <code>trap</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A noun.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  road\n  |*  =(trap *)\n  ^+  $:trap\n  =/  res  (mule trap)\n  ?-  -.res\n    %&amp;  p.res\n    %|  (mean p.res)\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(road |.(\"foo\"))\n  \"foo\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(road |.(~|('crash!' !!)))\n  'crash!'\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "road"
        ]
    },
    {
        "doc": "<h2><code>++slew</code></h2>\n\n<p>Get axis in vase</p>\n\n<p>Get axis <code>axe</code> in vase <code>vax</code>, producing the resulting <code>vase</code> in a <code>unit</code> which is null if\nthe axis cannot be retrieved.</p>\n\n<h4>Accepts</h4>\n\n<p><code>axe</code> is an atom.</p>\n\n<p><code>vax</code> is a <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(unit vase)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slew\n  |=  [axe=@ vax=vase]  ^-  (unit vase)\n  ?.  |-  ^-  ?\n      ?:  =(1 axe)  &amp;\n      ?.  ?=(^ q.vax)  |\n      $(axe (mas axe), q.vax .*(q.vax [0 (cap axe)]))\n    ~\n  `[(~(peek ut p.vax) %free axe) .*(q.vax [0 axe])]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slew 3 !>(['foo' 'bar']))\n  [~ [#t/@t q=7.496.034]]</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;(@t (need (slew 3 !>(['foo' 'bar']))))\n  'bar'</p>\n</blockquote>\n\n<blockquote>\n  <p>(slew 7 !>(['foo' 'bar']))\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slew"
        ]
    },
    {
        "doc": "<h2><code>++slim</code></h2>\n\n<p>Identical to <code>++seer</code></p>\n\n<p>Convert a <code>vise</code> (old <code>vase</code>) to a <code>vase</code>. Identical to <a href=\"#seer\"><code>++seer</code></a>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>old</code> is a <code>vise</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slim\n  |=  old=vise  ^-  vase\n  old\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slim !>('foo'))\n  [#t/@t q=7.303.014]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slim"
        ]
    },
    {
        "doc": "<h2><code>++slit</code></h2>\n\n<p>Type of slam</p>\n\n<p>The <code>type</code> produced if a gate of type <code>gat</code> were slammed with a sample of type <code>sam</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>gat</code> is a <code>type</code>.</p>\n\n<p><code>sam</code> is a <code>type</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>type</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slit\n  |=  [gat=type sam=type]\n  ?&gt;  (~(nest ut (~(peek ut gat) %free 6)) &amp; sam)\n  (~(play ut [%cell gat sam]) [%cnsg [%$ ~] [%$ 2] [%$ 3] ~])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slit -:!>(|*(a=@ [a a])) -:!>(42))</p>\n  \n  <h1>t/[@ud @ud]</h1>\n</blockquote>\n\n<blockquote>\n  <p>(slit -:!>(|*(a=@ [a a])) -:!>('foo'))</p>\n  \n  <h1>t/[@t @t]</h1>\n</blockquote>\n\n<p>```</p>\n\n<hr />\n",
        "keys": [
            "slit"
        ]
    },
    {
        "doc": "<h2><code>++slob</code></h2>\n\n<p>Superficial arm</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slob\n  |=  [cog=@tas typ=type]\n  ^-  ?\n  ?+  typ  |\n      [%hold *]  $(typ ~(repo ut typ))\n      [%hint *]  $(typ ~(repo ut typ))\n      [%core *]\n    |-  ^-  ?\n    ?~  q.r.q.typ  |\n    ?|  (~(has by q.q.n.q.r.q.typ) cog)\n        $(q.r.q.typ l.q.r.q.typ)\n        $(q.r.q.typ r.q.r.q.typ)\n    ==\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "slob"
        ]
    },
    {
        "doc": "<h2><code>++sloe</code></h2>\n\n<p>Get arms in core</p>\n\n<p>Produces a list of the arms in a core of type <code>typ</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>typ</code> is a type.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(list term)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sloe\n  |=  typ=type\n  ^-  (list term)\n  ?+    typ  ~\n      [%hold *]  $(typ ~(repo ut typ))\n      [%hint *]  $(typ ~(repo ut typ))\n      [%core *]\n    %-  zing\n    %+  turn  ~(tap by q.r.q.typ)\n      |=  [* b=tome]\n    %+  turn  ~(tap by q.b)\n      |=  [a=term *]\n    a\n  ==\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(sloe -:!>(|=(@ 1)))\n  ~[%$]</p>\n</blockquote>\n\n<blockquote>\n  <p>=cr |%\n        ++  foo  1\n        ++  bar  2\n        ++  baz  3\n        --</p>\n</blockquote>\n\n<blockquote>\n  <p>(sloe -:!>(cr))\n  ~[%foo %baz %bar]</p>\n</blockquote>\n\n<blockquote>\n  <p>(sloe -:!>(42))\n  ~\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "sloe"
        ]
    },
    {
        "doc": "<h2><code>++slop</code></h2>\n\n<p>Cons two vases</p>\n\n<p>Produce the vase of a cell of vases <code>hed</code> and <code>tal</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>hed</code> is a <code>vase</code>.</p>\n\n<p><code>tal</code> is a <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slop\n  |=  [hed=vase tal=vase]\n  ^-  vase\n  [[%cell p.hed p.tal] [q.hed q.tal]]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slop !>('foo') !>(42))\n  [#t/[@t @ud] q=[7.303.014 42]]</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;([@t @ud] (slop !>('foo') !>(42)))\n  ['foo' 42]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slop"
        ]
    },
    {
        "doc": "<h2><code>++slot</code></h2>\n\n<p>Got axis in vase</p>\n\n<p>Get axis <code>axe</code> in vase <code>vax</code>, returning it in a <code>vase</code>. Crashes if the axis\ncannot be retrieved.</p>\n\n<h4>Accepts</h4>\n\n<p><code>axe</code> is an atom.</p>\n\n<p><code>vax</code> is a <code>vase</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slot\n  |=  [axe=@ vax=vase]  ^-  vase\n  [(~(peek ut p.vax) %free axe) .*(q.vax [0 axe])]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slot 3 !>(['foo' 'bar']))\n  [#t/@t q=7.496.034]</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;(@t (slot 3 !>(['foo' 'bar'])))\n  'bar'</p>\n</blockquote>\n\n<blockquote>\n  <p>(slot 7 !>(['foo' 'bar']))\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slot"
        ]
    },
    {
        "doc": "<h2><code>++slym</code></h2>\n\n<p>Slam without sample-type</p>\n\n<p>Slam <code>gat</code>, a gate in a <code>vase</code>, with <code>sam</code>, a <code>noun</code>. The type of <code>sam</code> is\nignored and the type of the resulting vase is determined by the gate alone.</p>\n\n<h4>Accepts</h4>\n\n<p><code>gat</code> is a <code>vase</code>.</p>\n\n<p><code>sam</code> is a noun.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>vase</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  slym\n  |=  [gat=vase sam=*]  ^-  vase\n  (slap gat(+&lt;.q sam) [%limb %$])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(slym !>(|*(a=@ux [a a])) 'foo')\n  [#t/[@ux @ux] q=[7.303.014 7.303.014]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(slym !>(|*(a=@ux [a a])) \"foobar\")\n  [#t/[@ux @ux] q=[[102 111 111 98 97 114 0] 102 111 111 98 97 114 0]]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "slym"
        ]
    },
    {
        "doc": "<h2><code>++sped</code></h2>\n\n<p>Reconstruct type</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  sped\n  |=  vax=vase\n  ^-  vase\n  :_  q.vax\n  ?@  q.vax  (~(fuse ut p.vax) [%atom %$ ~])\n  ?@  -.q.vax\n    ^=  typ\n    %-  ~(play ut p.vax)\n    [%wtgr [%wtts [%leaf %tas -.q.vax] [%&amp; 2]~] [%$ 1]]\n  (~(fuse ut p.vax) [%cell %noun %noun])\n</code></p>\n\n<hr />\n",
        "keys": [
            "sped"
        ]
    },
    {
        "doc": "<h2><code>++swat</code></h2>\n\n<p>Deferred <code>++slap</code></p>\n\n<p>This is the same as <a href=\"#slap\"><code>++slap</code></a> except <code>tap</code> is the subject <code>vase</code>\nencapsulated in a <code>trap</code>, and a <code>(trap vase)</code> is produced.</p>\n\n<h4>Accepts</h4>\n\n<p><code>tap</code> is a <code>(trap vase)</code>.</p>\n\n<p><code>gen</code> is <code>hoon</code>.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(trap vase)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  swat\n  |=  [tap=(trap vase) gen=hoon]\n  ^-  (trap vase)\n  =/  gun  (~(mint ut p:$:tap) %noun gen)\n  |.  ~+\n  [p.gun .*(q:$:tap q.gun)]\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>%.  10\n    !&lt;  $-(@ @)\n    %-  road\n    %+  swat\n      |.(!>(add-42=(cury add 42)))\n    (ream '|=(a=@ (add-42 a))')\n  52\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "swat"
        ]
    },
    {
        "doc": "<h2><code>++vang</code></h2>\n\n<p>Set <code>++vast</code> parameters</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  vang                                                ::  set ++vast params\n  |=  [bug=? wer=path]                                  ::  bug: debug mode\n  %*(. vast bug bug, wer wer)                           ::  wer: where we are\n</code></p>\n\n<hr />\n",
        "keys": [
            "vang"
        ]
    },
    {
        "doc": "<h2><code>++vast</code></h2>\n\n<p>Main parsing core</p>\n\n<h3>Source</h3>\n\n<p>This core is too large to include here, please refer to <code>hoon.hoon</code> for the\nsource.</p>\n\n<hr />\n\n<h3><code>++vest</code></h3>\n\n<p>Parse hoon</p>\n\n<p>Parsing <code>rule</code>. Parse hoon of any form.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  vest\n  ~/  %vest\n  |=  tub=nail\n  ^-  (like hoon)\n  %.  tub\n  %-  full\n  (ifix [gay gay] tall:vast)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rash '(add 1 1)' vest)\n  [%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(rash '%+  add\\0a  1\\0a1' vest)\n  [%cnls p=[%wing p=~[%add]] q=[%sand p=%ud q=1] r=[%sand p=%ud q=1]]\n  ```</p>\n</blockquote>\n\n<hr />\n\n<h3><code>++vice</code></h3>\n\n<p>Parse wide-form hoon</p>\n\n<p>Parse <code>txt</code>, a <code>knot</code> containing wide-form hoon, to <code>hoon</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>txt</code> is a <code>@ta</code>.</p>\n\n<h4>Produces</h4>\n\n<p><code>hoon</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  vice\n  |=  txt=@ta\n  ^-  hoon\n  (rash txt wide:vast)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(vice '(add 1 1)')\n  [%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(vice '%+  add\\0a  1\\0a1')\n  {1 3}\n  syntax error\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "vast"
        ]
    },
    {
        "doc": "<h2><code>++make</code></h2>\n\n<p>Compile cord to nock</p>\n\n<p>Compile <code>txt</code>, an <code>atom</code> containing hoon source code as little-endian UTF-8\ntext, to <code>nock</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>txt</code> is a <code>@</code>.</p>\n\n<h4>Produces</h4>\n\n<p><code>nock</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  make\n  |=  txt=@\n  q:(~(mint ut %noun) %noun (ream txt))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(make '[. . .]')\n  [p=[%0 p=1] q=[p=[%0 p=1] q=[%0 p=1]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>.*(42 (make '[. . .]'))\n  [42 42 42]\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "make"
        ]
    },
    {
        "doc": "<h2><code>++rain</code></h2>\n\n<p>Parse with % path</p>\n\n<p>Parse <code>txt</code>, an <code>atom</code> containing hoon source code as little-endian UTF-8 text,\nto <code>hoon</code>. Any <code>%</code> path short-hands are replaced with the path given in <code>bon</code>.\nIf parsing fails, <code>bon</code> is also printed to the terminal.</p>\n\n<h4>Accepts</h4>\n\n<p><code>bon</code> is a <code>path</code>.</p>\n\n<p><code>txt</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p><code>hoon</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  rain\n  |=  [bon=path txt=@]\n  ^-  hoon\n  =+  vaz=vast\n  ~|  bon\n  (scan (trip txt) (full (ifix [gay gay] tall:vaz(wer bon))))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(rain /a/b/c '%')\n  [%clsg p=~[[%sand p=%ta q=97] [%sand p=%ta q=98] [%sand p=%ta q=99]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;(path (slap !>(~) (rain /a/b/c '%')))\n  /a/b/c</p>\n</blockquote>\n\n<blockquote>\n  <p>(rain / '(add 1 1)')\n  [%cncl p=[%wing p=~[%add]] q=~[[%sand p=%ud q=1] [%sand p=%ud q=1]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>!&lt;(@ud (slap !>(add=add) (rain / '(add 1 1)')))\n  2\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "rain"
        ]
    },
    {
        "doc": "<h2><code>++ream</code></h2>\n\n<p>Parse cord to hoon</p>\n\n<p>Parse <code>txt</code>, an <code>atom</code> containing hoon source code as little-endian UTF-8 text,\nto <code>hoon</code>.</p>\n\n<h4>Accepts</h4>\n\n<p><code>txt</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p><code>hoon</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ream\n  |=  txt=@\n  ^-  hoon\n  (rash txt vest)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>!&lt;(tape (slap !>(~) (ream '\"foobar\"')))\n  \"foobar\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ream"
        ]
    },
    {
        "doc": "<h2><code>++reck</code></h2>\n\n<p>Parse hoon file</p>\n\n<p>Parse <code>bon</code> to <code>hoon</code>. <code>bon</code> is a <code>path</code> to a .hoon file without the mark.</p>\n\n<h4>Accepts</h4>\n\n<p><code>bon</code> is a <code>path</code>.</p>\n\n<h4>Produces</h4>\n\n<p><code>hoon</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  reck\n  |=  bon=path\n  (rain bon .^(@t %cx (weld bon `path`[%hoon ~])))\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(reck %/gen/code)\n  [ %clhp\n    p=[%rock p=%tas q=7.954.803]\n      q\n    [ %brts\n        p\n      [ %bccl\n          p\n        [   i\n          [ %bccl\n              p\n            [   i\n              [%bcts p=term=%now q=[%base p=[%atom p=~.da]]]\n                t\n  ......(truncated for brevity)..........\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "reck"
        ]
    },
    {
        "doc": "<h2><code>++ride</code></h2>\n\n<p>End-to-end compiler</p>\n\n<p>Parse and compile cord <code>txt</code>, producing a pair of its <code>type</code> and compiled\n<code>nock</code>. The <code>typ</code> argument specifies the <code>type</code> of the subject.</p>\n\n<h4>Accepts</h4>\n\n<p><code>typ</code> is a <code>type</code></p>\n\n<p><code>txt</code> is an atom.</p>\n\n<h4>Produces</h4>\n\n<p>A <code>(pair type nock)</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  ride\n  |=  [typ=type txt=@]\n  ^-  (pair type nock)\n  ~&gt;  %slog.[0 leaf/\"ride: parsing\"]\n  =/  gen  (ream txt)\n  ~&gt;  %slog.[0 leaf/\"ride: compiling\"]\n  ~&lt;  %slog.[0 leaf/\"ride: compiled\"]\n  (~(mint ut typ) %noun gen)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```\nride: parsing\nride: compiling\nride: compiled</p>\n\n<blockquote>\n  <p>(ride -:!>(.) '(add 2 2)')\n  [ #t/@\n      q\n    [ %8\n      p=[%9 p=36 q=[%0 p=1.023]]\n        q\n      [ %9\n        p=2\n          q\n        [ %10\n            p\n          [ p=6\n              q\n            [ p=[%7 p=[%0 p=3] q=[%1 p=2]]\n              q=[%7 p=[%0 p=3] q=[%1 p=2]]\n            ]\n          ]\n          q=[%0 p=2]\n        ]\n      ]\n    ]\n  ]</p>\n</blockquote>\n\n<p>ride: parsing\nride: compiling</p>\n\n<blockquote>\n  <p>(ride %noun '(add 2 2)')\n  -find.add\n  dojo: hoon expression failed\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "ride"
        ]
    },
    {
        "doc": "<h2><code>+$mane</code></h2>\n\n<p>XML name+space</p>\n\n<p>XML tag name and optional namespace.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  mane  $@(@tas [@tas @tas])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>(en-xml:html ;foo;)\n  \"<foo></foo>\"</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html ;foo_bar;)\n  \"<foo:bar></foo:bar>\"</p>\n</blockquote>\n\n<blockquote>\n  <p><code>manx</code>;foo_bar;\n  [g=[n=[%foo %bar] a=~] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mane</code>n.g:<code>manx</code>;foo_bar;\n  [%foo %bar]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mane</code>n.g:<code>manx</code>;foo;\n  %foo\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$mane"
        ]
    },
    {
        "doc": "<h2><code>+$manx</code></h2>\n\n<p>Dynamic XML node</p>\n\n<p>An XML element which may contain text, attributes, and other elements.</p>\n\n<p><code>g</code> is a <a href=\"#marx\"><code>$marx</code></a> (a tag) and <code>c</code> is a\n<a href=\"#marl\"><code>$marl</code></a> (its contents).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  manx  $~([[%$ ~] ~] [g=marx c=marl])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*manx\n  [g=[n=%$ a=~] c=~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>manx</code>;foo;\n  [g=[n=%foo a=~] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html <code>manx</code>;foo;)\n  \"<foo></foo>\"</p>\n</blockquote>\n\n<blockquote>\n  <p>=a ^-  manx\n       ;foo\n         ;bar: abc\n         ;baz\n           ;xxx: hello\n         ==\n       ==</p>\n</blockquote>\n\n<blockquote>\n  <p>a\n  [ g=[n=%foo a=~]\n      c\n    ~[\n      [ g=[n=%bar a=~]\n        c=~[[g=[n=%$ a=~[[n=%$ v=\"abc\"]]] c=~]]\n      ]\n      [ g=[n=%baz a=~]\n          c\n        ~[\n          [ g=[n=%xxx a=~]\n            c=~[[g=[n=%$ a=~[[n=%$ v=\"hello\"]]] c=~]]\n          ]\n        ]\n      ]\n    ]\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html a)\n  \"<foo><bar>abc</bar><baz><xxx>hello</xxx></baz></foo>\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$manx"
        ]
    },
    {
        "doc": "<h2><code>+$marl</code></h2>\n\n<p>XML node list</p>\n\n<p>A list of XML nodes (<a href=\"#marx\"><code>$marx</code></a>).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  marl  (list manx)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*marl\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p>^-  marl\n    ;=\n      ;foo: abc\n      ;bar: def\n    ==\n  ~[\n    [g=[n=%foo a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['a' 'b' 'c']]]] c=~]]]\n    [g=[n=%bar a=~] c=~[[g=[n=%$ a=~[[n=%$ v=~['d' 'e' 'f']]]] c=~]]]\n  ]</p>\n</blockquote>\n\n<blockquote>\n  <p>%-  en-xml:html\n    ;baz\n      ;=\n        ;foo: abc\n        ;bar: def\n      ==\n    ==\n  \"<baz><foo>abc</foo><bar>def</bar></baz>\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$marl"
        ]
    },
    {
        "doc": "<h2><code>+$mars</code></h2>\n\n<p>XML cdata</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  mars  [t=[n=%$ a=[i=[n=%$ v=tape] t=~]] c=~]\n</code></p>\n\n<hr />\n",
        "keys": [
            "$mars"
        ]
    },
    {
        "doc": "<h2><code>+$mart</code></h2>\n\n<p>XML attributes</p>\n\n<p>A list of atributes for an XML tag. For each list item, <code>n</code> is a\n<a href=\"#mane\"><code>$mane</code></a> (an attribute name with optional namespace) and <code>v</code> is\na <code>tape</code> (the attribute itself).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  mart  (list [n=mane v=tape])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*mart\n  ~</p>\n</blockquote>\n\n<blockquote>\n  <p><code>manx</code>;foo.bar;\n  [g=[n=%foo a=~[[n=%class v=\"bar\"]]] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>mart</code>a.g:<code>manx</code>;foo.bar;\n  ~[[n=%class v=\"bar\"]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html ;foo.bar;)\n  \"<foo class=\\\"bar\\\"></foo>\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$mart"
        ]
    },
    {
        "doc": "<h2><code>+$marx</code></h2>\n\n<p>Dynamic XML tag</p>\n\n<p>An XML tag with optional attributes. <code>n</code> is a <a href=\"#mane\"><code>$mane</code></a> (the tag\nname with optional namespace) and <code>a</code> is a <a href=\"#marthoot\"><code>$mart</code></a> (any XML\nattributes).</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  marx  $~([%$ ~] [n=mane a=mart])\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>manx</code>;foo.bar;\n  [g=[n=%foo a=~[[n=%class v=\"bar\"]]] c=~]</p>\n</blockquote>\n\n<blockquote>\n  <p><code>marx</code>g:<code>manx</code>;foo.bar;\n  [n=%foo a=~[[n=%class v=\"bar\"]]]</p>\n</blockquote>\n\n<blockquote>\n  <p>(en-xml:html ;foo.bar;)\n  \"<foo class=\\\"bar\\\"></foo>\"\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$marx"
        ]
    },
    {
        "doc": "<h2><code>+$mite</code></h2>\n\n<p>MIME type</p>\n\n<p>This type represents a MIME type like <code>text/plain</code> as a <code>path</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  mite  (list @ta)\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p><code>mite</code>/text/plain\n  /text/plain\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$mite"
        ]
    },
    {
        "doc": "<h2><code>+$pass</code></h2>\n\n<p>Public key</p>\n\n<p>This type is used for a ship's public key, as an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  pass  @\n</code></p>\n\n<hr />\n",
        "keys": [
            "$pass"
        ]
    },
    {
        "doc": "<h2><code>+$ring</code></h2>\n\n<p>Private key</p>\n\n<p>This type is used for a ship's private key, as an atom.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  ring  @\n</code></p>\n\n<hr />\n",
        "keys": [
            "$ring"
        ]
    },
    {
        "doc": "<h2><code>+$ship</code></h2>\n\n<p>Network identity</p>\n\n<p>Just an <code>@p</code></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  ship  @p\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*ship\n  ~zod</p>\n</blockquote>\n\n<blockquote>\n  <p><code>ship</code>~sampel-palnet\n  ~sampel-palnet\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$ship"
        ]
    },
    {
        "doc": "<h2><code>+$shop</code></h2>\n\n<p>Urbit/DNS identity</p>\n\n<p>Either a <a href=\"#ship\"><code>$ship</code></a> or a domain name as a <code>path</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  shop  (each ship (list @ta))\n</code></p>\n\n<hr />\n",
        "keys": [
            "$shop"
        ]
    },
    {
        "doc": "<h2><code>+$spur</code></h2>\n\n<p>ship desk case spur</p>\n\n<p>The part of a Clay <code>path</code> after the <code>%</code>.</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  spur  path\n</code></p>\n\n<hr />\n",
        "keys": [
            "$spur"
        ]
    },
    {
        "doc": "<h2><code>+$time</code></h2>\n\n<p>Galactic time</p>\n\n<p>Just a <code>@da</code></p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n+$  time  @da\n</code></p>\n\n<h4>Examples</h4>\n\n<p>```</p>\n\n<blockquote>\n  <p>*time\n  ~2000.1.1\n  ```</p>\n</blockquote>\n\n<hr />\n",
        "keys": [
            "$time"
        ]
    },
    {
        "doc": "<h2><code>++pi-heck</code></h2>\n\n<p>Profiling utility</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pi-heck\n    |=  [nam=@tas day=doss]\n    ^-  doss\n    =+  lam=(~(get by hit.day) nam)\n    day(hit (~(put by hit.day) nam ?~(lam 1 +(u.lam))))\n</code></p>\n\n<hr />\n",
        "keys": [
            "pi-heck"
        ]
    },
    {
        "doc": "<h2><code>++pi-noon</code></h2>\n\n<p>Sample trace</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pi-noon\n  |=  [mot=term paz=(list path) day=doss]\n  =|  lax=(unit path)\n  |-  ^-  doss\n  ?~  paz  day(mon (pi-mope mot mon.day))\n  %=    $\n      paz  t.paz\n      lax  `i.paz\n      cut.day\n    %+  ~(put by cut.day)  i.paz\n    ^-  hump\n    =+  nax=`(unit path)`?~(t.paz ~ `i.t.paz)\n    =+  hup=`hump`=+(hup=(~(get by cut.day) i.paz) ?^(hup u.hup [*moan ~ ~]))\n    :+  (pi-mope mot mon.hup)\n      ?~  lax  out.hup\n      =+  hag=(~(get by out.hup) u.lax)\n      (~(put by out.hup) u.lax ?~(hag 1 +(u.hag)))\n    ?~  nax  inn.hup\n    =+  hag=(~(get by inn.hup) u.nax)\n    (~(put by inn.hup) u.nax ?~(hag 1 +(u.hag)))\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "pi-noon"
        ]
    },
    {
        "doc": "<h2><code>++pi-mope</code></h2>\n\n<p>Add sample</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pi-mope\n  |=  [mot=term mon=moan]\n  ?+  mot  mon\n    %fun  mon(fun +(fun.mon))\n    %noc  mon(noc +(noc.mon))\n    %glu  mon(glu +(glu.mon))\n    %mal  mon(mal +(mal.mon))\n    %far  mon(far +(far.mon))\n    %coy  mon(coy +(coy.mon))\n    %euq  mon(euq +(euq.mon))\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "pi-mope"
        ]
    },
    {
        "doc": "<h2><code>++pi-moth</code></h2>\n\n<p>Count sample</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pi-moth\n  |=  mon=moan  ^-  @ud\n  :(add fun.mon noc.mon glu.mon mal.mon far.mon coy.mon euq.mon)\n</code></p>\n\n<hr />\n",
        "keys": [
            "pi-moth"
        ]
    },
    {
        "doc": "<h2><code>++pi-mumm</code></h2>\n\n<p>Print sample</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pi-mumm\n  |=  mon=moan  ^-  tape\n  =+  tot=(pi-moth mon)\n  ;:  welp\n    ^-  tape\n    ?:  =(0 noc.mon)  ~\n    (welp (scow %ud (div (mul 100 noc.mon) tot)) \"n \")\n  ::\n    ^-  tape\n    ?:  =(0 fun.mon)  ~\n    (welp (scow %ud (div (mul 100 fun.mon) tot)) \"c \")\n  ::\n    ^-  tape\n    ?:  =(0 glu.mon)  ~\n    (welp (scow %ud (div (mul 100 glu.mon) tot)) \"g \")\n  ::\n    ^-  tape\n    ?:  =(0 mal.mon)  ~\n    (welp (scow %ud (div (mul 100 mal.mon) tot)) \"m \")\n  ::\n    ^-  tape\n    ?:  =(0 far.mon)  ~\n    (welp (scow %ud (div (mul 100 far.mon) tot)) \"f \")\n  ::\n    ^-  tape\n    ?:  =(0 coy.mon)  ~\n    (welp (scow %ud (div (mul 100 coy.mon) tot)) \"y \")\n  ::\n    ^-  tape\n    ?:  =(0 euq.mon)  ~\n    (welp (scow %ud (div (mul 100 euq.mon) tot)) \"e \")\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "pi-mumm"
        ]
    },
    {
        "doc": "<h2><code>++pi-tell</code></h2>\n\n<p>Produce dump</p>\n\n<h4>Source</h4>\n\n<p><code>hoon\n++  pi-tell\n  |=  day=doss\n  ^-  (list tape)\n  ?:  =(day *doss)  ~\n  =+  tot=(pi-moth mon.day)\n  ;:  welp\n    [(welp \"events: \" (pi-mumm mon.day)) ~]\n  ::\n    %+  turn\n      %+  sort  ~(tap by hit.day)\n      |=  [a=[* @] b=[* @]]\n      (lth +.a +.b)\n    |=  [nam=term num=@ud]\n    :(welp (trip nam) \": \" (scow %ud num))\n    [\"\" ~]\n  ::\n    %-  zing\n    ^-  (list (list tape))\n    %+  turn\n      %+  sort  ~(tap by cut.day)\n      |=  [one=(pair path hump) two=(pair path hump)]\n      (gth (pi-moth mon.q.one) (pi-moth mon.q.two))\n    |=  [pax=path hup=hump]\n    =+  ott=(pi-moth mon.hup)\n    ;:  welp\n      [(welp \"label: \" (spud pax)) ~]\n      [(welp \"price: \" (scow %ud (div (mul 100 ott) tot))) ~]\n      [(welp \"shape: \" (pi-mumm mon.hup)) ~]\n    ::\n      ?:  =(~ out.hup)  ~\n      :-  \"into:\"\n      %+  turn\n        %+  sort  ~(tap by out.hup)\n        |=([[* a=@ud] [* b=@ud]] (gth a b))\n      |=  [pax=path num=@ud]\n      ^-  tape\n      :(welp \"  \" (spud pax) \": \" (scow %ud num))\n    ::\n      ?:  =(~ inn.hup)  ~\n      :-  \"from:\"\n      %+  turn\n        %+  sort  ~(tap by inn.hup)\n        |=([[* a=@ud] [* b=@ud]] (gth a b))\n      |=  [pax=path num=@ud]\n      ^-  tape\n      :(welp \"  \" (spud pax) \": \" (scow %ud num))\n    ::\n      [\"\" ~]\n      ~\n    ==\n  ==\n</code></p>\n\n<hr />\n",
        "keys": [
            "pi-tell"
        ]
    }
]